{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Create Account This object is used to access the Account lookup table. Create an Account if Account does not already exist. URL : /api/account Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Require Type Description strCode Yes String A unique code for referencing the account. strDescription Yes String A short text describing the account. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 56 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strCode is required } { msg : Create failed } Get all Account list Get the all registered Account list. URL : /api/account Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Account list found! , data : [ { _id : 45 , strCode : A45 , strDescription : String __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update Account Update the Account by Id URL : /api/account/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the account. Param Require Type Description strCode Yes String A unique code for referencing the account. strDescription Yes String A short text describing the account. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed } Get Single Account By Id Get a single Account by id if current Account was registered on it. URL : /api/account/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the account. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 54 , strCode : 34 , strDescription : String intUpdated :2020-11-26T10:42:25.136+00:00 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If workorder does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null } Delete Account Delete a Account by Id URL : /api/account/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the account. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Account"},{"location":"index.html#create-account","text":"This object is used to access the Account lookup table. Create an Account if Account does not already exist. URL : /api/account Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Require Type Description strCode Yes String A unique code for referencing the account. strDescription Yes String A short text describing the account. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 56 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strCode is required } { msg : Create failed }","title":"Create Account"},{"location":"index.html#get-all-account-list","text":"Get the all registered Account list. URL : /api/account Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Account list found! , data : [ { _id : 45 , strCode : A45 , strDescription : String __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all Account list"},{"location":"index.html#update-account","text":"Update the Account by Id URL : /api/account/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the account. Param Require Type Description strCode Yes String A unique code for referencing the account. strDescription Yes String A short text describing the account. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Update Account"},{"location":"index.html#get-single-account-by-id","text":"Get a single Account by id if current Account was registered on it. URL : /api/account/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the account. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 54 , strCode : 34 , strDescription : String intUpdated :2020-11-26T10:42:25.136+00:00 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If workorder does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Get Single Account By Id"},{"location":"index.html#delete-account","text":"Delete a Account by Id URL : /api/account/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the account. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete Account"},{"location":"Account/index.html","text":"Create Account This object is used to access the Account lookup table. Create an Account if Account does not already exist. URL : /api/account Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Require Type Description strCode Yes String A unique code for referencing the account. strDescription Yes String A short text describing the account. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 56 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strCode is required } { msg : Create failed } Get all Account list Get the all registered Account list. URL : /api/account Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Account list found! , data : [ { _id : 45 , strCode : A45 , strDescription : String __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update Account Update the Account by Id URL : /api/account/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the account. Param Require Type Description strCode Yes String A unique code for referencing the account. strDescription Yes String A short text describing the account. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed } Get Single Account By Id Get a single Account by id if current Account was registered on it. URL : /api/account/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the account. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 54 , strCode : 34 , strDescription : String intUpdated :2020-11-26T10:42:25.136+00:00 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If workorder does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null } Delete Account Delete a Account by Id URL : /api/account/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the account. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Create Account"},{"location":"Account/index.html#create-account","text":"This object is used to access the Account lookup table. Create an Account if Account does not already exist. URL : /api/account Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Require Type Description strCode Yes String A unique code for referencing the account. strDescription Yes String A short text describing the account. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 56 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strCode is required } { msg : Create failed }","title":"Create Account"},{"location":"Account/index.html#get-all-account-list","text":"Get the all registered Account list. URL : /api/account Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Account list found! , data : [ { _id : 45 , strCode : A45 , strDescription : String __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all Account list"},{"location":"Account/index.html#update-account","text":"Update the Account by Id URL : /api/account/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the account. Param Require Type Description strCode Yes String A unique code for referencing the account. strDescription Yes String A short text describing the account. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Update Account"},{"location":"Account/index.html#get-single-account-by-id","text":"Get a single Account by id if current Account was registered on it. URL : /api/account/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the account. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 54 , strCode : 34 , strDescription : String intUpdated :2020-11-26T10:42:25.136+00:00 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If workorder does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Get Single Account By Id"},{"location":"Account/index.html#delete-account","text":"Delete a Account by Id URL : /api/account/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the account. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete Account"},{"location":"Asset/index.html","text":"Create Asset This object is used to represent the assets that are to be managed by the CMMS : these can be equipments, locations and facilities, or tools Create an Asset if Asset does not already exist. URL : /api/assets Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description strName String Display name of the asset. strDescription String A short text describing the asset. strMake String For equipment or tools, this field can be used to store the brand's name of the asset. strMake String For equipment or tools, this field can be used to store the brand's name of the asset. strModel String For equipment or tools, this field can be used to store the model's name of the asset. qtyMinStockCount integer Mininum stock count for the asset. strCity String The city the asset is located into. strShippingTerms String This field can be used to add comments about the shipping terms of the asset. For example : \"Item is heavier than 20kg and must be delivered before 10AM.\" strAddress String Street number and street name of the address the asset is located at. strNotes String This field can be used to store additional details about the asset like the name of its supplier, a voltage range or dimensions for example. strProvince String Code or full name of the province the asset is located at. intCountryID integer The ID of the country the asset is located at. For example : 124 for Canada or 840 for United States of America. For getting all possible values, please refer to the Country section. strInventoryCode String This field can be used to store an inventory code for the asset. qtyStockCount Integer Indicates the current stock count for the asset. intSiteID Integer For multi-sites tenants, the ID of the site where the asset is located at. strRow String The row where the asset is located at in a facility. strMASourceProduct string A JSON formatted string giving details about an asset coming from MA Source. strAisle string The aisle where the asset is located at in a facility. strBinNumber string The number of the bin where the asset is stored. intCategoryID Integer The ID of the category the asset is directly attached to. strPostalCode string The postal code of the address the asset is located at. strSerialNumber string This field can be used to store the serial number of the asset. strCode string This field can be used to define a code associated with the asset. dblLatitude Double The latitude of the geographic location of the asset. dblLongitude Double The longitude of the geographic location of the asset. strUnspcCode String This field can be used to store the United Nations Standard Products and Services Code of the asset. dblLastPrice Double Last Purchase Price Per Unit on Asset bolIsBillToFacility Boolean If set to true, indicates that invoices for assets (usually parts/supplies) should be sent to this facility. intAssetLocationID Integer An integer uniquely defining the location of asset. Refers to Asset with an asset category as Locations And Facilities bolIsOnline Boolean A boolean value representing if the related Asset is online or offline, 1 or 0 respectively. bolIsShippingOrReceivingFacility Boolean A boolean that identifies whether a facility ships or receives assets (usually parts/supplies). strQuotingTerms Boolean Quoting terms that are automatically added to RFQs where shipping is indicated for Asset type Facility. intAssetParentID Integer An integer that uniquely identifies the parent of Asset. intAccountID Integer An integer unitquely defining the Account. intChargeDepartmentID Integer An integer uniquely defining the Charge Department intSuperCategorySysCode Integer Asset Category SysCode for Region or a Site strBarcode Integer For equipment or tools, this field can be used to store the bar code's value of the asset. Data example { strFullName : strFullName of Asset , strDescription : Asset_Desc_Name , strMake : Asset_Make_Name , strModel : Asset_Model_Name , qtyStockCount : 4 ... ... } Success Response: Code : 200 success Resonse example { msg : Asset added successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed } Get all asset list Get the all registered asset list. URL : /api/assets Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Asset list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , strName : strName , strDescription : strDescription , strMake : strMake , strModel : strModel , qtyMinStockCount : 23, strCity : strCity , strShippingTerms : strShippingTerms , strAddress : strAddress , strNotes : , strProvince : , intCountryID : 45, strInventoryCode : , qtyStockCount : 11, intSiteID : 329, strRow : , strMASourceProduct : , strAisle : , strBinNumber : , intCategoryID : 32, strPostalCode : , strSerialNumber : , strCode : , dblLatitude : 0.114573, dblLongitude : 4.2587, strUnspcCode : , dblLastPrice : 4.5, bolIsBillToFacility : false, intAssetLocationID : 886, bolIsOnline : false, bolIsShippingOrReceivingFacility : false, strQuotingTerms : , intAssetParentID : null, intAccountID : null, intChargeDepartmentID : null, intSuperCategorySysCode : null, strBarcode : , __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update Asset Update the Asset by Id URL : /api/assets/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the asset. Param Type Description strName String Display name of the asset. strDescription String A short text describing the asset. strMake String For equipment or tools, this field can be used to store the brand's name of the asset. strMake String For equipment or tools, this field can be used to store the brand's name of the asset. strModel String For equipment or tools, this field can be used to store the model's name of the asset. qtyMinStockCount integer Mininum stock count for the asset. strCity String The city the asset is located into. strShippingTerms String This field can be used to add comments about the shipping terms of the asset. For example : \"Item is heavier than 20kg and must be delivered before 10AM.\" strAddress String Street number and street name of the address the asset is located at. strNotes String This field can be used to store additional details about the asset like the name of its supplier, a voltage range or dimensions for example. strProvince String Code or full name of the province the asset is located at. intCountryID integer The ID of the country the asset is located at. For example : 124 for Canada or 840 for United States of America. For getting all possible values, please refer to the Country section. strInventoryCode String This field can be used to store an inventory code for the asset. qtyStockCount Integer Indicates the current stock count for the asset. intSiteID Integer For multi-sites tenants, the ID of the site where the asset is located at. strRow String The row where the asset is located at in a facility. strMASourceProduct string A JSON formatted string giving details about an asset coming from MA Source. strAisle string The aisle where the asset is located at in a facility. strBinNumber string The number of the bin where the asset is stored. intCategoryID Integer The ID of the category the asset is directly attached to. strPostalCode string The postal code of the address the asset is located at. strSerialNumber string This field can be used to store the serial number of the asset. strCode string This field can be used to define a code associated with the asset. dblLatitude Double The latitude of the geographic location of the asset. dblLongitude Double The longitude of the geographic location of the asset. strUnspcCode String This field can be used to store the United Nations Standard Products and Services Code of the asset. dblLastPrice Double Last Purchase Price Per Unit on Asset bolIsBillToFacility Boolean If set to true, indicates that invoices for assets (usually parts/supplies) should be sent to this facility. intAssetLocationID Integer An integer uniquely defining the location of asset. Refers to Asset with an asset category as Locations And Facilities bolIsOnline Boolean A boolean value representing if the related Asset is online or offline, 1 or 0 respectively. bolIsShippingOrReceivingFacility Boolean A boolean that identifies whether a facility ships or receives assets (usually parts/supplies). strQuotingTerms Boolean Quoting terms that are automatically added to RFQs where shipping is indicated for Asset type Facility. intAssetParentID Integer An integer that uniquely identifies the parent of Asset. intAccountID Integer An integer unitquely defining the Account. intChargeDepartmentID Integer An integer uniquely defining the Charge Department intSuperCategorySysCode Integer Asset Category SysCode for Region or a Site strBarcode Integer For equipment or tools, this field can be used to store the bar code's value of the asset. *Data example { strFullName : strFullName of Asset , strDescription : Asset_Desc_Name , strMake : Asset_Make_Name , strModel : Asset_Model_Name , qtyStockCount : 4 ... ... } Success Response Code : 200 success Resonse example { msg : Asset updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Get Single Asset By Id Get a single Asset by id if current asset was registered on it. URL : /api/assets/:assetid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the asset. Success Response: Code : 200 success Resonse example { msg : Asset found! , data : { _id : 5f6896897b9884253cf6bdb6 , strName : strName , strDescription : strDescription , strMake : strMake , strModel : strModel , qtyMinStockCount : 23, strCity : strCity , strShippingTerms : strShippingTerms , strAddress : strAddress , strNotes : , strProvince : , intCountryID : 45, strInventoryCode : , qtyStockCount : 11, intSiteID : 329, strRow : , strMASourceProduct : , strAisle : , strBinNumber : , intCategoryID : 32, strPostalCode : , strSerialNumber : , strCode : , dblLatitude : 0.114573, dblLongitude : 4.2587, strUnspcCode : , dblLastPrice : 4.5, bolIsBillToFacility : false, intAssetLocationID : 886, bolIsOnline : false, bolIsShippingOrReceivingFacility : false, strQuotingTerms : , intAssetParentID : null, intAccountID : null, intChargeDepartmentID : null, intSuperCategorySysCode : null, strBarcode : , __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If asset does not exist on server. Code : 404 Not Found Content example { msg : Asset not found , data :null } Delete Asset Delete the Asset by Id URL : /api/assets/:assetid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the asset. Success Response Code : 200 success Resonse example { msg : Asset deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Asset"},{"location":"Asset/index.html#create-asset","text":"This object is used to represent the assets that are to be managed by the CMMS : these can be equipments, locations and facilities, or tools Create an Asset if Asset does not already exist. URL : /api/assets Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description strName String Display name of the asset. strDescription String A short text describing the asset. strMake String For equipment or tools, this field can be used to store the brand's name of the asset. strMake String For equipment or tools, this field can be used to store the brand's name of the asset. strModel String For equipment or tools, this field can be used to store the model's name of the asset. qtyMinStockCount integer Mininum stock count for the asset. strCity String The city the asset is located into. strShippingTerms String This field can be used to add comments about the shipping terms of the asset. For example : \"Item is heavier than 20kg and must be delivered before 10AM.\" strAddress String Street number and street name of the address the asset is located at. strNotes String This field can be used to store additional details about the asset like the name of its supplier, a voltage range or dimensions for example. strProvince String Code or full name of the province the asset is located at. intCountryID integer The ID of the country the asset is located at. For example : 124 for Canada or 840 for United States of America. For getting all possible values, please refer to the Country section. strInventoryCode String This field can be used to store an inventory code for the asset. qtyStockCount Integer Indicates the current stock count for the asset. intSiteID Integer For multi-sites tenants, the ID of the site where the asset is located at. strRow String The row where the asset is located at in a facility. strMASourceProduct string A JSON formatted string giving details about an asset coming from MA Source. strAisle string The aisle where the asset is located at in a facility. strBinNumber string The number of the bin where the asset is stored. intCategoryID Integer The ID of the category the asset is directly attached to. strPostalCode string The postal code of the address the asset is located at. strSerialNumber string This field can be used to store the serial number of the asset. strCode string This field can be used to define a code associated with the asset. dblLatitude Double The latitude of the geographic location of the asset. dblLongitude Double The longitude of the geographic location of the asset. strUnspcCode String This field can be used to store the United Nations Standard Products and Services Code of the asset. dblLastPrice Double Last Purchase Price Per Unit on Asset bolIsBillToFacility Boolean If set to true, indicates that invoices for assets (usually parts/supplies) should be sent to this facility. intAssetLocationID Integer An integer uniquely defining the location of asset. Refers to Asset with an asset category as Locations And Facilities bolIsOnline Boolean A boolean value representing if the related Asset is online or offline, 1 or 0 respectively. bolIsShippingOrReceivingFacility Boolean A boolean that identifies whether a facility ships or receives assets (usually parts/supplies). strQuotingTerms Boolean Quoting terms that are automatically added to RFQs where shipping is indicated for Asset type Facility. intAssetParentID Integer An integer that uniquely identifies the parent of Asset. intAccountID Integer An integer unitquely defining the Account. intChargeDepartmentID Integer An integer uniquely defining the Charge Department intSuperCategorySysCode Integer Asset Category SysCode for Region or a Site strBarcode Integer For equipment or tools, this field can be used to store the bar code's value of the asset. Data example { strFullName : strFullName of Asset , strDescription : Asset_Desc_Name , strMake : Asset_Make_Name , strModel : Asset_Model_Name , qtyStockCount : 4 ... ... } Success Response: Code : 200 success Resonse example { msg : Asset added successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed }","title":"Create Asset"},{"location":"Asset/index.html#get-all-asset-list","text":"Get the all registered asset list. URL : /api/assets Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Asset list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , strName : strName , strDescription : strDescription , strMake : strMake , strModel : strModel , qtyMinStockCount : 23, strCity : strCity , strShippingTerms : strShippingTerms , strAddress : strAddress , strNotes : , strProvince : , intCountryID : 45, strInventoryCode : , qtyStockCount : 11, intSiteID : 329, strRow : , strMASourceProduct : , strAisle : , strBinNumber : , intCategoryID : 32, strPostalCode : , strSerialNumber : , strCode : , dblLatitude : 0.114573, dblLongitude : 4.2587, strUnspcCode : , dblLastPrice : 4.5, bolIsBillToFacility : false, intAssetLocationID : 886, bolIsOnline : false, bolIsShippingOrReceivingFacility : false, strQuotingTerms : , intAssetParentID : null, intAccountID : null, intChargeDepartmentID : null, intSuperCategorySysCode : null, strBarcode : , __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all asset list"},{"location":"Asset/index.html#update-asset","text":"Update the Asset by Id URL : /api/assets/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the asset. Param Type Description strName String Display name of the asset. strDescription String A short text describing the asset. strMake String For equipment or tools, this field can be used to store the brand's name of the asset. strMake String For equipment or tools, this field can be used to store the brand's name of the asset. strModel String For equipment or tools, this field can be used to store the model's name of the asset. qtyMinStockCount integer Mininum stock count for the asset. strCity String The city the asset is located into. strShippingTerms String This field can be used to add comments about the shipping terms of the asset. For example : \"Item is heavier than 20kg and must be delivered before 10AM.\" strAddress String Street number and street name of the address the asset is located at. strNotes String This field can be used to store additional details about the asset like the name of its supplier, a voltage range or dimensions for example. strProvince String Code or full name of the province the asset is located at. intCountryID integer The ID of the country the asset is located at. For example : 124 for Canada or 840 for United States of America. For getting all possible values, please refer to the Country section. strInventoryCode String This field can be used to store an inventory code for the asset. qtyStockCount Integer Indicates the current stock count for the asset. intSiteID Integer For multi-sites tenants, the ID of the site where the asset is located at. strRow String The row where the asset is located at in a facility. strMASourceProduct string A JSON formatted string giving details about an asset coming from MA Source. strAisle string The aisle where the asset is located at in a facility. strBinNumber string The number of the bin where the asset is stored. intCategoryID Integer The ID of the category the asset is directly attached to. strPostalCode string The postal code of the address the asset is located at. strSerialNumber string This field can be used to store the serial number of the asset. strCode string This field can be used to define a code associated with the asset. dblLatitude Double The latitude of the geographic location of the asset. dblLongitude Double The longitude of the geographic location of the asset. strUnspcCode String This field can be used to store the United Nations Standard Products and Services Code of the asset. dblLastPrice Double Last Purchase Price Per Unit on Asset bolIsBillToFacility Boolean If set to true, indicates that invoices for assets (usually parts/supplies) should be sent to this facility. intAssetLocationID Integer An integer uniquely defining the location of asset. Refers to Asset with an asset category as Locations And Facilities bolIsOnline Boolean A boolean value representing if the related Asset is online or offline, 1 or 0 respectively. bolIsShippingOrReceivingFacility Boolean A boolean that identifies whether a facility ships or receives assets (usually parts/supplies). strQuotingTerms Boolean Quoting terms that are automatically added to RFQs where shipping is indicated for Asset type Facility. intAssetParentID Integer An integer that uniquely identifies the parent of Asset. intAccountID Integer An integer unitquely defining the Account. intChargeDepartmentID Integer An integer uniquely defining the Charge Department intSuperCategorySysCode Integer Asset Category SysCode for Region or a Site strBarcode Integer For equipment or tools, this field can be used to store the bar code's value of the asset. *Data example { strFullName : strFullName of Asset , strDescription : Asset_Desc_Name , strMake : Asset_Make_Name , strModel : Asset_Model_Name , qtyStockCount : 4 ... ... } Success Response Code : 200 success Resonse example { msg : Asset updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update Asset"},{"location":"Asset/index.html#get-single-asset-by-id","text":"Get a single Asset by id if current asset was registered on it. URL : /api/assets/:assetid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the asset. Success Response: Code : 200 success Resonse example { msg : Asset found! , data : { _id : 5f6896897b9884253cf6bdb6 , strName : strName , strDescription : strDescription , strMake : strMake , strModel : strModel , qtyMinStockCount : 23, strCity : strCity , strShippingTerms : strShippingTerms , strAddress : strAddress , strNotes : , strProvince : , intCountryID : 45, strInventoryCode : , qtyStockCount : 11, intSiteID : 329, strRow : , strMASourceProduct : , strAisle : , strBinNumber : , intCategoryID : 32, strPostalCode : , strSerialNumber : , strCode : , dblLatitude : 0.114573, dblLongitude : 4.2587, strUnspcCode : , dblLastPrice : 4.5, bolIsBillToFacility : false, intAssetLocationID : 886, bolIsOnline : false, bolIsShippingOrReceivingFacility : false, strQuotingTerms : , intAssetParentID : null, intAccountID : null, intChargeDepartmentID : null, intSuperCategorySysCode : null, strBarcode : , __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If asset does not exist on server. Code : 404 Not Found Content example { msg : Asset not found , data :null }","title":"Get Single Asset By Id"},{"location":"Asset/index.html#delete-asset","text":"Delete the Asset by Id URL : /api/assets/:assetid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the asset. Success Response Code : 200 success Resonse example { msg : Asset deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete  Asset"},{"location":"AssetBusiness/index.html","text":"Create AssetBusiness An AssetBusiness represents the relationship between a particular Business within your CMMS and the associated Assets with this Business. It contains information about the Business Role Type, such as Customer/Client, Manufacturer, Owner, Service Provider, or Supplier Create an AssetBusiness if AssetBusiness does not already exist. URL : /api/assetbusiness Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intBusinessID Integer An integer that uniquely identifies the Business (used in conjunction with AssetID). intBusinessRoleTypeID Integer An integer that uniquely identifies the Business Role Type (used in conjunction with BusinessRoleType). intAssetID Integer An integer that uniquely identifies the Asset that is associated with the Business (used in conjunction with BusinessID). bolSendRFQs Boolean If set to true, indicates that RFQs should be sent when stock is low for for an asset (usually parts/supplies). bolPreferredVendor Boolean If set to true, indicates that the vendor is the Preferred Vendor for the associated asset (usually parts/supplies). qtyEconomicBatchQuantity Integer The minimum quantity when re-ordering an asset (usually parts/supplies). strBusinessAssetNumber String A string that represents an asset's part number from the business (usually parts/supplies). intBusinessGroupID Integer Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed } Read Get AssetBusiness list Get the all registered AssetBusiness list by Business Id . URL : /api/assetbusiness/:businessId Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the AssetBussiness. Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { bolPreferredVendor: false bolSendRFQs: false intAssetID: {_id: 137, strName: New Facility # 137 , intCategoryKind: 1, \u2026} intBusinessID: 9 intBusinessRoleTypeID: 5 strBusinessAssetNumber: ss strCategory: xx _id: 5 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update AssetBusiness Update the AssetBusiness by Id URL : /api/assetbusiness/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetbusiness. Param Type Description intBusinessID Integer An integer that uniquely identifies the Business (used in conjunction with AssetID). intBusinessRoleTypeID Integer An integer that uniquely identifies the Business Role Type (used in conjunction with BusinessRoleType). intAssetID Integer An integer that uniquely identifies the Asset that is associated with the Business (used in conjunction with BusinessID). bolSendRFQs Boolean If set to true, indicates that RFQs should be sent when stock is low for for an asset (usually parts/supplies). bolPreferredVendor Boolean If set to true, indicates that the vendor is the Preferred Vendor for the associated asset (usually parts/supplies). qtyEconomicBatchQuantity Integer The minimum quantity when re-ordering an asset (usually parts/supplies). strBusinessAssetNumber String A string that represents an asset's part number from the business (usually parts/supplies). intBusinessGroupID Integer Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed } Delete AssetBusiness Delete an AssetBusiness by Id URL : /api/assetbusiness/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the AssetBussiness. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"AssetBusiness"},{"location":"AssetBusiness/index.html#create-assetbusiness","text":"An AssetBusiness represents the relationship between a particular Business within your CMMS and the associated Assets with this Business. It contains information about the Business Role Type, such as Customer/Client, Manufacturer, Owner, Service Provider, or Supplier Create an AssetBusiness if AssetBusiness does not already exist. URL : /api/assetbusiness Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intBusinessID Integer An integer that uniquely identifies the Business (used in conjunction with AssetID). intBusinessRoleTypeID Integer An integer that uniquely identifies the Business Role Type (used in conjunction with BusinessRoleType). intAssetID Integer An integer that uniquely identifies the Asset that is associated with the Business (used in conjunction with BusinessID). bolSendRFQs Boolean If set to true, indicates that RFQs should be sent when stock is low for for an asset (usually parts/supplies). bolPreferredVendor Boolean If set to true, indicates that the vendor is the Preferred Vendor for the associated asset (usually parts/supplies). qtyEconomicBatchQuantity Integer The minimum quantity when re-ordering an asset (usually parts/supplies). strBusinessAssetNumber String A string that represents an asset's part number from the business (usually parts/supplies). intBusinessGroupID Integer Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed }","title":"Create AssetBusiness"},{"location":"AssetBusiness/index.html#read-get-assetbusiness-list","text":"Get the all registered AssetBusiness list by Business Id . URL : /api/assetbusiness/:businessId Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the AssetBussiness. Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { bolPreferredVendor: false bolSendRFQs: false intAssetID: {_id: 137, strName: New Facility # 137 , intCategoryKind: 1, \u2026} intBusinessID: 9 intBusinessRoleTypeID: 5 strBusinessAssetNumber: ss strCategory: xx _id: 5 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Read Get AssetBusiness list"},{"location":"AssetBusiness/index.html#update-assetbusiness","text":"Update the AssetBusiness by Id URL : /api/assetbusiness/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetbusiness. Param Type Description intBusinessID Integer An integer that uniquely identifies the Business (used in conjunction with AssetID). intBusinessRoleTypeID Integer An integer that uniquely identifies the Business Role Type (used in conjunction with BusinessRoleType). intAssetID Integer An integer that uniquely identifies the Asset that is associated with the Business (used in conjunction with BusinessID). bolSendRFQs Boolean If set to true, indicates that RFQs should be sent when stock is low for for an asset (usually parts/supplies). bolPreferredVendor Boolean If set to true, indicates that the vendor is the Preferred Vendor for the associated asset (usually parts/supplies). qtyEconomicBatchQuantity Integer The minimum quantity when re-ordering an asset (usually parts/supplies). strBusinessAssetNumber String A string that represents an asset's part number from the business (usually parts/supplies). intBusinessGroupID Integer Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Update AssetBusiness"},{"location":"AssetBusiness/index.html#delete-assetbusiness","text":"Delete an AssetBusiness by Id URL : /api/assetbusiness/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the AssetBussiness. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete AssetBusiness"},{"location":"AssetCategory/index.html","text":"Create AssetCategory This object is used for representing a category of assets. Main categories are equipment, tools and facilities but more categories can be created under those root categories. Create an AssetCategory if AssetCategory does not already exist. URL : /api/assetcategory Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intParentID Integer The ID of the parent category this category is directly attached to. strName String A display name for the category. intSysCode Integer System codes are used to define root categories with a significant meaning for the CMMS. There should be only one category with each system code for a given tenant. Possible values are : 0 for Assets, 1 for Locations And Facilities, 2 for Equipment, 3 for Tools, 4 for Parts And Supplies, 5 for Inventory Storage, 6 for Buildings, 7 for Plants, 10 for Regions and 11 for Rotating Spares. bolOverrideRules Boolean If set to true, indicates that the associated asset category overrides the rules set. bolOverrideRules Boolean If set to true, indicates that the associated asset category overrides the rules set. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strName is required } { msg : Create failed } Get all AssetCategory list Get the all registered AssetCategory list. URL : /api/assetcategory Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 5f6a6f90d9741d152c754178 , intParentID : 11, strName : String , intSysCode : 3, bolOverrideRules :true __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Get Single AssetCategory By Id Get a single AssetCategory by id if current AssetCategory was registered on it. URL : /api/assetcategory/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetcategory. Success Response Code : 200 success Resonse example { msg : Found! , data : { _id : 5f6896897b9884253cf6bdb6 , intParentID : Integer , strName : String , intSysCode :3, bolOverrideRules :true } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If AssetCategory does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null } Update AssetCategory Update the AssetCategory by Id URL : /api/assetcategory/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the AssetCategory. Param Type Description intParentID Integer The ID of the parent category this category is directly attached to. strName String A display name for the category. intSysCode Integer System codes are used to define root categories with a significant meaning for the CMMS. There should be only one category with each system code for a given tenant. Possible values are : 0 for Assets, 1 for Locations And Facilities, 2 for Equipment, 3 for Tools, 4 for Parts And Supplies, 5 for Inventory Storage, 6 for Buildings, 7 for Plants, 10 for Regions and 11 for Rotating Spares. bolOverrideRules Boolean If set to true, indicates that the associated asset category overrides the rules set. bolOverrideRules Boolean If set to true, indicates that the associated asset category overrides the rules set. Success Response Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed } Delete AssetCategory Delete a AssetCategory by Id URL : /api/assetcategory/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetcategory. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"AssetCategory"},{"location":"AssetCategory/index.html#create-assetcategory","text":"This object is used for representing a category of assets. Main categories are equipment, tools and facilities but more categories can be created under those root categories. Create an AssetCategory if AssetCategory does not already exist. URL : /api/assetcategory Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intParentID Integer The ID of the parent category this category is directly attached to. strName String A display name for the category. intSysCode Integer System codes are used to define root categories with a significant meaning for the CMMS. There should be only one category with each system code for a given tenant. Possible values are : 0 for Assets, 1 for Locations And Facilities, 2 for Equipment, 3 for Tools, 4 for Parts And Supplies, 5 for Inventory Storage, 6 for Buildings, 7 for Plants, 10 for Regions and 11 for Rotating Spares. bolOverrideRules Boolean If set to true, indicates that the associated asset category overrides the rules set. bolOverrideRules Boolean If set to true, indicates that the associated asset category overrides the rules set. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strName is required } { msg : Create failed }","title":"Create AssetCategory"},{"location":"AssetCategory/index.html#get-all-assetcategory-list","text":"Get the all registered AssetCategory list. URL : /api/assetcategory Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 5f6a6f90d9741d152c754178 , intParentID : 11, strName : String , intSysCode : 3, bolOverrideRules :true __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all AssetCategory list"},{"location":"AssetCategory/index.html#get-single-assetcategory-by-id","text":"Get a single AssetCategory by id if current AssetCategory was registered on it. URL : /api/assetcategory/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetcategory. Success Response Code : 200 success Resonse example { msg : Found! , data : { _id : 5f6896897b9884253cf6bdb6 , intParentID : Integer , strName : String , intSysCode :3, bolOverrideRules :true } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If AssetCategory does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Get Single AssetCategory By Id"},{"location":"AssetCategory/index.html#update-assetcategory","text":"Update the AssetCategory by Id URL : /api/assetcategory/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the AssetCategory. Param Type Description intParentID Integer The ID of the parent category this category is directly attached to. strName String A display name for the category. intSysCode Integer System codes are used to define root categories with a significant meaning for the CMMS. There should be only one category with each system code for a given tenant. Possible values are : 0 for Assets, 1 for Locations And Facilities, 2 for Equipment, 3 for Tools, 4 for Parts And Supplies, 5 for Inventory Storage, 6 for Buildings, 7 for Plants, 10 for Regions and 11 for Rotating Spares. bolOverrideRules Boolean If set to true, indicates that the associated asset category overrides the rules set. bolOverrideRules Boolean If set to true, indicates that the associated asset category overrides the rules set. Success Response Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Update AssetCategory"},{"location":"AssetCategory/index.html#delete-assetcategory","text":"Delete a AssetCategory by Id URL : /api/assetcategory/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetcategory. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete AssetCategory"},{"location":"AssetConsumingReference/index.html","text":"Create AssetConsumingReference An AssetConsumingReference represents the relationship between a particular Bill Of Materials (BOM) Group within your CMMS and the associated Asset(s) with this CMMS. It contains information about the associated BOM (Control and Part). One example scenario: Bill Of Materials (BOM) Group is setup under Supplies. Once setup, an Asset can use this BOM by tieing one or more Assets to the BOM. This will setup an Asset to consume or take in your BOM and Parts. Alternatively, an Asset can be created first and then assigned a BOM Group (under Parts/BOM). See the Asset object for more details and information. You can have multiple AssetConsumingReference associated in your CMMS. Create an AssetConsumingReference if AssetConsumingReference does not already exist. URL : /api/assetconsumingreference Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intConsumesAssetID Integer An integer that uniquely identifies the associated Asset. intBOMControlID Integer An integer that uniquely identifies the associated BOMControl. intAssetID Integer The ID of the asset. For getting possible values, please refer to the Asset section. intBOMPartControlID Integer An integer that uniquely identifies the associated BOMPart. qtyMaxConsumption Integer intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Data example { intConsumesAssetID : 3, intBOMControlID : 5, intAssetID : 2, intBOMPartControlID : 4, ... ... } Success Response: Code : 200 success Resonse example { msg : AssetConsumingReference added successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed } Get all AssetConsumingReference list Get the all registered AssetConsumingReference list. URL : /api/assetconsumingreference Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : AssetConsumingReference list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intConsumesAssetID : 3, intBOMControlID : 5, intAssetID : 2, intBOMPartControlID : 4, qtyMaxConsumption : 3, intUpdated : 231, __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update AssetConsumingReference Update the AssetConsumingReference by Id URL : /api/assetconsumingreference/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetconsumingreference. Param Type Description intConsumesAssetID Integer An integer that uniquely identifies the associated Asset. intBOMControlID Integer An integer that uniquely identifies the associated BOMControl. intAssetID Integer The ID of the asset. For getting possible values, please refer to the Asset section. intBOMPartControlID Integer An integer that uniquely identifies the associated BOMPart. qtyMaxConsumption Integer intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Data example { intConsumesAssetID : 3, intBOMControlID : 5, intAssetID : 2, intBOMPartControlID : 4, ... ... } Success Response Code : 200 success Resonse example { msg : AssetConsumingReference updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Get Single AssetConsumingReference By Id Get a single AssetConsumingReference by id if current assetconsumingreference was registered on it. URL : /api/assetconsumingreference/:assetconsumingreferenceid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetconsumingreference. Success Response: Code : 200 success Resonse example { msg : AssetConsumingReference found! , data : { _id : 5f6896897b9884253cf6bdb6 , intConsumesAssetID : 3, intBOMControlID : 5, intAssetID : 2, intBOMPartControlID : 4, qtyMaxConsumption : 3, intUpdated : 231, __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If assetconsumingreference does not exist on server. Code : 404 Not Found Content example { msg : AssetConsumingReference not found , data :null } Delete AssetConsumingReference Delete the AssetConsumingReference by Id URL : /api/assetconsumingreference/:assetconsumingreferenceid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetconsumingreference. Success Response Code : 200 success Resonse example { msg : AssetConsumingReference deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no assetconsumingreference available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"AssetConsumingReference"},{"location":"AssetConsumingReference/index.html#create-assetconsumingreference","text":"An AssetConsumingReference represents the relationship between a particular Bill Of Materials (BOM) Group within your CMMS and the associated Asset(s) with this CMMS. It contains information about the associated BOM (Control and Part). One example scenario: Bill Of Materials (BOM) Group is setup under Supplies. Once setup, an Asset can use this BOM by tieing one or more Assets to the BOM. This will setup an Asset to consume or take in your BOM and Parts. Alternatively, an Asset can be created first and then assigned a BOM Group (under Parts/BOM). See the Asset object for more details and information. You can have multiple AssetConsumingReference associated in your CMMS. Create an AssetConsumingReference if AssetConsumingReference does not already exist. URL : /api/assetconsumingreference Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intConsumesAssetID Integer An integer that uniquely identifies the associated Asset. intBOMControlID Integer An integer that uniquely identifies the associated BOMControl. intAssetID Integer The ID of the asset. For getting possible values, please refer to the Asset section. intBOMPartControlID Integer An integer that uniquely identifies the associated BOMPart. qtyMaxConsumption Integer intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Data example { intConsumesAssetID : 3, intBOMControlID : 5, intAssetID : 2, intBOMPartControlID : 4, ... ... } Success Response: Code : 200 success Resonse example { msg : AssetConsumingReference added successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed }","title":"Create AssetConsumingReference"},{"location":"AssetConsumingReference/index.html#get-all-assetconsumingreference-list","text":"Get the all registered AssetConsumingReference list. URL : /api/assetconsumingreference Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : AssetConsumingReference list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intConsumesAssetID : 3, intBOMControlID : 5, intAssetID : 2, intBOMPartControlID : 4, qtyMaxConsumption : 3, intUpdated : 231, __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all AssetConsumingReference list"},{"location":"AssetConsumingReference/index.html#update-assetconsumingreference","text":"Update the AssetConsumingReference by Id URL : /api/assetconsumingreference/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetconsumingreference. Param Type Description intConsumesAssetID Integer An integer that uniquely identifies the associated Asset. intBOMControlID Integer An integer that uniquely identifies the associated BOMControl. intAssetID Integer The ID of the asset. For getting possible values, please refer to the Asset section. intBOMPartControlID Integer An integer that uniquely identifies the associated BOMPart. qtyMaxConsumption Integer intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Data example { intConsumesAssetID : 3, intBOMControlID : 5, intAssetID : 2, intBOMPartControlID : 4, ... ... } Success Response Code : 200 success Resonse example { msg : AssetConsumingReference updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update AssetConsumingReference"},{"location":"AssetConsumingReference/index.html#get-single-assetconsumingreference-by-id","text":"Get a single AssetConsumingReference by id if current assetconsumingreference was registered on it. URL : /api/assetconsumingreference/:assetconsumingreferenceid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetconsumingreference. Success Response: Code : 200 success Resonse example { msg : AssetConsumingReference found! , data : { _id : 5f6896897b9884253cf6bdb6 , intConsumesAssetID : 3, intBOMControlID : 5, intAssetID : 2, intBOMPartControlID : 4, qtyMaxConsumption : 3, intUpdated : 231, __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If assetconsumingreference does not exist on server. Code : 404 Not Found Content example { msg : AssetConsumingReference not found , data :null }","title":"Get Single AssetConsumingReference By Id"},{"location":"AssetConsumingReference/index.html#delete-assetconsumingreference","text":"Delete the AssetConsumingReference by Id URL : /api/assetconsumingreference/:assetconsumingreferenceid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetconsumingreference. Success Response Code : 200 success Resonse example { msg : AssetConsumingReference deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no assetconsumingreference available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete  AssetConsumingReference"},{"location":"AssetEvent/index.html","text":"Create AssetEvent This object represents an event that has occurred on an asset. The type of events that can occur are stored in the AssetEventType object and are defined by each tenant. Create an AssetEvent if AssetEvent does not already exist. URL : /api/assetevent Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Required Type Description dtmDateSubmitted Yes timestamp The date and time when the event was submitted (UNIX epoch milliseconds). intAssetEventTypeID Yes Integer An integer that represents the id of an AssetEventType. intAssetID Yes Integer An integer that represents the id of an Asset. intSubmittedByUserID Integer An integer that represents the id of a User who submitted the event. intWorkOrderID Integer An integer that represents the id of a WorkOrder, if this event originated from a Work Order. This can be null. strAdditionalDescription String A string that represents description of the event. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : dtmDateSubmitted is required } { msg : Create failed } Get all AssetEvent list Get the all registered AssetEvent list by AssetId. URL : /api/assetevent/:assetId Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the asset. Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 5 , dtmDateSubmitted : 2020-10-30T20:26:49.518+00:00, intAssetEventTypeID : 4, intAssetID : 3, intSubmittedByUserID :5, intWorkOrderID :6, strAdditionalDescription : String __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update AssetEvent Update the AssetEvent by Id URL : /api/assetevent/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the AssetEvent. Param Required Type Description dtmDateSubmitted Yes timestamp The date and time when the event was submitted (UNIX epoch milliseconds). intAssetEventTypeID Yes Integer An integer that represents the id of an AssetEventType. intAssetID Yes Integer An integer that represents the id of an Asset. intSubmittedByUserID Integer An integer that represents the id of a User who submitted the event. intWorkOrderID Integer An integer that represents the id of a WorkOrder, if this event originated from a Work Order. This can be null. strAdditionalDescription String A string that represents description of the event. Success Response Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed } Delete AssetEvent Delete a AssetEvent by Id URL : /api/assetevent/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetevent. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"AssetEvent"},{"location":"AssetEvent/index.html#create-assetevent","text":"This object represents an event that has occurred on an asset. The type of events that can occur are stored in the AssetEventType object and are defined by each tenant. Create an AssetEvent if AssetEvent does not already exist. URL : /api/assetevent Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Required Type Description dtmDateSubmitted Yes timestamp The date and time when the event was submitted (UNIX epoch milliseconds). intAssetEventTypeID Yes Integer An integer that represents the id of an AssetEventType. intAssetID Yes Integer An integer that represents the id of an Asset. intSubmittedByUserID Integer An integer that represents the id of a User who submitted the event. intWorkOrderID Integer An integer that represents the id of a WorkOrder, if this event originated from a Work Order. This can be null. strAdditionalDescription String A string that represents description of the event. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : dtmDateSubmitted is required } { msg : Create failed }","title":"Create AssetEvent"},{"location":"AssetEvent/index.html#get-all-assetevent-list","text":"Get the all registered AssetEvent list by AssetId. URL : /api/assetevent/:assetId Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the asset. Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 5 , dtmDateSubmitted : 2020-10-30T20:26:49.518+00:00, intAssetEventTypeID : 4, intAssetID : 3, intSubmittedByUserID :5, intWorkOrderID :6, strAdditionalDescription : String __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all AssetEvent list"},{"location":"AssetEvent/index.html#update-assetevent","text":"Update the AssetEvent by Id URL : /api/assetevent/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the AssetEvent. Param Required Type Description dtmDateSubmitted Yes timestamp The date and time when the event was submitted (UNIX epoch milliseconds). intAssetEventTypeID Yes Integer An integer that represents the id of an AssetEventType. intAssetID Yes Integer An integer that represents the id of an Asset. intSubmittedByUserID Integer An integer that represents the id of a User who submitted the event. intWorkOrderID Integer An integer that represents the id of a WorkOrder, if this event originated from a Work Order. This can be null. strAdditionalDescription String A string that represents description of the event. Success Response Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Update AssetEvent"},{"location":"AssetEvent/index.html#delete-assetevent","text":"Delete a AssetEvent by Id URL : /api/assetevent/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetevent. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete AssetEvent"},{"location":"AssetEventType/index.html","text":"Create AssetEventType This object is used to represent the different types of events that can occur to an asset. The event types are defined by each tenant. Create an AssetEventType if AssetEventType does not already exist. URL : /api/asseteventtype Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description strEventCode String A string that represents an event code. strEventDescription String A string that represents an event description. strEventName String A string that represents an event name. Success Response Code : 200 success Resonse example { msg : Created successfully! , data : {id: 57 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed } Get all AssetEventType list Get the all registered AssetEventType list. URL : /api/asseteventtype Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example: { msg : Found! , data : [ { id : 47, strEventCode : AssetEventType_Code_Name , strEventDescription : AssetEventType_Desc_Name __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Get Single AssetEventType By Id Get a single AssetEventType by id if current AssetEventType was registered on it. URL : /api/asseteventtype/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the AssetEventType. Success Response Code : 200 success Resonse example { msg : Workorder found! , data : { id : 47, strEventCode : AssetEventType_Code_Name , strEventDescription : AssetEventType_Desc_Name } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If AssetEventType does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null } Update AssetEventType Update the AssetEventType by Id URL : /api/asseteventtype/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorder. Param Type Description strEventCode String A string that represents an event code. strEventDescription String A string that represents an event description. strEventName String A string that represents an event name. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed } Delete AssetEventType Delete a AssetEventType by Id URL : /api/asseteventtype/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the AssetEventType. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"AssetEventType"},{"location":"AssetEventType/index.html#create-asseteventtype","text":"This object is used to represent the different types of events that can occur to an asset. The event types are defined by each tenant. Create an AssetEventType if AssetEventType does not already exist. URL : /api/asseteventtype Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description strEventCode String A string that represents an event code. strEventDescription String A string that represents an event description. strEventName String A string that represents an event name. Success Response Code : 200 success Resonse example { msg : Created successfully! , data : {id: 57 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed }","title":"Create AssetEventType"},{"location":"AssetEventType/index.html#get-all-asseteventtype-list","text":"Get the all registered AssetEventType list. URL : /api/asseteventtype Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example: { msg : Found! , data : [ { id : 47, strEventCode : AssetEventType_Code_Name , strEventDescription : AssetEventType_Desc_Name __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all AssetEventType list"},{"location":"AssetEventType/index.html#get-single-asseteventtype-by-id","text":"Get a single AssetEventType by id if current AssetEventType was registered on it. URL : /api/asseteventtype/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the AssetEventType. Success Response Code : 200 success Resonse example { msg : Workorder found! , data : { id : 47, strEventCode : AssetEventType_Code_Name , strEventDescription : AssetEventType_Desc_Name } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If AssetEventType does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Get Single AssetEventType By Id"},{"location":"AssetEventType/index.html#update-asseteventtype","text":"Update the AssetEventType by Id URL : /api/asseteventtype/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorder. Param Type Description strEventCode String A string that represents an event code. strEventDescription String A string that represents an event description. strEventName String A string that represents an event name. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Update AssetEventType"},{"location":"AssetEventType/index.html#delete-asseteventtype","text":"Delete a AssetEventType by Id URL : /api/asseteventtype/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the AssetEventType. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete AssetEventType"},{"location":"AssetOfflineTracker/index.html","text":"Create AssetOffineTracker An AssetOfflineTracker represents the state of an Asset, if the Asset is set to offline. One example scenario: The User sets an Asset to online or offline. By doing so, the state is changed and persisted through this AssetOfflineTracker object. It contains information about the Date when switched to offline and a Reason as to why the state was changed to offline. Note: If an Asset is set to offline, any referenced made to the Asset (example: Bill Of Materials (BOM) Group, WorkOrder, ScheduledMaintenance) will still continue to work. Create an AssetOfflineTracker if AssetOfflineTracker does not already exist. URL : /api/assetofflinetracker Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intReasonOnlineID Integer An integer that uniquely identifies the associated ReasonOnline (used in conjunction with ReasonToSetAssetOnline). strOnlineAdditionalInfo String A string that identifies more additional information associated with the AssetOfflineTracker in online state. dtmOffLineTo Timestamp A datetime stamp that identifies when the Asset will end its offline state. intAssetID Integer The ID of the asset. For getting possible values, please refer to the Asset section. dblProductionHoursAffected Double An integer that identifies the number of hours the Asset was affected during offline state. dtmOfflineFrom Timestamp A datetime stamp that identifies when the Asset will begin its offline state. intReasonOfflineID Integer An integer that uniquely identifies the associated ReasonOffline (used in conjunction with ReasonToSetAssetOffline). intSetOnlineByUserID Integer An integer that uniquely identifies the User that switched the Asset to online state. strOfflineAdditionalInfo String A string that identifies more additional information associated with the AssetOfflineTracker in offline state. intSetOfflineByUserID Integer An integer that uniquely identifies the User that switched the Asset to offline state. intWorkOrderID Integer The id of the WorkOrder Data example { intReasonOnlineID : 3, strOnlineAdditionalInfo : Online_Additional_Info , dtmOffLineTo : 2020-10-30T20:26:49.518+00:00, intAssetID : 5, dblProductionHoursAffected : 4.432 ... ... } Success Response: Code : 200 success Resonse example { msg : AssetOffineTracker added successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed } Get all AssetOffineTracker list Get the all registered AssetOffineTracker list. URL : /api/assetofflinetracker Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : AssetOffineTracker list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intReasonOnlineID : 4, strOnlineAdditionalInfo : strOnlineAdditionalInfo , dtmOffLineTo : 2020-10-30T20:26:49.518+00:00, intAssetID : 3, dblProductionHoursAffected : 2.3, dtmOfflineFrom : 2020-10-30T20:16:49.518+00:00, intReasonOfflineID : 1, intSetOnlineByUserID : 2, strOfflineAdditionalInfo : strOfflineAdditionalInfo , intSetOfflineByUserID : 3, intWorkOrderID : 45, __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update AssetOffineTracker Update the AssetOffineTracker by Id URL : /api/assetofflinetracker/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetofflinetracker. Param Type Description intReasonOnlineID Integer An integer that uniquely identifies the associated ReasonOnline (used in conjunction with ReasonToSetAssetOnline). strOnlineAdditionalInfo String A string that identifies more additional information associated with the AssetOfflineTracker in online state. dtmOffLineTo Timestamp A datetime stamp that identifies when the Asset will end its offline state. intAssetID Integer The ID of the asset. For getting possible values, please refer to the Asset section. dblProductionHoursAffected Double An integer that identifies the number of hours the Asset was affected during offline state. dtmOfflineFrom Timestamp A datetime stamp that identifies when the Asset will begin its offline state. intReasonOfflineID Integer An integer that uniquely identifies the associated ReasonOffline (used in conjunction with ReasonToSetAssetOffline). intSetOnlineByUserID Integer An integer that uniquely identifies the User that switched the Asset to online state. strOfflineAdditionalInfo String A string that identifies more additional information associated with the AssetOfflineTracker in offline state. intSetOfflineByUserID Integer An integer that uniquely identifies the User that switched the Asset to offline state. intWorkOrderID Integer The id of the WorkOrder *Data example { intReasonOnlineID : 3, strOnlineAdditionalInfo : Online_Additional_Info , dtmOffLineTo : 2020-10-30T20:26:49.518+00:00, intAssetID : 5, dblProductionHoursAffected : 4.432 ... ... } Success Response Code : 200 success Resonse example { msg : AssetOffineTracker updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Get Single AssetOffineTracker By Id Get a single AssetOffineTracker by id if current assetofflinetracker was registered on it. URL : /api/assetofflinetracker/:assetofflinetrackerid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetofflinetracker. Success Response: Code : 200 success Resonse example { msg : AssetOffineTracker found! , data : { _id : 5f6896897b9884253cf6bdb6 , intReasonOnlineID : 4, strOnlineAdditionalInfo : strOnlineAdditionalInfo , dtmOffLineTo : 2020-10-30T20:26:49.518+00:00, intAssetID : 3, dblProductionHoursAffected : 2.3, dtmOfflineFrom : 2020-10-30T20:16:49.518+00:00, intReasonOfflineID : 1, intSetOnlineByUserID : 2, strOfflineAdditionalInfo : strOfflineAdditionalInfo , intSetOfflineByUserID : 3, intWorkOrderID : 45, __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If assetofflinetracker does not exist on server. Code : 404 Not Found Content example { msg : AssetOffineTracker not found , data :null } Delete AssetOffineTracker Delete the AssetOffineTracker by Id URL : /api/assetofflinetracker/:assetofflinetrackerid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetofflinetracker. Success Response Code : 200 success Resonse example { msg : AssetOffineTracker deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no assetofflinetracker available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"AssetOfflineTracker"},{"location":"AssetOfflineTracker/index.html#create-assetoffinetracker","text":"An AssetOfflineTracker represents the state of an Asset, if the Asset is set to offline. One example scenario: The User sets an Asset to online or offline. By doing so, the state is changed and persisted through this AssetOfflineTracker object. It contains information about the Date when switched to offline and a Reason as to why the state was changed to offline. Note: If an Asset is set to offline, any referenced made to the Asset (example: Bill Of Materials (BOM) Group, WorkOrder, ScheduledMaintenance) will still continue to work. Create an AssetOfflineTracker if AssetOfflineTracker does not already exist. URL : /api/assetofflinetracker Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intReasonOnlineID Integer An integer that uniquely identifies the associated ReasonOnline (used in conjunction with ReasonToSetAssetOnline). strOnlineAdditionalInfo String A string that identifies more additional information associated with the AssetOfflineTracker in online state. dtmOffLineTo Timestamp A datetime stamp that identifies when the Asset will end its offline state. intAssetID Integer The ID of the asset. For getting possible values, please refer to the Asset section. dblProductionHoursAffected Double An integer that identifies the number of hours the Asset was affected during offline state. dtmOfflineFrom Timestamp A datetime stamp that identifies when the Asset will begin its offline state. intReasonOfflineID Integer An integer that uniquely identifies the associated ReasonOffline (used in conjunction with ReasonToSetAssetOffline). intSetOnlineByUserID Integer An integer that uniquely identifies the User that switched the Asset to online state. strOfflineAdditionalInfo String A string that identifies more additional information associated with the AssetOfflineTracker in offline state. intSetOfflineByUserID Integer An integer that uniquely identifies the User that switched the Asset to offline state. intWorkOrderID Integer The id of the WorkOrder Data example { intReasonOnlineID : 3, strOnlineAdditionalInfo : Online_Additional_Info , dtmOffLineTo : 2020-10-30T20:26:49.518+00:00, intAssetID : 5, dblProductionHoursAffected : 4.432 ... ... } Success Response: Code : 200 success Resonse example { msg : AssetOffineTracker added successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed }","title":"Create AssetOffineTracker"},{"location":"AssetOfflineTracker/index.html#get-all-assetoffinetracker-list","text":"Get the all registered AssetOffineTracker list. URL : /api/assetofflinetracker Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : AssetOffineTracker list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intReasonOnlineID : 4, strOnlineAdditionalInfo : strOnlineAdditionalInfo , dtmOffLineTo : 2020-10-30T20:26:49.518+00:00, intAssetID : 3, dblProductionHoursAffected : 2.3, dtmOfflineFrom : 2020-10-30T20:16:49.518+00:00, intReasonOfflineID : 1, intSetOnlineByUserID : 2, strOfflineAdditionalInfo : strOfflineAdditionalInfo , intSetOfflineByUserID : 3, intWorkOrderID : 45, __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all AssetOffineTracker list"},{"location":"AssetOfflineTracker/index.html#update-assetoffinetracker","text":"Update the AssetOffineTracker by Id URL : /api/assetofflinetracker/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetofflinetracker. Param Type Description intReasonOnlineID Integer An integer that uniquely identifies the associated ReasonOnline (used in conjunction with ReasonToSetAssetOnline). strOnlineAdditionalInfo String A string that identifies more additional information associated with the AssetOfflineTracker in online state. dtmOffLineTo Timestamp A datetime stamp that identifies when the Asset will end its offline state. intAssetID Integer The ID of the asset. For getting possible values, please refer to the Asset section. dblProductionHoursAffected Double An integer that identifies the number of hours the Asset was affected during offline state. dtmOfflineFrom Timestamp A datetime stamp that identifies when the Asset will begin its offline state. intReasonOfflineID Integer An integer that uniquely identifies the associated ReasonOffline (used in conjunction with ReasonToSetAssetOffline). intSetOnlineByUserID Integer An integer that uniquely identifies the User that switched the Asset to online state. strOfflineAdditionalInfo String A string that identifies more additional information associated with the AssetOfflineTracker in offline state. intSetOfflineByUserID Integer An integer that uniquely identifies the User that switched the Asset to offline state. intWorkOrderID Integer The id of the WorkOrder *Data example { intReasonOnlineID : 3, strOnlineAdditionalInfo : Online_Additional_Info , dtmOffLineTo : 2020-10-30T20:26:49.518+00:00, intAssetID : 5, dblProductionHoursAffected : 4.432 ... ... } Success Response Code : 200 success Resonse example { msg : AssetOffineTracker updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update AssetOffineTracker"},{"location":"AssetOfflineTracker/index.html#get-single-assetoffinetracker-by-id","text":"Get a single AssetOffineTracker by id if current assetofflinetracker was registered on it. URL : /api/assetofflinetracker/:assetofflinetrackerid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetofflinetracker. Success Response: Code : 200 success Resonse example { msg : AssetOffineTracker found! , data : { _id : 5f6896897b9884253cf6bdb6 , intReasonOnlineID : 4, strOnlineAdditionalInfo : strOnlineAdditionalInfo , dtmOffLineTo : 2020-10-30T20:26:49.518+00:00, intAssetID : 3, dblProductionHoursAffected : 2.3, dtmOfflineFrom : 2020-10-30T20:16:49.518+00:00, intReasonOfflineID : 1, intSetOnlineByUserID : 2, strOfflineAdditionalInfo : strOfflineAdditionalInfo , intSetOfflineByUserID : 3, intWorkOrderID : 45, __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If assetofflinetracker does not exist on server. Code : 404 Not Found Content example { msg : AssetOffineTracker not found , data :null }","title":"Get Single AssetOffineTracker By Id"},{"location":"AssetOfflineTracker/index.html#delete-assetoffinetracker","text":"Delete the AssetOffineTracker by Id URL : /api/assetofflinetracker/:assetofflinetrackerid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetofflinetracker. Success Response Code : 200 success Resonse example { msg : AssetOffineTracker deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no assetofflinetracker available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete  AssetOffineTracker"},{"location":"AssetUser/index.html","text":"Create AssetUser An AssetUser represents the relationship between a particular User within your CMMS and the associated Assets with this User. It contains information about the Date Added, and the Asset User Type, such as Manager, Technician, Operator, and Consumer. See the Asset object for more details and the User object for more information. You can have multiple Assets associated with one User. You can have multiple AssetUsers associated in your CMMS. Create an AssetUser if AssetUser does not already exist. URL : /api/assetuser Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intAssetUserTypeID Integer An integer that uniquely identifies the AssetUserType (used in conjunction with AssetUserType). dtmDateAdded Timestamp The date time stamp for when the Asset was added in the CMMS by the User. intUserID Integer An integer that uniquely identifies the User. intAssetID Integer The ID of the asset. For getting possible values, please refer to the Asset section. Data example { intAssetUserTypeID : 3, dtmDateAdded : 2020-10-30T20:26:49.518+00:00, intUserID : 5, intAssetID : 4 } Success Response: Code : 200 success Resonse example { msg : AssetUser added successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed } Get all AssetUser list Get the all registered AssetUser list. URL : /api/assetuser Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : AssetUser list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intAssetUserTypeID : 3, dtmDateAdded : 2020-10-30T20:26:49.518+00:00, intUserID : 5, intAssetID : 4 __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update AssetUser Update the AssetUser by Id URL : /api/assetuser/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetuser. Param Type Description intAssetUserTypeID Integer An integer that uniquely identifies the AssetUserType (used in conjunction with AssetUserType). dtmDateAdded Timestamp The date time stamp for when the Asset was added in the CMMS by the User. intUserID Integer An integer that uniquely identifies the User. intAssetID Integer The ID of the asset. For getting possible values, please refer to the Asset section. *Data example { intAssetUserTypeID : 3, dtmDateAdded : 2020-10-30T20:26:49.518+00:00, intUserID : 5, intAssetID : 4 } Success Response Code : 200 success Resonse example { msg : AssetUser updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Get Single AssetUser By Id Get a single AssetUser by id if current assetuser was registered on it. URL : /api/assetuser/:assetuserid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetuser. Success Response: Code : 200 success Resonse example { msg : AssetUser found! , data : { _id : 5f6896897b9884253cf6bdb6 , intAssetUserTypeID : 3, dtmDateAdded : 2020-10-30T20:26:49.518+00:00, intUserID : 5, intAssetID : 4 __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If assetuser does not exist on server. Code : 404 Not Found Content example { msg : AssetUser not found , data :null } Delete AssetUser Delete the AssetUser by Id URL : /api/assetuser/:assetuserid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetuser. Success Response Code : 200 success Resonse example { msg : AssetUser deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no assetuser available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"AssetUser"},{"location":"AssetUser/index.html#create-assetuser","text":"An AssetUser represents the relationship between a particular User within your CMMS and the associated Assets with this User. It contains information about the Date Added, and the Asset User Type, such as Manager, Technician, Operator, and Consumer. See the Asset object for more details and the User object for more information. You can have multiple Assets associated with one User. You can have multiple AssetUsers associated in your CMMS. Create an AssetUser if AssetUser does not already exist. URL : /api/assetuser Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intAssetUserTypeID Integer An integer that uniquely identifies the AssetUserType (used in conjunction with AssetUserType). dtmDateAdded Timestamp The date time stamp for when the Asset was added in the CMMS by the User. intUserID Integer An integer that uniquely identifies the User. intAssetID Integer The ID of the asset. For getting possible values, please refer to the Asset section. Data example { intAssetUserTypeID : 3, dtmDateAdded : 2020-10-30T20:26:49.518+00:00, intUserID : 5, intAssetID : 4 } Success Response: Code : 200 success Resonse example { msg : AssetUser added successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed }","title":"Create AssetUser"},{"location":"AssetUser/index.html#get-all-assetuser-list","text":"Get the all registered AssetUser list. URL : /api/assetuser Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : AssetUser list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intAssetUserTypeID : 3, dtmDateAdded : 2020-10-30T20:26:49.518+00:00, intUserID : 5, intAssetID : 4 __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all AssetUser list"},{"location":"AssetUser/index.html#update-assetuser","text":"Update the AssetUser by Id URL : /api/assetuser/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetuser. Param Type Description intAssetUserTypeID Integer An integer that uniquely identifies the AssetUserType (used in conjunction with AssetUserType). dtmDateAdded Timestamp The date time stamp for when the Asset was added in the CMMS by the User. intUserID Integer An integer that uniquely identifies the User. intAssetID Integer The ID of the asset. For getting possible values, please refer to the Asset section. *Data example { intAssetUserTypeID : 3, dtmDateAdded : 2020-10-30T20:26:49.518+00:00, intUserID : 5, intAssetID : 4 } Success Response Code : 200 success Resonse example { msg : AssetUser updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update AssetUser"},{"location":"AssetUser/index.html#get-single-assetuser-by-id","text":"Get a single AssetUser by id if current assetuser was registered on it. URL : /api/assetuser/:assetuserid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetuser. Success Response: Code : 200 success Resonse example { msg : AssetUser found! , data : { _id : 5f6896897b9884253cf6bdb6 , intAssetUserTypeID : 3, dtmDateAdded : 2020-10-30T20:26:49.518+00:00, intUserID : 5, intAssetID : 4 __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If assetuser does not exist on server. Code : 404 Not Found Content example { msg : AssetUser not found , data :null }","title":"Get Single AssetUser By Id"},{"location":"AssetUser/index.html#delete-assetuser","text":"Delete the AssetUser by Id URL : /api/assetuser/:assetuserid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetuser. Success Response Code : 200 success Resonse example { msg : AssetUser deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no assetuser available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete  AssetUser"},{"location":"BillingTerm/index.html","text":"BillingTerm This object is used to representing billing terms. The billing terms are defined by each tenant. Create an BillingTerm if BillingTerm does not already exist. URL : /api/billingterm Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description strName String A string that uniquely identifies the BillingTerm. intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Data example { strName : strName , intUpdated : 512 } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed } Get all BillingTerm list Get the all registered BillingTerm list. URL : /api/billingterm Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : BillingTerm list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , strName : strName , intUpdated : 512 __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update BillingTerm Update the BillingTerm by Id URL : /api/billingterm/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the billingterm. Param Type Description strName String A string that uniquely identifies the BillingTerm. intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Data example { strName : strName , intUpdated : 512 } Success Response Code : 200 success Resonse example { msg : BillingTerm updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Get Single BillingTerm By Id Get a single BillingTerm by id if current billingterm was registered on it. URL : /api/billingterm/:billingtermid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the billingterm. Success Response: Code : 200 success Resonse example { msg : BillingTerm found! , data : { _id : 5f6896897b9884253cf6bdb6 , strName : strName , intUpdated : 512 __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If billingterm does not exist on server. Code : 404 Not Found Content example { msg : BillingTerm not found , data :null } Delete BillingTerm Delete the BillingTerm by Id URL : /api/billingterm/:billingtermid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the billingterm. Success Response Code : 200 success Resonse example { msg : BillingTerm deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no billingterm available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"BillingTerm"},{"location":"BillingTerm/index.html#billingterm","text":"This object is used to representing billing terms. The billing terms are defined by each tenant. Create an BillingTerm if BillingTerm does not already exist. URL : /api/billingterm Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description strName String A string that uniquely identifies the BillingTerm. intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Data example { strName : strName , intUpdated : 512 } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed }","title":"BillingTerm"},{"location":"BillingTerm/index.html#get-all-billingterm-list","text":"Get the all registered BillingTerm list. URL : /api/billingterm Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : BillingTerm list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , strName : strName , intUpdated : 512 __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all BillingTerm list"},{"location":"BillingTerm/index.html#update-billingterm","text":"Update the BillingTerm by Id URL : /api/billingterm/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the billingterm. Param Type Description strName String A string that uniquely identifies the BillingTerm. intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Data example { strName : strName , intUpdated : 512 } Success Response Code : 200 success Resonse example { msg : BillingTerm updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update BillingTerm"},{"location":"BillingTerm/index.html#get-single-billingterm-by-id","text":"Get a single BillingTerm by id if current billingterm was registered on it. URL : /api/billingterm/:billingtermid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the billingterm. Success Response: Code : 200 success Resonse example { msg : BillingTerm found! , data : { _id : 5f6896897b9884253cf6bdb6 , strName : strName , intUpdated : 512 __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If billingterm does not exist on server. Code : 404 Not Found Content example { msg : BillingTerm not found , data :null }","title":"Get Single BillingTerm By Id"},{"location":"BillingTerm/index.html#delete-billingterm","text":"Delete the BillingTerm by Id URL : /api/billingterm/:billingtermid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the billingterm. Success Response Code : 200 success Resonse example { msg : BillingTerm deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no billingterm available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete  BillingTerm"},{"location":"Business/index.html","text":"Create Business A Business represents a particular Business within your CMMS. It contains information about the address of the Business, and the Business Classification, such as Agriculture, Aerospace/Airline, Automotive, Biotechnology, Chemical Processing, Computer, Data Centers, Defense, Education, Electronics, Energy and Utilities, Manufacturing, Software, Technology, and Telecommunications. Create an Business if Business does not already exist. URL : /api/business Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description strProvince String A string that identifies the Province of the Business. strPostalCode String A string that identifies the Postal Code of the Business. strTimezone String A string that identifies the Time Zone of the Business. strPrimaryEmail String A string that identifies the Primary Email of the Business. strName String A string that identifies the Name of the Business. strPhone String A string that identifies the Phone Number of the Business. strFax String A string that identifies the Fax Number of the Business. intCountryID Integer An integer that uniquely identifies the Country of the Business (used in conjunction with the Country object). strAddress String A string that identifies the Address of the Business. strPrimaryContact String A string that identifies the Primary Contact of the Business. strNotes String A string that identifies Notes of the Business. strPhone2 String An additional optional phone number of the Business. strCode String The code of the Business. strCity String The city of the Business. strSecondaryEmail String A string that identifies secondary email of the Business. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 6 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed } Get Single Business By Id Get a single Business by id if current Business was registered on it. URL : /api/business/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the business. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 6 , strProvince : String , strPostalCode : String , strTimezone : String , strPrimaryEmail : String , strName : String , strPhone : String , strFax : String , intCountryID : Integer , strAddress : String , strPrimaryContact : String , strNotes : String , strPhone2 : String , strCode : String , strCity : String , strSecondaryEmail : String } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If Business does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null } Update Business Update the Business by Id URL : /api/business/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the Business. Param Type Description strProvince String A string that identifies the Province of the Business. strPostalCode String A string that identifies the Postal Code of the Business. strTimezone String A string that identifies the Time Zone of the Business. strPrimaryEmail String A string that identifies the Primary Email of the Business. strName String A string that identifies the Name of the Business. strPhone String A string that identifies the Phone Number of the Business. strFax String A string that identifies the Fax Number of the Business. intCountryID Integer An integer that uniquely identifies the Country of the Business (used in conjunction with the Country object). strAddress String A string that identifies the Address of the Business. strPrimaryContact String A string that identifies the Primary Contact of the Business. strNotes String A string that identifies Notes of the Business. strPhone2 String An additional optional phone number of the Business. strCode String The code of the Business. strCity String The city of the Business. strSecondaryEmail String A string that identifies secondary email of the Business. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed } Delete Business Delete a Business by Id URL : /api/business/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the business. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Business"},{"location":"Business/index.html#create-business","text":"A Business represents a particular Business within your CMMS. It contains information about the address of the Business, and the Business Classification, such as Agriculture, Aerospace/Airline, Automotive, Biotechnology, Chemical Processing, Computer, Data Centers, Defense, Education, Electronics, Energy and Utilities, Manufacturing, Software, Technology, and Telecommunications. Create an Business if Business does not already exist. URL : /api/business Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description strProvince String A string that identifies the Province of the Business. strPostalCode String A string that identifies the Postal Code of the Business. strTimezone String A string that identifies the Time Zone of the Business. strPrimaryEmail String A string that identifies the Primary Email of the Business. strName String A string that identifies the Name of the Business. strPhone String A string that identifies the Phone Number of the Business. strFax String A string that identifies the Fax Number of the Business. intCountryID Integer An integer that uniquely identifies the Country of the Business (used in conjunction with the Country object). strAddress String A string that identifies the Address of the Business. strPrimaryContact String A string that identifies the Primary Contact of the Business. strNotes String A string that identifies Notes of the Business. strPhone2 String An additional optional phone number of the Business. strCode String The code of the Business. strCity String The city of the Business. strSecondaryEmail String A string that identifies secondary email of the Business. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 6 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed }","title":"Create Business"},{"location":"Business/index.html#get-single-business-by-id","text":"Get a single Business by id if current Business was registered on it. URL : /api/business/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the business. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 6 , strProvince : String , strPostalCode : String , strTimezone : String , strPrimaryEmail : String , strName : String , strPhone : String , strFax : String , intCountryID : Integer , strAddress : String , strPrimaryContact : String , strNotes : String , strPhone2 : String , strCode : String , strCity : String , strSecondaryEmail : String } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If Business does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Get Single Business By Id"},{"location":"Business/index.html#update-business","text":"Update the Business by Id URL : /api/business/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the Business. Param Type Description strProvince String A string that identifies the Province of the Business. strPostalCode String A string that identifies the Postal Code of the Business. strTimezone String A string that identifies the Time Zone of the Business. strPrimaryEmail String A string that identifies the Primary Email of the Business. strName String A string that identifies the Name of the Business. strPhone String A string that identifies the Phone Number of the Business. strFax String A string that identifies the Fax Number of the Business. intCountryID Integer An integer that uniquely identifies the Country of the Business (used in conjunction with the Country object). strAddress String A string that identifies the Address of the Business. strPrimaryContact String A string that identifies the Primary Contact of the Business. strNotes String A string that identifies Notes of the Business. strPhone2 String An additional optional phone number of the Business. strCode String The code of the Business. strCity String The city of the Business. strSecondaryEmail String A string that identifies secondary email of the Business. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Update Business"},{"location":"Business/index.html#delete-business","text":"Delete a Business by Id URL : /api/business/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the business. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete Business"},{"location":"Business/creat_Business_Api.html","text":"Create Business A Business represents a particular Business within your CMMS. It contains information about the address of the Business, and the Business Classification, such as Agriculture, Aerospace/Airline, Automotive, Biotechnology, Chemical Processing, Computer, Data Centers, Defense, Education, Electronics, Energy and Utilities, Manufacturing, Software, Technology, and Telecommunications. Create an AssetCategory if AssetCategory does not already exist. URL : /api/business Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description strProvince String A string that identifies the Province of the Business. strPostalCode String A string that identifies the Postal Code of the Business. strTimezone String A string that identifies the Time Zone of the Business. strPrimaryEmail String A string that identifies the Primary Email of the Business. strName String A string that identifies the Name of the Business. strPhone String A string that identifies the Phone Number of the Business. strFax String A string that identifies the Fax Number of the Business. intCountryID Integer An integer that uniquely identifies the Country of the Business (used in conjunction with the Country object). strAddress String A string that identifies the Address of the Business. strPrimaryContact String A string that identifies the Primary Contact of the Business. strNotes String A string that identifies Notes of the Business. strPhone2 String An additional optional phone number of the Business. strCode String The code of the Business. strCity String The city of the Business. strSecondaryEmail String A string that identifies secondary email of the Business. Success Response Code : 200 success Resonse example { msg : Created successfully! , data : {id: 6 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed }","title":"Create Business"},{"location":"Business/creat_Business_Api.html#create-business","text":"A Business represents a particular Business within your CMMS. It contains information about the address of the Business, and the Business Classification, such as Agriculture, Aerospace/Airline, Automotive, Biotechnology, Chemical Processing, Computer, Data Centers, Defense, Education, Electronics, Energy and Utilities, Manufacturing, Software, Technology, and Telecommunications. Create an AssetCategory if AssetCategory does not already exist. URL : /api/business Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description strProvince String A string that identifies the Province of the Business. strPostalCode String A string that identifies the Postal Code of the Business. strTimezone String A string that identifies the Time Zone of the Business. strPrimaryEmail String A string that identifies the Primary Email of the Business. strName String A string that identifies the Name of the Business. strPhone String A string that identifies the Phone Number of the Business. strFax String A string that identifies the Fax Number of the Business. intCountryID Integer An integer that uniquely identifies the Country of the Business (used in conjunction with the Country object). strAddress String A string that identifies the Address of the Business. strPrimaryContact String A string that identifies the Primary Contact of the Business. strNotes String A string that identifies Notes of the Business. strPhone2 String An additional optional phone number of the Business. strCode String The code of the Business. strCity String The city of the Business. strSecondaryEmail String A string that identifies secondary email of the Business.","title":"Create Business"},{"location":"Business/creat_Business_Api.html#success-response","text":"Code : 200 success Resonse example { msg : Created successfully! , data : {id: 6 } }","title":"Success Response"},{"location":"Business/creat_Business_Api.html#error-responses","text":"Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed }","title":"Error Responses"},{"location":"Business/delete_Business_Api.html","text":"Delete Business Api Delete a Business by Id URL : /api/business/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the business. Success Response Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete Business Api"},{"location":"Business/delete_Business_Api.html#delete-business-api","text":"Delete a Business by Id URL : /api/business/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the business.","title":"Delete Business Api"},{"location":"Business/delete_Business_Api.html#success-response","text":"Code : 200 success Resonse example { msg : Deleted successfully! , data: null }","title":"Success Response"},{"location":"Business/delete_Business_Api.html#error-responses","text":"Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Error Responses"},{"location":"Business/get_Business_byId_Api.html","text":"Get Single Business By Id Api Get a single Business by id if current Business was registered on it. URL : /api/business/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the business. Success Response Code : 200 success Resonse example { msg : Found! , data : { _id : 6 , strProvince : String , strPostalCode : String , strTimezone : String , strPrimaryEmail : String , strName : String , strPhone : String , strFax : String , intCountryID : Integer , strAddress : String , strPrimaryContact : String , strNotes : String , strPhone2 : String , strCode : String , strCity : String , strSecondaryEmail : String } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If Business does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Get Single Business By Id Api"},{"location":"Business/get_Business_byId_Api.html#get-single-business-by-id-api","text":"Get a single Business by id if current Business was registered on it. URL : /api/business/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the business.","title":"Get Single Business By Id Api"},{"location":"Business/get_Business_byId_Api.html#success-response","text":"Code : 200 success Resonse example { msg : Found! , data : { _id : 6 , strProvince : String , strPostalCode : String , strTimezone : String , strPrimaryEmail : String , strName : String , strPhone : String , strFax : String , intCountryID : Integer , strAddress : String , strPrimaryContact : String , strNotes : String , strPhone2 : String , strCode : String , strCity : String , strSecondaryEmail : String } }","title":"Success Response"},{"location":"Business/get_Business_byId_Api.html#error-responses","text":"Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null }","title":"Error Responses"},{"location":"Business/get_Business_byId_Api.html#or","text":"Condition : If Business does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Or"},{"location":"Business/update_Business_Api.html","text":"Update Business Api Update the Business by Id URL : /api/business/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the Business. Param Type Description strProvince String A string that identifies the Province of the Business. strPostalCode String A string that identifies the Postal Code of the Business. strTimezone String A string that identifies the Time Zone of the Business. strPrimaryEmail String A string that identifies the Primary Email of the Business. strName String A string that identifies the Name of the Business. strPhone String A string that identifies the Phone Number of the Business. strFax String A string that identifies the Fax Number of the Business. intCountryID Integer An integer that uniquely identifies the Country of the Business (used in conjunction with the Country object). strAddress String A string that identifies the Address of the Business. strPrimaryContact String A string that identifies the Primary Contact of the Business. strNotes String A string that identifies Notes of the Business. strPhone2 String An additional optional phone number of the Business. strCode String The code of the Business. strCity String The city of the Business. strSecondaryEmail String A string that identifies secondary email of the Business. Success Response Code : 200 success Resonse example { msg : Updated successfully! } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Update Business Api"},{"location":"Business/update_Business_Api.html#update-business-api","text":"Update the Business by Id URL : /api/business/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the Business. Param Type Description strProvince String A string that identifies the Province of the Business. strPostalCode String A string that identifies the Postal Code of the Business. strTimezone String A string that identifies the Time Zone of the Business. strPrimaryEmail String A string that identifies the Primary Email of the Business. strName String A string that identifies the Name of the Business. strPhone String A string that identifies the Phone Number of the Business. strFax String A string that identifies the Fax Number of the Business. intCountryID Integer An integer that uniquely identifies the Country of the Business (used in conjunction with the Country object). strAddress String A string that identifies the Address of the Business. strPrimaryContact String A string that identifies the Primary Contact of the Business. strNotes String A string that identifies Notes of the Business. strPhone2 String An additional optional phone number of the Business. strCode String The code of the Business. strCity String The city of the Business. strSecondaryEmail String A string that identifies secondary email of the Business.","title":"Update Business Api"},{"location":"Business/update_Business_Api.html#success-response","text":"Code : 200 success Resonse example { msg : Updated successfully! }","title":"Success Response"},{"location":"Business/update_Business_Api.html#error-responses","text":"Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Error Responses"},{"location":"BusinessGroup/index.html","text":"BusinessGroup This object is used for defining the vendor groups. Create an BusinessGroup if BussinessGroup does not already exist. URL : /api/businessgroup Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description bolIsDefaultManufacturer Boolean If set to true, indicates that the business group is the Default manufacturer for the associated asset (usually parts/supplies) bolIsDefaultSupplier Boolean If set to true, indicates that the business group is the Default supplier for the associated asset (usually parts/supplies). intRelationshipType Integer An integer value used to define the relationship type. Possible values are 1 for Vendor and 2 for Customer. strName String The display name for the vendor group. Data example { bolIsDefaultManufacturer : false, bolIsDefaultSupplier : true, intRelationshipType : 12, strName : strName , } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed } Get all BusinessGroup list Get the all registered BusinessGroup list. URL : /api/businessgroup Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : BusinessGroup list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , bolIsDefaultManufacturer : false, bolIsDefaultSupplier : true, intRelationshipType : 12, strName : strName , __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update BusinessGroup Update the BusinessGroup by Id URL : /api/businessgroup/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the businessgroup. Param Type Description bolIsDefaultManufacturer Boolean If set to true, indicates that the business group is the Default manufacturer for the associated asset (usually parts/supplies) bolIsDefaultSupplier Boolean If set to true, indicates that the business group is the Default supplier for the associated asset (usually parts/supplies). intRelationshipType Integer An integer value used to define the relationship type. Possible values are 1 for Vendor and 2 for Customer. strName String The display name for the vendor group. Data example { bolIsDefaultManufacturer : false, bolIsDefaultSupplier : true, intRelationshipType : 12, strName : strName , } Success Response Code : 200 success Resonse example { msg : BusinessGroup updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Get Single BusinessGroup By Id Get a single BusinessGroup by id if current businessgroup was registered on it. URL : /api/businessgroup/:businessgroupid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the businessgroup. Success Response: Code : 200 success Resonse example { msg : BusinessGroup found! , data : { _id : 5f6896897b9884253cf6bdb6 , bolIsDefaultManufacturer : false, bolIsDefaultSupplier : true, intRelationshipType : 12, strName : strName , __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If businessgroup does not exist on server. Code : 404 Not Found Content example { msg : BusinessGroup not found , data :null } Delete BusinessGroup Delete the BusinessGroup by Id URL : /api/businessgroup/:businessgroupid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the businessgroup. Success Response Code : 200 success Resonse example { msg : BusinessGroup deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no businessgroup available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"BusinessGroup"},{"location":"BusinessGroup/index.html#businessgroup","text":"This object is used for defining the vendor groups. Create an BusinessGroup if BussinessGroup does not already exist. URL : /api/businessgroup Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description bolIsDefaultManufacturer Boolean If set to true, indicates that the business group is the Default manufacturer for the associated asset (usually parts/supplies) bolIsDefaultSupplier Boolean If set to true, indicates that the business group is the Default supplier for the associated asset (usually parts/supplies). intRelationshipType Integer An integer value used to define the relationship type. Possible values are 1 for Vendor and 2 for Customer. strName String The display name for the vendor group. Data example { bolIsDefaultManufacturer : false, bolIsDefaultSupplier : true, intRelationshipType : 12, strName : strName , } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed }","title":"BusinessGroup"},{"location":"BusinessGroup/index.html#get-all-businessgroup-list","text":"Get the all registered BusinessGroup list. URL : /api/businessgroup Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : BusinessGroup list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , bolIsDefaultManufacturer : false, bolIsDefaultSupplier : true, intRelationshipType : 12, strName : strName , __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all BusinessGroup list"},{"location":"BusinessGroup/index.html#update-businessgroup","text":"Update the BusinessGroup by Id URL : /api/businessgroup/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the businessgroup. Param Type Description bolIsDefaultManufacturer Boolean If set to true, indicates that the business group is the Default manufacturer for the associated asset (usually parts/supplies) bolIsDefaultSupplier Boolean If set to true, indicates that the business group is the Default supplier for the associated asset (usually parts/supplies). intRelationshipType Integer An integer value used to define the relationship type. Possible values are 1 for Vendor and 2 for Customer. strName String The display name for the vendor group. Data example { bolIsDefaultManufacturer : false, bolIsDefaultSupplier : true, intRelationshipType : 12, strName : strName , } Success Response Code : 200 success Resonse example { msg : BusinessGroup updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update BusinessGroup"},{"location":"BusinessGroup/index.html#get-single-businessgroup-by-id","text":"Get a single BusinessGroup by id if current businessgroup was registered on it. URL : /api/businessgroup/:businessgroupid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the businessgroup. Success Response: Code : 200 success Resonse example { msg : BusinessGroup found! , data : { _id : 5f6896897b9884253cf6bdb6 , bolIsDefaultManufacturer : false, bolIsDefaultSupplier : true, intRelationshipType : 12, strName : strName , __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If businessgroup does not exist on server. Code : 404 Not Found Content example { msg : BusinessGroup not found , data :null }","title":"Get Single BusinessGroup By Id"},{"location":"BusinessGroup/index.html#delete-businessgroup","text":"Delete the BusinessGroup by Id URL : /api/businessgroup/:businessgroupid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the businessgroup. Success Response Code : 200 success Resonse example { msg : BusinessGroup deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no businessgroup available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete  BusinessGroup"},{"location":"CalendarEvent/index.html","text":"CalendarEvent A CalendarEvent represents a certain Maintenance object such as a Work Order that is assigned to a User on a specific Date for a ScheduleTrigger or ScheduledMaintenance. The CalendarEvent is associated with your CMMS. It contains information about the timestamp Date for the CalendarEvent and the associated ScheduleTrigger. An Example Scenario: You have an Asset in the CMMS. The Asset is of type Facility. The Facility has a Work Order attached to it. The Work Order has certain Labor Tasks for certain users attached to it. For a certain Date, a CalendarEvent can be created for this Work Order where a ScheduleTrigger and ScheduledMaintenance can be assigned to a User. See the WorkOrder object for more details. You can have multiple CalendarEvents associated in your CMMS. Create an CalendarEvent if CalendarEvent does not already exist. URL : /api/calendarevent Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intScheduledMaintenanceID Integer An integer that uniquely identifies the ScheduledMaintenance. intScheduleTriggerID Integer An integer that uniquely identifies the ScheduleTrigger. dtmDate Timestamp A datetime stamp that identifies the the Date for the CalendarEvent. Data example { intScheduledMaintena : 12, intScheduleTriggerID : 12, dtmDate : 2020-11-26T09:00:36.285+00:00 } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed } Get all CalendarEvent list Get the all registered CalendarEvent list. URL : /api/calendarevent Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : CalendarEvent list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intScheduledMaintena : 12, intScheduleTriggerID : 12, dtmDate : 2020-11-26T09:00:36.285+00:00 __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update CalendarEvent Update the CalendarEvent by Id URL : /api/calendarevent/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the calendarevent. Param Type Description intScheduledMaintenanceID Integer An integer that uniquely identifies the ScheduledMaintenance. intScheduleTriggerID Integer An integer that uniquely identifies the ScheduleTrigger. dtmDate Timestamp A datetime stamp that identifies the the Date for the CalendarEvent. Data example { intScheduledMaintena : 12, intScheduleTriggerID : 12, dtmDate : 2020-11-26T09:00:36.285+00:00 } Success Response Code : 200 success Resonse example { msg : CalendarEvent updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Get Single CalendarEvent By Id Get a single CalendarEvent by id if current calendarevent was registered on it. URL : /api/calendarevent/:calendareventid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the calendarevent. Success Response: Code : 200 success Resonse example { msg : CalendarEvent found! , data : { _id : 5f6896897b9884253cf6bdb6 , intScheduledMaintena : 12, intScheduleTriggerID : 12, dtmDate : 2020-11-26T09:00:36.285+00:00 __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If calendarevent does not exist on server. Code : 404 Not Found Content example { msg : CalendarEvent not found , data :null } Delete CalendarEvent Delete the CalendarEvent by Id URL : /api/calendarevent/:calendareventid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the calendarevent. Success Response Code : 200 success Resonse example { msg : CalendarEvent deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no calendarevent available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"CalendarEvent"},{"location":"CalendarEvent/index.html#calendarevent","text":"A CalendarEvent represents a certain Maintenance object such as a Work Order that is assigned to a User on a specific Date for a ScheduleTrigger or ScheduledMaintenance. The CalendarEvent is associated with your CMMS. It contains information about the timestamp Date for the CalendarEvent and the associated ScheduleTrigger. An Example Scenario: You have an Asset in the CMMS. The Asset is of type Facility. The Facility has a Work Order attached to it. The Work Order has certain Labor Tasks for certain users attached to it. For a certain Date, a CalendarEvent can be created for this Work Order where a ScheduleTrigger and ScheduledMaintenance can be assigned to a User. See the WorkOrder object for more details. You can have multiple CalendarEvents associated in your CMMS. Create an CalendarEvent if CalendarEvent does not already exist. URL : /api/calendarevent Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intScheduledMaintenanceID Integer An integer that uniquely identifies the ScheduledMaintenance. intScheduleTriggerID Integer An integer that uniquely identifies the ScheduleTrigger. dtmDate Timestamp A datetime stamp that identifies the the Date for the CalendarEvent. Data example { intScheduledMaintena : 12, intScheduleTriggerID : 12, dtmDate : 2020-11-26T09:00:36.285+00:00 } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed }","title":"CalendarEvent"},{"location":"CalendarEvent/index.html#get-all-calendarevent-list","text":"Get the all registered CalendarEvent list. URL : /api/calendarevent Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : CalendarEvent list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intScheduledMaintena : 12, intScheduleTriggerID : 12, dtmDate : 2020-11-26T09:00:36.285+00:00 __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all CalendarEvent list"},{"location":"CalendarEvent/index.html#update-calendarevent","text":"Update the CalendarEvent by Id URL : /api/calendarevent/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the calendarevent. Param Type Description intScheduledMaintenanceID Integer An integer that uniquely identifies the ScheduledMaintenance. intScheduleTriggerID Integer An integer that uniquely identifies the ScheduleTrigger. dtmDate Timestamp A datetime stamp that identifies the the Date for the CalendarEvent. Data example { intScheduledMaintena : 12, intScheduleTriggerID : 12, dtmDate : 2020-11-26T09:00:36.285+00:00 } Success Response Code : 200 success Resonse example { msg : CalendarEvent updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update CalendarEvent"},{"location":"CalendarEvent/index.html#get-single-calendarevent-by-id","text":"Get a single CalendarEvent by id if current calendarevent was registered on it. URL : /api/calendarevent/:calendareventid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the calendarevent. Success Response: Code : 200 success Resonse example { msg : CalendarEvent found! , data : { _id : 5f6896897b9884253cf6bdb6 , intScheduledMaintena : 12, intScheduleTriggerID : 12, dtmDate : 2020-11-26T09:00:36.285+00:00 __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If calendarevent does not exist on server. Code : 404 Not Found Content example { msg : CalendarEvent not found , data :null }","title":"Get Single CalendarEvent By Id"},{"location":"CalendarEvent/index.html#delete-calendarevent","text":"Delete the CalendarEvent by Id URL : /api/calendarevent/:calendareventid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the calendarevent. Success Response Code : 200 success Resonse example { msg : CalendarEvent deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no calendarevent available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete  CalendarEvent"},{"location":"ChargeDepartment/index.html","text":"Create ChargeDepartment This object is used to access the Charge Department lookup table. Create an ChargeDepartment if ChargeDepartment does not already exist. URL : /api/chargedepartment Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Required Type Description strCode Yes String A unique code for referencing the charge department. strDescription Yes String A short text describing the charge department. intFacilityID Integer An integer that can be used to linked the charge department with the facility it is located at. intFacilityID Integer An integer that can be used to linked the charge department with the facility it is located at. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 4 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strCode is required } { msg : Create failed } Get all ChargeDepartment list Get the all registered ChargeDepartment list. URL : /api/chargedepartment Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 6 , strCode : String , strDescription : String , intFacilityID : Object, intUpdated :2020-10-16T18:12:30.433+00:00 __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Get Single ChargeDepartment By Id Get a single ChargeDepartment by id if current ChargeDepartment was registered on it. URL : /api/chargedepartment/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the chargedepartment. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 7 , strCode : String , strDescription : String , intFacilityID : Integer , intUpdated :2020-10-16T18:12:30.433+00:00 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If chargedepartment does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null } Update ChargeDepartment Update the ChargeDepartment by Id URL : /api/chargedepartment/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ChargeDepartment. Param Required Type Description strCode Yes String A unique code for referencing the charge department. strDescription Yes String A short text describing the charge department. intFacilityID Integer An integer that can be used to linked the charge department with the facility it is located at. intFacilityID Integer An integer that can be used to linked the charge department with the facility it is located at. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed } Delete ChargeDepartment Delete a ChargeDepartment by Id URL : /api/chargedepartment/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the chargedepartment. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"ChargeDepartment"},{"location":"ChargeDepartment/index.html#create-chargedepartment","text":"This object is used to access the Charge Department lookup table. Create an ChargeDepartment if ChargeDepartment does not already exist. URL : /api/chargedepartment Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Required Type Description strCode Yes String A unique code for referencing the charge department. strDescription Yes String A short text describing the charge department. intFacilityID Integer An integer that can be used to linked the charge department with the facility it is located at. intFacilityID Integer An integer that can be used to linked the charge department with the facility it is located at. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 4 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strCode is required } { msg : Create failed }","title":"Create ChargeDepartment"},{"location":"ChargeDepartment/index.html#get-all-chargedepartment-list","text":"Get the all registered ChargeDepartment list. URL : /api/chargedepartment Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 6 , strCode : String , strDescription : String , intFacilityID : Object, intUpdated :2020-10-16T18:12:30.433+00:00 __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all ChargeDepartment list"},{"location":"ChargeDepartment/index.html#get-single-chargedepartment-by-id","text":"Get a single ChargeDepartment by id if current ChargeDepartment was registered on it. URL : /api/chargedepartment/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the chargedepartment. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 7 , strCode : String , strDescription : String , intFacilityID : Integer , intUpdated :2020-10-16T18:12:30.433+00:00 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If chargedepartment does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Get Single ChargeDepartment By Id"},{"location":"ChargeDepartment/index.html#update-chargedepartment","text":"Update the ChargeDepartment by Id URL : /api/chargedepartment/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ChargeDepartment. Param Required Type Description strCode Yes String A unique code for referencing the charge department. strDescription Yes String A short text describing the charge department. intFacilityID Integer An integer that can be used to linked the charge department with the facility it is located at. intFacilityID Integer An integer that can be used to linked the charge department with the facility it is located at. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Update ChargeDepartment"},{"location":"ChargeDepartment/index.html#delete-chargedepartment","text":"Delete a ChargeDepartment by Id URL : /api/chargedepartment/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the chargedepartment. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete ChargeDepartment"},{"location":"File/index.html","text":"File A File represents a file system object, such as pictures for Assets (facilities, equipment, tools), Supplies (Parts, Businesses), Regions, and Users. It contains information about the size of the File and the name of the File. The File object is associated with your CMMS. The File object is associated with FileContents. See FileContents object for more details. You can have multiple Files associated in your CMMS. Create an File if File does not already exist. URL : /api/file Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intWorkOrderID Integer An integer that uniquely identifies the Work Order that is associated with this File. intFileTypeID Integer An integer that uniquely identifies the File Type. strName String A string that identifies the name of the File. intSize Integer An integer that identifies the size of the File. strNotes String A string that identifies Notes associated with the File. intFileContentsID Integer An integer that uniquely identifies the FileContents (used in conjunction with FileContents). intAssetID Integer An ID that identifies the Asset associated with the File. strLink String A web url, that typically starts with http or https protocol. Network drive paths are not supported, as they are blocked by modern browsers. intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. strUuid String A unique identifier for the File. Data example { intWorkOrderID : 12, intFileTypeID : 2, strName : strName , intSize : 7, ... ... } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed } Get all File list Get the all registered File list. URL : /api/file Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : File list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intWorkOrderID : 12, intFileTypeID : 2, strName : strName , intSize : 7, strNotes : strNotes , intFileContentsID : 3, intAssetID : 2, strLink : strLink , intUpdated : 123, strUuid : strUuid , __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update File Update the File by Id URL : /api/file/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the file. Param Type Description intWorkOrderID Integer An integer that uniquely identifies the Work Order that is associated with this File. intFileTypeID Integer An integer that uniquely identifies the File Type. strName String A string that identifies the name of the File. intSize Integer An integer that identifies the size of the File. strNotes String A string that identifies Notes associated with the File. intFileContentsID Integer An integer that uniquely identifies the FileContents (used in conjunction with FileContents). intAssetID Integer An ID that identifies the Asset associated with the File. strLink String A web url, that typically starts with http or https protocol. Network drive paths are not supported, as they are blocked by modern browsers. intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. strUuid String A unique identifier for the File. Data example { intWorkOrderID : 12, intFileTypeID : 2, strName : strName , intSize : 7, ... ... } Success Response Code : 200 success Resonse example { msg : File updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Get Single File By Id Get a single File by id if current file was registered on it. URL : /api/file/:fileid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the file. Success Response: Code : 200 success Resonse example { msg : File found! , data : { _id : 5f6896897b9884253cf6bdb6 , intWorkOrderID : 12, intFileTypeID : 2, strName : strName , intSize : 7, strNotes : strNotes , intFileContentsID : 3, intAssetID : 2, strLink : strLink , intUpdated : 123, strUuid : strUuid , __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If file does not exist on server. Code : 404 Not Found Content example { msg : File not found , data :null } Delete File Delete the File by Id URL : /api/file/:fileid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the file. Success Response Code : 200 success Resonse example { msg : File deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no file available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"File"},{"location":"File/index.html#file","text":"A File represents a file system object, such as pictures for Assets (facilities, equipment, tools), Supplies (Parts, Businesses), Regions, and Users. It contains information about the size of the File and the name of the File. The File object is associated with your CMMS. The File object is associated with FileContents. See FileContents object for more details. You can have multiple Files associated in your CMMS. Create an File if File does not already exist. URL : /api/file Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intWorkOrderID Integer An integer that uniquely identifies the Work Order that is associated with this File. intFileTypeID Integer An integer that uniquely identifies the File Type. strName String A string that identifies the name of the File. intSize Integer An integer that identifies the size of the File. strNotes String A string that identifies Notes associated with the File. intFileContentsID Integer An integer that uniquely identifies the FileContents (used in conjunction with FileContents). intAssetID Integer An ID that identifies the Asset associated with the File. strLink String A web url, that typically starts with http or https protocol. Network drive paths are not supported, as they are blocked by modern browsers. intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. strUuid String A unique identifier for the File. Data example { intWorkOrderID : 12, intFileTypeID : 2, strName : strName , intSize : 7, ... ... } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed }","title":"File"},{"location":"File/index.html#get-all-file-list","text":"Get the all registered File list. URL : /api/file Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : File list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intWorkOrderID : 12, intFileTypeID : 2, strName : strName , intSize : 7, strNotes : strNotes , intFileContentsID : 3, intAssetID : 2, strLink : strLink , intUpdated : 123, strUuid : strUuid , __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all File list"},{"location":"File/index.html#update-file","text":"Update the File by Id URL : /api/file/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the file. Param Type Description intWorkOrderID Integer An integer that uniquely identifies the Work Order that is associated with this File. intFileTypeID Integer An integer that uniquely identifies the File Type. strName String A string that identifies the name of the File. intSize Integer An integer that identifies the size of the File. strNotes String A string that identifies Notes associated with the File. intFileContentsID Integer An integer that uniquely identifies the FileContents (used in conjunction with FileContents). intAssetID Integer An ID that identifies the Asset associated with the File. strLink String A web url, that typically starts with http or https protocol. Network drive paths are not supported, as they are blocked by modern browsers. intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. strUuid String A unique identifier for the File. Data example { intWorkOrderID : 12, intFileTypeID : 2, strName : strName , intSize : 7, ... ... } Success Response Code : 200 success Resonse example { msg : File updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update File"},{"location":"File/index.html#get-single-file-by-id","text":"Get a single File by id if current file was registered on it. URL : /api/file/:fileid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the file. Success Response: Code : 200 success Resonse example { msg : File found! , data : { _id : 5f6896897b9884253cf6bdb6 , intWorkOrderID : 12, intFileTypeID : 2, strName : strName , intSize : 7, strNotes : strNotes , intFileContentsID : 3, intAssetID : 2, strLink : strLink , intUpdated : 123, strUuid : strUuid , __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If file does not exist on server. Code : 404 Not Found Content example { msg : File not found , data :null }","title":"Get Single File By Id"},{"location":"File/index.html#delete-file","text":"Delete the File by Id URL : /api/file/:fileid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the file. Success Response Code : 200 success Resonse example { msg : File deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no file available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete  File"},{"location":"FileContents/index.html","text":"FileContents A FileContents represents a more in depth look into a specific file system object, such as pictures for Assets (facilities, equipment, tools), Supplies (Parts, Businesses), Regions, and Users. It contains information about the MimeType of the File. The FileContents object is associated with a File object. See the File object for more details. Create an FileContents if FileContents does not already exist. URL : /api/filecontents Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description strName String A string that identifies the name of the File. strMimeType String A string that identifies the MimeType of the File. intSize Integer An integer that identifies the size of the File. intSysCode Integer FACILITY = 0,EQUIPMENT = 1,TOOLS = 2,PARTS_SUPPLIES = 3,USER = 4,BUSINESS = 5,SITE = 6 strUuid String A unique identifier for the FileContents. Data example { strName : strName , strMinmeType : strMinmeType , intSize : 7, intSysCode : 2, strUuid : strUuid } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed } Get all FileContents list Get the all registered FileContents list. URL : /api/filecontents Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : FileContents list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , strName : strName , strMinmeType : strMinmeType , intSize : 7, intSysCode : 2, strUuid : strUuid , __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update FileContents Update the FileContents by Id URL : /api/filecontents/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the filecontents. Param Type Description strName String A string that identifies the name of the File. strMimeType String A string that identifies the MimeType of the File. intSize Integer An integer that identifies the size of the File. intSysCode Integer FACILITY = 0,EQUIPMENT = 1,TOOLS = 2,PARTS_SUPPLIES = 3,USER = 4,BUSINESS = 5,SITE = 6 strUuid String A unique identifier for the FileContents. Data example { strName : strName , strMinmeType : strMinmeType , intSize : 7, intSysCode : 2, strUuid : strUuid } Success Response Code : 200 success Resonse example { msg : FileContents updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Get Single FileContents By Id Get a single FileContents by id if current filecontents was registered on it. URL : /api/filecontents/:filecontentsid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the filecontents. Success Response: Code : 200 success Resonse example { msg : FileContents found! , data : { _id : 5f6896897b9884253cf6bdb6 , strName : strName , strMinmeType : strMinmeType , intSize : 7, intSysCode : 2, strUuid : strUuid , __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If filecontents does not exist on server. Code : 404 Not Found Content example { msg : FileContents not found , data :null } Delete FileContents Delete the FileContents by Id URL : /api/filecontents/:filecontentsid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the filecontents. Success Response Code : 200 success Resonse example { msg : FileContents deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no filecontents available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"FileContents"},{"location":"FileContents/index.html#filecontents","text":"A FileContents represents a more in depth look into a specific file system object, such as pictures for Assets (facilities, equipment, tools), Supplies (Parts, Businesses), Regions, and Users. It contains information about the MimeType of the File. The FileContents object is associated with a File object. See the File object for more details. Create an FileContents if FileContents does not already exist. URL : /api/filecontents Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description strName String A string that identifies the name of the File. strMimeType String A string that identifies the MimeType of the File. intSize Integer An integer that identifies the size of the File. intSysCode Integer FACILITY = 0,EQUIPMENT = 1,TOOLS = 2,PARTS_SUPPLIES = 3,USER = 4,BUSINESS = 5,SITE = 6 strUuid String A unique identifier for the FileContents. Data example { strName : strName , strMinmeType : strMinmeType , intSize : 7, intSysCode : 2, strUuid : strUuid } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed }","title":"FileContents"},{"location":"FileContents/index.html#get-all-filecontents-list","text":"Get the all registered FileContents list. URL : /api/filecontents Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : FileContents list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , strName : strName , strMinmeType : strMinmeType , intSize : 7, intSysCode : 2, strUuid : strUuid , __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all FileContents list"},{"location":"FileContents/index.html#update-filecontents","text":"Update the FileContents by Id URL : /api/filecontents/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the filecontents. Param Type Description strName String A string that identifies the name of the File. strMimeType String A string that identifies the MimeType of the File. intSize Integer An integer that identifies the size of the File. intSysCode Integer FACILITY = 0,EQUIPMENT = 1,TOOLS = 2,PARTS_SUPPLIES = 3,USER = 4,BUSINESS = 5,SITE = 6 strUuid String A unique identifier for the FileContents. Data example { strName : strName , strMinmeType : strMinmeType , intSize : 7, intSysCode : 2, strUuid : strUuid } Success Response Code : 200 success Resonse example { msg : FileContents updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update FileContents"},{"location":"FileContents/index.html#get-single-filecontents-by-id","text":"Get a single FileContents by id if current filecontents was registered on it. URL : /api/filecontents/:filecontentsid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the filecontents. Success Response: Code : 200 success Resonse example { msg : FileContents found! , data : { _id : 5f6896897b9884253cf6bdb6 , strName : strName , strMinmeType : strMinmeType , intSize : 7, intSysCode : 2, strUuid : strUuid , __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If filecontents does not exist on server. Code : 404 Not Found Content example { msg : FileContents not found , data :null }","title":"Get Single FileContents By Id"},{"location":"FileContents/index.html#delete-filecontents","text":"Delete the FileContents by Id URL : /api/filecontents/:filecontentsid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the filecontents. Success Response Code : 200 success Resonse example { msg : FileContents deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no filecontents available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete  FileContents"},{"location":"MaintenanceType/index.html","text":"MaintenanceType This object is used to represent the different types of maintenance that work orders can be filed under. Base possible values are \"Preventive\", \"Damage\", \"Corrective\", \"Safety\", \"Upgrade\", \"Electrical\", \"Project\", \"Inspection\", \"Meter Reading\", \"Other\", but those values can be modified for each tenant. Create an MaintenanceType if MaintenanceType does not already exist. URL : /api/maintenancetype Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description strName String The display name of the maintenance type. intSysCode Integer PREVENTIVE = 1,DAMAGE = 2,CORRECTIVE = 3,SAFETY = 4,UPGRADE = 5,ELECTRICAL = 6,PROJECT = 7,INSPECTION = 8,METER_READING = 9,OTHER = 10 strColor String A string representing the hexadecimal color values for the maintenance type. intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. strUuid String A unique identifier for the MaintenanceType. Data example { strName : strName , intSysCode : 1, strColor : strColor , intUpdated : 123, strUuid : strUuid } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed } Get all MaintenanceType list Get the all registered MaintenanceType list. URL : /api/maintenancetype Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : MaintenanceType list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , strName : strName , intSysCode : 1, strColor : strColor , intUpdated : 123, strUuid : strUuid , __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update MaintenanceType Update the MaintenanceType by Id URL : /api/maintenancetype/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the maintenancetype. Param Type Description strName String The display name of the maintenance type. intSysCode Integer PREVENTIVE = 1,DAMAGE = 2,CORRECTIVE = 3,SAFETY = 4,UPGRADE = 5,ELECTRICAL = 6,PROJECT = 7,INSPECTION = 8,METER_READING = 9,OTHER = 10 strColor String A string representing the hexadecimal color values for the maintenance type. intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. strUuid String A unique identifier for the MaintenanceType. Data example { strName : strName , intSysCode : 1, strColor : strColor , intUpdated : 123, strUuid : strUuid } Success Response Code : 200 success Resonse example { msg : MaintenanceType updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Get Single MaintenanceType By Id Get a single MaintenanceType by id if current maintenancetype was registered on it. URL : /api/maintenancetype/:maintenancetypeid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the maintenancetype. Success Response: Code : 200 success Resonse example { msg : MaintenanceType found! , data : { _id : 5f6896897b9884253cf6bdb6 , strName : strName , intSysCode : 1, strColor : strColor , intUpdated : 123, strUuid : strUuid , __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If maintenancetype does not exist on server. Code : 404 Not Found Content example { msg : MaintenanceType not found , data :null } Delete MaintenanceType Delete the MaintenanceType by Id URL : /api/maintenancetype/:maintenancetypeid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the maintenancetype. Success Response Code : 200 success Resonse example { msg : MaintenanceType deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no maintenancetype available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"MaintenanceType"},{"location":"MaintenanceType/index.html#maintenancetype","text":"This object is used to represent the different types of maintenance that work orders can be filed under. Base possible values are \"Preventive\", \"Damage\", \"Corrective\", \"Safety\", \"Upgrade\", \"Electrical\", \"Project\", \"Inspection\", \"Meter Reading\", \"Other\", but those values can be modified for each tenant. Create an MaintenanceType if MaintenanceType does not already exist. URL : /api/maintenancetype Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description strName String The display name of the maintenance type. intSysCode Integer PREVENTIVE = 1,DAMAGE = 2,CORRECTIVE = 3,SAFETY = 4,UPGRADE = 5,ELECTRICAL = 6,PROJECT = 7,INSPECTION = 8,METER_READING = 9,OTHER = 10 strColor String A string representing the hexadecimal color values for the maintenance type. intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. strUuid String A unique identifier for the MaintenanceType. Data example { strName : strName , intSysCode : 1, strColor : strColor , intUpdated : 123, strUuid : strUuid } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed }","title":"MaintenanceType"},{"location":"MaintenanceType/index.html#get-all-maintenancetype-list","text":"Get the all registered MaintenanceType list. URL : /api/maintenancetype Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : MaintenanceType list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , strName : strName , intSysCode : 1, strColor : strColor , intUpdated : 123, strUuid : strUuid , __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all MaintenanceType list"},{"location":"MaintenanceType/index.html#update-maintenancetype","text":"Update the MaintenanceType by Id URL : /api/maintenancetype/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the maintenancetype. Param Type Description strName String The display name of the maintenance type. intSysCode Integer PREVENTIVE = 1,DAMAGE = 2,CORRECTIVE = 3,SAFETY = 4,UPGRADE = 5,ELECTRICAL = 6,PROJECT = 7,INSPECTION = 8,METER_READING = 9,OTHER = 10 strColor String A string representing the hexadecimal color values for the maintenance type. intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. strUuid String A unique identifier for the MaintenanceType. Data example { strName : strName , intSysCode : 1, strColor : strColor , intUpdated : 123, strUuid : strUuid } Success Response Code : 200 success Resonse example { msg : MaintenanceType updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update MaintenanceType"},{"location":"MaintenanceType/index.html#get-single-maintenancetype-by-id","text":"Get a single MaintenanceType by id if current maintenancetype was registered on it. URL : /api/maintenancetype/:maintenancetypeid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the maintenancetype. Success Response: Code : 200 success Resonse example { msg : MaintenanceType found! , data : { _id : 5f6896897b9884253cf6bdb6 , strName : strName , intSysCode : 1, strColor : strColor , intUpdated : 123, strUuid : strUuid , __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If maintenancetype does not exist on server. Code : 404 Not Found Content example { msg : MaintenanceType not found , data :null }","title":"Get Single MaintenanceType By Id"},{"location":"MaintenanceType/index.html#delete-maintenancetype","text":"Delete the MaintenanceType by Id URL : /api/maintenancetype/:maintenancetypeid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the maintenancetype. Success Response Code : 200 success Resonse example { msg : MaintenanceType deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no maintenancetype available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete  MaintenanceType"},{"location":"MeterReading/index.html","text":"Create MeterReading This object is used to store meter readings for some of the managed assets. Create a MeterReading if MeterReading does not already exist. URL : /api/meterreading Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Required Type Description intWorkOrderID Integer The ID of the work order, in case the meter reading was submitted during the completion of a work order. Please refer to the WorkOrder section. intSubmittedByUserID Integer The ID of the user who submitted the meter reading. For getting all possible values, please refer to the User section. intMeterReadingUnitsID Yes Integer The ID of the unit used for the meter reading. For getting all possible values, please refer to the MeterReadingUnit section. dblMeterReading Yes Double The actual value of the meter reading. intAssetID Yes Integer The ID of the asset the meter reading was performed on. For getting all possible values, please refer to the Asset section. dtmDateSubmitted Yes timestamp The date and time of the moment when the meter reading was submitted. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 1 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : intMeterReadingUnitsID is required } { msg : Create failed } Get all MeterReading list Get the all registered MeterReading list by AssetId. URL : /api/meterreading/:assetId Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the Asset. Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 6 , intWorkOrderID : 7 , intSubmittedByUserID : Object, intMeterReadingUnitsID : Object, dblMeterReading : 0.2, intAssetID : 4, dtmDateSubmitted :2020-10-16T18:12:30.433+00:00, __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update MeterReading Update the MeterReading by Id URL : /api/meterreading/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the MeterReading. Param Required Type Description intWorkOrderID Integer The ID of the work order, in case the meter reading was submitted during the completion of a work order. Please refer to the WorkOrder section. intSubmittedByUserID Integer The ID of the user who submitted the meter reading. For getting all possible values, please refer to the User section. intMeterReadingUnitsID Yes Integer The ID of the unit used for the meter reading. For getting all possible values, please refer to the MeterReadingUnit section. dblMeterReading Yes Double The actual value of the meter reading. intAssetID Yes Integer The ID of the asset the meter reading was performed on. For getting all possible values, please refer to the Asset section. dtmDateSubmitted Yes timestamp The date and time of the moment when the meter reading was submitted. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed } Delete MeterReading Delete a MeterReading by Id URL : /api/meterreading/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the MeterReading. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"MeterReading"},{"location":"MeterReading/index.html#create-meterreading","text":"This object is used to store meter readings for some of the managed assets. Create a MeterReading if MeterReading does not already exist. URL : /api/meterreading Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Required Type Description intWorkOrderID Integer The ID of the work order, in case the meter reading was submitted during the completion of a work order. Please refer to the WorkOrder section. intSubmittedByUserID Integer The ID of the user who submitted the meter reading. For getting all possible values, please refer to the User section. intMeterReadingUnitsID Yes Integer The ID of the unit used for the meter reading. For getting all possible values, please refer to the MeterReadingUnit section. dblMeterReading Yes Double The actual value of the meter reading. intAssetID Yes Integer The ID of the asset the meter reading was performed on. For getting all possible values, please refer to the Asset section. dtmDateSubmitted Yes timestamp The date and time of the moment when the meter reading was submitted. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 1 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : intMeterReadingUnitsID is required } { msg : Create failed }","title":"Create MeterReading"},{"location":"MeterReading/index.html#get-all-meterreading-list","text":"Get the all registered MeterReading list by AssetId. URL : /api/meterreading/:assetId Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the Asset. Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 6 , intWorkOrderID : 7 , intSubmittedByUserID : Object, intMeterReadingUnitsID : Object, dblMeterReading : 0.2, intAssetID : 4, dtmDateSubmitted :2020-10-16T18:12:30.433+00:00, __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all MeterReading list"},{"location":"MeterReading/index.html#update-meterreading","text":"Update the MeterReading by Id URL : /api/meterreading/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the MeterReading. Param Required Type Description intWorkOrderID Integer The ID of the work order, in case the meter reading was submitted during the completion of a work order. Please refer to the WorkOrder section. intSubmittedByUserID Integer The ID of the user who submitted the meter reading. For getting all possible values, please refer to the User section. intMeterReadingUnitsID Yes Integer The ID of the unit used for the meter reading. For getting all possible values, please refer to the MeterReadingUnit section. dblMeterReading Yes Double The actual value of the meter reading. intAssetID Yes Integer The ID of the asset the meter reading was performed on. For getting all possible values, please refer to the Asset section. dtmDateSubmitted Yes timestamp The date and time of the moment when the meter reading was submitted. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Update MeterReading"},{"location":"MeterReading/index.html#delete-meterreading","text":"Delete a MeterReading by Id URL : /api/meterreading/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the MeterReading. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete MeterReading"},{"location":"MeterReadingUnit/index.html","text":"Create MeterReadingUnit This object is used to represent units for the meter readings. Meter reading units can be added and deleted but a unit cannot be deleted if it is already referred somewhere in the CMMS. Create a MeterReadingUnit if MeterReadingUnit does not already exist. URL : /api/meterreadingunit Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Required Type Description strName Yes String The display name of the meter reading unit. For example : \"Kilowatts\",\"Cycles\" or \"Gallons\" strSymbol Yes String The symbol of the meter reading unit. For example \"kw\", \"kPa\" or \"g\" intPrecision Integer The number of digits to be displayed after the point when rendering the value of a meter reading with this unit. With a precision of 3, example values will be \"13.654\",\"9.111\" Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 1 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strName is required } { msg : Create failed } Get all MeterReadingUnit list Get the all registered MeterReadingUnit list. URL : /api/meterreadingunit/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the MeterReadingUnit. Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 6 , strName : Kilowatts , strSymbol : Kw , intPrecision : 13.654, intUpdated :2020-10-16T18:12:30.433+00:00, __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update MeterReadingUnit Update the MeterReadingUnit by Id URL : /api/meterreadingunit/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the MeterReadingUnit. Param Required Type Description strName Yes String The display name of the meter reading unit. For example : \"Kilowatts\",\"Cycles\" or \"Gallons\" strSymbol Yes String The symbol of the meter reading unit. For example \"kw\", \"kPa\" or \"g\" intPrecision Integer The number of digits to be displayed after the point when rendering the value of a meter reading with this unit. With a precision of 3, example values will be \"13.654\",\"9.111\" Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed } Delete MeterReadingUnit Delete a MeterReadingUnit by Id URL : /api/meterreadingunit/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the MeterReadingUnit. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"MeterReadingUnit"},{"location":"MeterReadingUnit/index.html#create-meterreadingunit","text":"This object is used to represent units for the meter readings. Meter reading units can be added and deleted but a unit cannot be deleted if it is already referred somewhere in the CMMS. Create a MeterReadingUnit if MeterReadingUnit does not already exist. URL : /api/meterreadingunit Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Required Type Description strName Yes String The display name of the meter reading unit. For example : \"Kilowatts\",\"Cycles\" or \"Gallons\" strSymbol Yes String The symbol of the meter reading unit. For example \"kw\", \"kPa\" or \"g\" intPrecision Integer The number of digits to be displayed after the point when rendering the value of a meter reading with this unit. With a precision of 3, example values will be \"13.654\",\"9.111\" Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 1 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strName is required } { msg : Create failed }","title":"Create MeterReadingUnit"},{"location":"MeterReadingUnit/index.html#get-all-meterreadingunit-list","text":"Get the all registered MeterReadingUnit list. URL : /api/meterreadingunit/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the MeterReadingUnit. Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 6 , strName : Kilowatts , strSymbol : Kw , intPrecision : 13.654, intUpdated :2020-10-16T18:12:30.433+00:00, __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all MeterReadingUnit list"},{"location":"MeterReadingUnit/index.html#update-meterreadingunit","text":"Update the MeterReadingUnit by Id URL : /api/meterreadingunit/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the MeterReadingUnit. Param Required Type Description strName Yes String The display name of the meter reading unit. For example : \"Kilowatts\",\"Cycles\" or \"Gallons\" strSymbol Yes String The symbol of the meter reading unit. For example \"kw\", \"kPa\" or \"g\" intPrecision Integer The number of digits to be displayed after the point when rendering the value of a meter reading with this unit. With a precision of 3, example values will be \"13.654\",\"9.111\" Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Update MeterReadingUnit"},{"location":"MeterReadingUnit/index.html#delete-meterreadingunit","text":"Delete a MeterReadingUnit by Id URL : /api/meterreadingunit/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the MeterReadingUnit. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete MeterReadingUnit"},{"location":"Move/index.html","text":"Move This object represents one or several assets being moved from their original location to a new location or to a temporary destination. The temporary destination can be a location or site, a user, a business or even a work order. A Move object should be created with the \"Draft\" status and MoveAsset objects should then be associated with it. The status of the Move object should then be changed to \"Requested\" in order to trigger notification sending to the site's move managers (see MoveSiteManager). The site's move managers or an administrator will then be able to confirm the move by updating its status to \"Confirmed\", which will trigger the move to be effectively performed. If a move manager or an administrator changes the status of a move to \"Requested\", the status will be changed automatically to \"Confirmed\" and the move will be performed straight away. Create an Move if Move does not already exist. URL : /api/move Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intDestinationTypeID Integer An integer defining the type of destination for the move. Possible values are 1 for an asset (site, location or equipment), 2 for a user, 3 for a business, 4 for a work order. intAssetDestinationID Integer A reference to the Asset, in case the destination is an asset. strAisle String In case the destination is a location, the destination aisle can be defined. strRow String In case the destination is a location, the destination row can be defined. strBin String In case the destination is a location, the destination bin can be defined. intUserDestinationID Integer A reference to the User, in case the destination is a user. intBusinessDestinationID Integer A reference to the Business, in case the destination is a business. intWorkOrderDestinationID Integer A reference to the WorkOrder, in case the destination is an work order. intProjectDestinationID Integer A reference to the Project, in case the destination is a project. intSiteID Integer The ID of the destination site (see Asset). This has to match the site of the destination. intFromSiteID Integer The ID of the site from which the assets are taken. All assets must come from the same site. intMoveStatusID Integer The status of the move. A move should be created as a \"Draft\". See MoveStatus. intRequestedByID Integer The ID of the user who requested the move. See User. dtmDateRequested Date The date when the move was requested. intMovedByID Integer The ID of the user who will be actually performing the move, if different from the one requesting the move. See User. dtmMoveDate Date The date when the move will physically happen. intConfirmedByID Integer The ID of the user who confirmed the move. See User. dtmDateConfirmed Date The date when the move was confirmed by a move manager or an administrator. intRejectedByID Integer If the move was rejected, the ID of the user who rejected it. See User. dtmDateRejected Date If the move was rejected, the date when it happened. strNotes String Some additional notes about the move. Data example { intDestinationTypeID : 1, intAssetDestinationID : 5, strAisle : strAisle , strRow : strRow , strBin : strBin , ... ... } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed } Get all Move list Get the all registered Move list. URL : /api/move Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Move list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intDestinationTypeID : 1, intAssetDestinationID : 5, strAisle : strAisle , strRow : strRow , strBin : strBin , intUserDestinationID : 3, intBusinessDestinationID : 2, intWorkOrderDestinationID : 2, intProjectDestinationID : 4, intSiteID : 3, intFromSiteID : 32, intMoveStatusID : 2, intRequestedByID : 2, dtmDateRequested : 2020-11-26T09:00:36.285+00:00, intMovedByID : 4, dtmMoveDate : 2020-11-26T09:00:36.285+00:00, intConfirmedByID : 5, dtmDateConfirmed : 2020-11-26T09:00:36.285+00:00, intRejectedByID : 3, dtmDateRejected : 2020-11-26T09:00:36.285+00:00, strNotes : strNotes , __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update Move Update the Move by Id URL : /api/move/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the move. Param Type Description intDestinationTypeID Integer An integer defining the type of destination for the move. Possible values are 1 for an asset (site, location or equipment), 2 for a user, 3 for a business, 4 for a work order. intAssetDestinationID Integer A reference to the Asset, in case the destination is an asset. strAisle String In case the destination is a location, the destination aisle can be defined. strRow String In case the destination is a location, the destination row can be defined. strBin String In case the destination is a location, the destination bin can be defined. intUserDestinationID Integer A reference to the User, in case the destination is a user. intBusinessDestinationID Integer A reference to the Business, in case the destination is a business. intWorkOrderDestinationID Integer A reference to the WorkOrder, in case the destination is an work order. intProjectDestinationID Integer A reference to the Project, in case the destination is a project. intSiteID Integer The ID of the destination site (see Asset). This has to match the site of the destination. intFromSiteID Integer The ID of the site from which the assets are taken. All assets must come from the same site. intMoveStatusID Integer The status of the move. A move should be created as a \"Draft\". See MoveStatus. intRequestedByID Integer The ID of the user who requested the move. See User. dtmDateRequested Date The date when the move was requested. intMovedByID Integer The ID of the user who will be actually performing the move, if different from the one requesting the move. See User. dtmMoveDate Date The date when the move will physically happen. intConfirmedByID Integer The ID of the user who confirmed the move. See User. dtmDateConfirmed Date The date when the move was confirmed by a move manager or an administrator. intRejectedByID Integer If the move was rejected, the ID of the user who rejected it. See User. dtmDateRejected Date If the move was rejected, the date when it happened. strNotes String Some additional notes about the move. Data example { intDestinationTypeID : 1, intAssetDestinationID : 5, strAisle : strAisle , strRow : strRow , strBin : strBin , ... ... } Success Response Code : 200 success Resonse example { msg : Move updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Get Single Move By Id Get a single Move by id if current move was registered on it. URL : /api/move/:moveid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the move. Success Response: Code : 200 success Resonse example { msg : Move found! , data : { _id : 5f6896897b9884253cf6bdb6 , intDestinationTypeID : 1, intAssetDestinationID : 5, strAisle : strAisle , strRow : strRow , strBin : strBin , intUserDestinationID : 3, intBusinessDestinationID : 2, intWorkOrderDestinationID : 2, intProjectDestinationID : 4, intSiteID : 3, intFromSiteID : 32, intMoveStatusID : 2, intRequestedByID : 2, dtmDateRequested : 2020-11-26T09:00:36.285+00:00, intMovedByID : 4, dtmMoveDate : 2020-11-26T09:00:36.285+00:00, intConfirmedByID : 5, dtmDateConfirmed : 2020-11-26T09:00:36.285+00:00, intRejectedByID : 3, dtmDateRejected : 2020-11-26T09:00:36.285+00:00, strNotes : strNotes , __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If move does not exist on server. Code : 404 Not Found Content example { msg : Move not found , data :null } Delete Move Delete the Move by Id URL : /api/move/:moveid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the move. Success Response Code : 200 success Resonse example { msg : Move deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no move available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Move"},{"location":"Move/index.html#move","text":"This object represents one or several assets being moved from their original location to a new location or to a temporary destination. The temporary destination can be a location or site, a user, a business or even a work order. A Move object should be created with the \"Draft\" status and MoveAsset objects should then be associated with it. The status of the Move object should then be changed to \"Requested\" in order to trigger notification sending to the site's move managers (see MoveSiteManager). The site's move managers or an administrator will then be able to confirm the move by updating its status to \"Confirmed\", which will trigger the move to be effectively performed. If a move manager or an administrator changes the status of a move to \"Requested\", the status will be changed automatically to \"Confirmed\" and the move will be performed straight away. Create an Move if Move does not already exist. URL : /api/move Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intDestinationTypeID Integer An integer defining the type of destination for the move. Possible values are 1 for an asset (site, location or equipment), 2 for a user, 3 for a business, 4 for a work order. intAssetDestinationID Integer A reference to the Asset, in case the destination is an asset. strAisle String In case the destination is a location, the destination aisle can be defined. strRow String In case the destination is a location, the destination row can be defined. strBin String In case the destination is a location, the destination bin can be defined. intUserDestinationID Integer A reference to the User, in case the destination is a user. intBusinessDestinationID Integer A reference to the Business, in case the destination is a business. intWorkOrderDestinationID Integer A reference to the WorkOrder, in case the destination is an work order. intProjectDestinationID Integer A reference to the Project, in case the destination is a project. intSiteID Integer The ID of the destination site (see Asset). This has to match the site of the destination. intFromSiteID Integer The ID of the site from which the assets are taken. All assets must come from the same site. intMoveStatusID Integer The status of the move. A move should be created as a \"Draft\". See MoveStatus. intRequestedByID Integer The ID of the user who requested the move. See User. dtmDateRequested Date The date when the move was requested. intMovedByID Integer The ID of the user who will be actually performing the move, if different from the one requesting the move. See User. dtmMoveDate Date The date when the move will physically happen. intConfirmedByID Integer The ID of the user who confirmed the move. See User. dtmDateConfirmed Date The date when the move was confirmed by a move manager or an administrator. intRejectedByID Integer If the move was rejected, the ID of the user who rejected it. See User. dtmDateRejected Date If the move was rejected, the date when it happened. strNotes String Some additional notes about the move. Data example { intDestinationTypeID : 1, intAssetDestinationID : 5, strAisle : strAisle , strRow : strRow , strBin : strBin , ... ... } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed }","title":"Move"},{"location":"Move/index.html#get-all-move-list","text":"Get the all registered Move list. URL : /api/move Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Move list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intDestinationTypeID : 1, intAssetDestinationID : 5, strAisle : strAisle , strRow : strRow , strBin : strBin , intUserDestinationID : 3, intBusinessDestinationID : 2, intWorkOrderDestinationID : 2, intProjectDestinationID : 4, intSiteID : 3, intFromSiteID : 32, intMoveStatusID : 2, intRequestedByID : 2, dtmDateRequested : 2020-11-26T09:00:36.285+00:00, intMovedByID : 4, dtmMoveDate : 2020-11-26T09:00:36.285+00:00, intConfirmedByID : 5, dtmDateConfirmed : 2020-11-26T09:00:36.285+00:00, intRejectedByID : 3, dtmDateRejected : 2020-11-26T09:00:36.285+00:00, strNotes : strNotes , __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all Move list"},{"location":"Move/index.html#update-move","text":"Update the Move by Id URL : /api/move/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the move. Param Type Description intDestinationTypeID Integer An integer defining the type of destination for the move. Possible values are 1 for an asset (site, location or equipment), 2 for a user, 3 for a business, 4 for a work order. intAssetDestinationID Integer A reference to the Asset, in case the destination is an asset. strAisle String In case the destination is a location, the destination aisle can be defined. strRow String In case the destination is a location, the destination row can be defined. strBin String In case the destination is a location, the destination bin can be defined. intUserDestinationID Integer A reference to the User, in case the destination is a user. intBusinessDestinationID Integer A reference to the Business, in case the destination is a business. intWorkOrderDestinationID Integer A reference to the WorkOrder, in case the destination is an work order. intProjectDestinationID Integer A reference to the Project, in case the destination is a project. intSiteID Integer The ID of the destination site (see Asset). This has to match the site of the destination. intFromSiteID Integer The ID of the site from which the assets are taken. All assets must come from the same site. intMoveStatusID Integer The status of the move. A move should be created as a \"Draft\". See MoveStatus. intRequestedByID Integer The ID of the user who requested the move. See User. dtmDateRequested Date The date when the move was requested. intMovedByID Integer The ID of the user who will be actually performing the move, if different from the one requesting the move. See User. dtmMoveDate Date The date when the move will physically happen. intConfirmedByID Integer The ID of the user who confirmed the move. See User. dtmDateConfirmed Date The date when the move was confirmed by a move manager or an administrator. intRejectedByID Integer If the move was rejected, the ID of the user who rejected it. See User. dtmDateRejected Date If the move was rejected, the date when it happened. strNotes String Some additional notes about the move. Data example { intDestinationTypeID : 1, intAssetDestinationID : 5, strAisle : strAisle , strRow : strRow , strBin : strBin , ... ... } Success Response Code : 200 success Resonse example { msg : Move updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update Move"},{"location":"Move/index.html#get-single-move-by-id","text":"Get a single Move by id if current move was registered on it. URL : /api/move/:moveid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the move. Success Response: Code : 200 success Resonse example { msg : Move found! , data : { _id : 5f6896897b9884253cf6bdb6 , intDestinationTypeID : 1, intAssetDestinationID : 5, strAisle : strAisle , strRow : strRow , strBin : strBin , intUserDestinationID : 3, intBusinessDestinationID : 2, intWorkOrderDestinationID : 2, intProjectDestinationID : 4, intSiteID : 3, intFromSiteID : 32, intMoveStatusID : 2, intRequestedByID : 2, dtmDateRequested : 2020-11-26T09:00:36.285+00:00, intMovedByID : 4, dtmMoveDate : 2020-11-26T09:00:36.285+00:00, intConfirmedByID : 5, dtmDateConfirmed : 2020-11-26T09:00:36.285+00:00, intRejectedByID : 3, dtmDateRejected : 2020-11-26T09:00:36.285+00:00, strNotes : strNotes , __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If move does not exist on server. Code : 404 Not Found Content example { msg : Move not found , data :null }","title":"Get Single Move By Id"},{"location":"Move/index.html#delete-move","text":"Delete the Move by Id URL : /api/move/:moveid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the move. Success Response Code : 200 success Resonse example { msg : Move deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no move available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete  Move"},{"location":"MoveAsset/index.html","text":"MoveAsset This object is used to include assets in a move. A Move object should always be created with the status \"Draft\" and then MoveAsset objects should be created for each asset that is part of the move. Once all the assets are attached to the move, its status can be changed to \"Requested\". Create an MoveAsset if MoveAsset does not already exist. URL : /api/moveasset Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intAssetID Integer The ID of the asset. Please refer to Asset. intMoveID Integer The ID of the move. Please refer to Move. intSiteID Integer This ID must be the same as the intSiteID of the move. Please refer to Asset. bolAway Boolean A boolean that indicates if the asset is currently away from its original location. bolPending Boolean A boolean that indicates if the move is currently pending confirmation by and administrator or move manager. intReasonOfflineID Integer If bolSetOffline is set to true, then this property can be used to specify a reason to set the asset offline. Please refer to ReasonToSetAssetOffline. bolSetOnline Boolean If set to true, then the asset will be put online when the move is confirmed. bolPending Boolean A boolean that indicates if the move is currently pending confirmation by and administrator or move manager. intReasonOnlineID Integer If bolSetOnline is set to true, then this property can be used to specify a reason to set the asset online. Please refer to ReasonToSetAssetOnline. dtmReturnDate Date The date when the asset should be checked back in to its original location. If the asset is moved to a destination of type \"site/location/equipment\", then the asset will be considered \"away\" from its original location only if a return date was set. dtmDateReturned Date The date when the asset was effectively returned to its original location. intMovedFromID Integer The ID of the original location of the asset. strFromAisle String The aisle where the asset was originally located. strFromRow String The row where the asset was originally located. strFromBin String The bin where the asset was originally located. strNotes String Some additional notes about the asset being part of the move. bolExclude Boolean If set to true, the asset is excluded from the move from the original location. Data example { intAssetID : 23, intMoveID : 4, intSiteID : 7, bolAway : false, bolPending : true, ... ... } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed } Get all MoveAsset list Get the all registered MoveAsset list. URL : /api/moveasset Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : MoveAsset list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intAssetID : 23, intMoveID : 4, intSiteID : 7, bolAway : false, bolPending : true, bolSetOffline : true, intReasonOfflineID : 3, bolSetOnline : true, intReasonOnlineID : 5, dtmReturnDate : 2020-11-26T09:00:36.285+00:00, dtmDateReturned : 2020-11-26T09:00:36.285+00:00, intMovedFromID : 3, strFromAisle : strFromAisle , strFromRow : strFromRow , strFromBin : strFromBin , strNotes : strNotes , bolExclude : true, __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update MoveAsset Update the MoveAsset by Id URL : /api/moveasset/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the moveasset. Param Type Description intAssetID Integer The ID of the asset. Please refer to Asset. intMoveID Integer The ID of the move. Please refer to Move. intSiteID Integer This ID must be the same as the intSiteID of the move. Please refer to Asset. bolAway Boolean A boolean that indicates if the asset is currently away from its original location. bolPending Boolean A boolean that indicates if the move is currently pending confirmation by and administrator or move manager. intReasonOfflineID Integer If bolSetOffline is set to true, then this property can be used to specify a reason to set the asset offline. Please refer to ReasonToSetAssetOffline. bolSetOnline Boolean If set to true, then the asset will be put online when the move is confirmed. bolPending Boolean A boolean that indicates if the move is currently pending confirmation by and administrator or move manager. intReasonOnlineID Integer If bolSetOnline is set to true, then this property can be used to specify a reason to set the asset online. Please refer to ReasonToSetAssetOnline. dtmReturnDate Date The date when the asset should be checked back in to its original location. If the asset is moved to a destination of type \"site/location/equipment\", then the asset will be considered \"away\" from its original location only if a return date was set. dtmDateReturned Date The date when the asset was effectively returned to its original location. intMovedFromID Integer The ID of the original location of the asset. strFromAisle String The aisle where the asset was originally located. strFromRow String The row where the asset was originally located. strFromBin String The bin where the asset was originally located. strNotes String Some additional notes about the asset being part of the move. bolExclude Boolean If set to true, the asset is excluded from the move from the original location. Data example { intAssetID : 23, intMoveID : 4, intSiteID : 7, bolAway : false, bolPending : true, ... ... } Success Response Code : 200 success Resonse example { msg : MoveAsset updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Get Single MoveAsset By Id Get a single MoveAsset by id if current moveasset was registered on it. URL : /api/moveasset/:moveassetid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the moveasset. Success Response: Code : 200 success Resonse example { msg : MoveAsset found! , data : { _id : 5f6896897b9884253cf6bdb6 , intAssetID : 23, intMoveID : 4, intSiteID : 7, bolAway : false, bolPending : true, bolSetOffline : true, intReasonOfflineID : 3, bolSetOnline : true, intReasonOnlineID : 5, dtmReturnDate : 2020-11-26T09:00:36.285+00:00, dtmDateReturned : 2020-11-26T09:00:36.285+00:00, intMovedFromID : 3, strFromAisle : strFromAisle , strFromRow : strFromRow , strFromBin : strFromBin , strNotes : strNotes , bolExclude : true, __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If moveasset does not exist on server. Code : 404 Not Found Content example { msg : MoveAsset not found , data :null } Delete MoveAsset Delete the MoveAsset by Id URL : /api/moveasset/:moveassetid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the moveasset. Success Response Code : 200 success Resonse example { msg : MoveAsset deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no moveasset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"MoveAsset"},{"location":"MoveAsset/index.html#moveasset","text":"This object is used to include assets in a move. A Move object should always be created with the status \"Draft\" and then MoveAsset objects should be created for each asset that is part of the move. Once all the assets are attached to the move, its status can be changed to \"Requested\". Create an MoveAsset if MoveAsset does not already exist. URL : /api/moveasset Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intAssetID Integer The ID of the asset. Please refer to Asset. intMoveID Integer The ID of the move. Please refer to Move. intSiteID Integer This ID must be the same as the intSiteID of the move. Please refer to Asset. bolAway Boolean A boolean that indicates if the asset is currently away from its original location. bolPending Boolean A boolean that indicates if the move is currently pending confirmation by and administrator or move manager. intReasonOfflineID Integer If bolSetOffline is set to true, then this property can be used to specify a reason to set the asset offline. Please refer to ReasonToSetAssetOffline. bolSetOnline Boolean If set to true, then the asset will be put online when the move is confirmed. bolPending Boolean A boolean that indicates if the move is currently pending confirmation by and administrator or move manager. intReasonOnlineID Integer If bolSetOnline is set to true, then this property can be used to specify a reason to set the asset online. Please refer to ReasonToSetAssetOnline. dtmReturnDate Date The date when the asset should be checked back in to its original location. If the asset is moved to a destination of type \"site/location/equipment\", then the asset will be considered \"away\" from its original location only if a return date was set. dtmDateReturned Date The date when the asset was effectively returned to its original location. intMovedFromID Integer The ID of the original location of the asset. strFromAisle String The aisle where the asset was originally located. strFromRow String The row where the asset was originally located. strFromBin String The bin where the asset was originally located. strNotes String Some additional notes about the asset being part of the move. bolExclude Boolean If set to true, the asset is excluded from the move from the original location. Data example { intAssetID : 23, intMoveID : 4, intSiteID : 7, bolAway : false, bolPending : true, ... ... } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed }","title":"MoveAsset"},{"location":"MoveAsset/index.html#get-all-moveasset-list","text":"Get the all registered MoveAsset list. URL : /api/moveasset Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : MoveAsset list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intAssetID : 23, intMoveID : 4, intSiteID : 7, bolAway : false, bolPending : true, bolSetOffline : true, intReasonOfflineID : 3, bolSetOnline : true, intReasonOnlineID : 5, dtmReturnDate : 2020-11-26T09:00:36.285+00:00, dtmDateReturned : 2020-11-26T09:00:36.285+00:00, intMovedFromID : 3, strFromAisle : strFromAisle , strFromRow : strFromRow , strFromBin : strFromBin , strNotes : strNotes , bolExclude : true, __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all MoveAsset list"},{"location":"MoveAsset/index.html#update-moveasset","text":"Update the MoveAsset by Id URL : /api/moveasset/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the moveasset. Param Type Description intAssetID Integer The ID of the asset. Please refer to Asset. intMoveID Integer The ID of the move. Please refer to Move. intSiteID Integer This ID must be the same as the intSiteID of the move. Please refer to Asset. bolAway Boolean A boolean that indicates if the asset is currently away from its original location. bolPending Boolean A boolean that indicates if the move is currently pending confirmation by and administrator or move manager. intReasonOfflineID Integer If bolSetOffline is set to true, then this property can be used to specify a reason to set the asset offline. Please refer to ReasonToSetAssetOffline. bolSetOnline Boolean If set to true, then the asset will be put online when the move is confirmed. bolPending Boolean A boolean that indicates if the move is currently pending confirmation by and administrator or move manager. intReasonOnlineID Integer If bolSetOnline is set to true, then this property can be used to specify a reason to set the asset online. Please refer to ReasonToSetAssetOnline. dtmReturnDate Date The date when the asset should be checked back in to its original location. If the asset is moved to a destination of type \"site/location/equipment\", then the asset will be considered \"away\" from its original location only if a return date was set. dtmDateReturned Date The date when the asset was effectively returned to its original location. intMovedFromID Integer The ID of the original location of the asset. strFromAisle String The aisle where the asset was originally located. strFromRow String The row where the asset was originally located. strFromBin String The bin where the asset was originally located. strNotes String Some additional notes about the asset being part of the move. bolExclude Boolean If set to true, the asset is excluded from the move from the original location. Data example { intAssetID : 23, intMoveID : 4, intSiteID : 7, bolAway : false, bolPending : true, ... ... } Success Response Code : 200 success Resonse example { msg : MoveAsset updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update MoveAsset"},{"location":"MoveAsset/index.html#get-single-moveasset-by-id","text":"Get a single MoveAsset by id if current moveasset was registered on it. URL : /api/moveasset/:moveassetid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the moveasset. Success Response: Code : 200 success Resonse example { msg : MoveAsset found! , data : { _id : 5f6896897b9884253cf6bdb6 , intAssetID : 23, intMoveID : 4, intSiteID : 7, bolAway : false, bolPending : true, bolSetOffline : true, intReasonOfflineID : 3, bolSetOnline : true, intReasonOnlineID : 5, dtmReturnDate : 2020-11-26T09:00:36.285+00:00, dtmDateReturned : 2020-11-26T09:00:36.285+00:00, intMovedFromID : 3, strFromAisle : strFromAisle , strFromRow : strFromRow , strFromBin : strFromBin , strNotes : strNotes , bolExclude : true, __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If moveasset does not exist on server. Code : 404 Not Found Content example { msg : MoveAsset not found , data :null }","title":"Get Single MoveAsset By Id"},{"location":"MoveAsset/index.html#delete-moveasset","text":"Delete the MoveAsset by Id URL : /api/moveasset/:moveassetid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the moveasset. Success Response Code : 200 success Resonse example { msg : MoveAsset deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no moveasset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete  MoveAsset"},{"location":"MoveBack/index.html","text":"MoveBack This object represents a return move to put an asset back to its original location after it was put away as part of a Move. A return move should always be created with a \"Draft\" status and MoveBackAsset objects should then be attached to it. The status of the MoveBack object should then be changed to \"Requested\" in order to trigger notification sending to the site's move managers (see MoveSiteManager). The site's move managers or an administrator will then be able to confirm the move by updating its status to \"Confirmed\", which will trigger the move to be effectively performed. If a move manager or an administrator changes the status of a move to \"Requested\", the status will be changed automatically to \"Confirmed\" and the move will be performed straight away Create an MoveBack if MoveBack does not already exist. URL : /api/moveback Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intMovedBackByUserID Integer The ID of the user who will actually be performing the return move, if different from the one requesting the return move. See User. dtmMoveBackDate Date The date when the return move will physically happen. intRequestedByID Integer The ID of the user who requested the return move. See User. dtmDateRequested Date The date when the return move was requested. intConfirmedByID Integer It he return move was accepted, the ID of the user who accepted it. See User. dtmDateConfirmed Date If the return move was accepted, the date when it happened. intRejectedByID Integer If the return move was rejected, the ID of the user who rejected it. See User. dtmDateCanceled Date If the return move was rejected, the date when it happened. intMoveStatusID Integer The status of the return move. A return move should be created as a \"Draft\". See MoveStatus. intFromSiteID Integer The ID of the site where the assets were temporarily moved. See Asset. intSiteID Integer The ID of the site where the assets are checked back in. See Asset. strNotes String Some additional notes about the return move. Data example { intMovedBackByUserID : 23, dtmMoveBackDate : 2020-11-26T09:00:36.285+00:00, intRequestedByID : 7, dtmDateRequested : 2020-11-26T09:00:36.285+00:00, intConfirmedByID : 4, ... ... } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed } Get all MoveBack list Get the all registered MoveBack list. URL : /api/moveback Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : MoveBack list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intMovedBackByUserID : 23, dtmMoveBackDate : 2020-11-26T09:00:36.285+00:00, intRequestedByID : 7, dtmDateRequested : 2020-11-26T09:00:36.285+00:00, intConfirmedByID : 4, dtmDateConfirmed : 2020-11-26T09:00:36.285+00:00, intRejectedByID : 4, dtmDateCanceled : 2020-11-26T09:00:36.285+00:00, intMoveStatusID : 4, intFromSiteID : 2, intSiteID : 5, strNotes : strNotes , __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update MoveBack Update the MoveBack by Id URL : /api/moveback/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the moveback. Param Type Description intMovedBackByUserID Integer The ID of the user who will actually be performing the return move, if different from the one requesting the return move. See User. dtmMoveBackDate Date The date when the return move will physically happen. intRequestedByID Integer The ID of the user who requested the return move. See User. dtmDateRequested Date The date when the return move was requested. intConfirmedByID Integer It he return move was accepted, the ID of the user who accepted it. See User. dtmDateConfirmed Date If the return move was accepted, the date when it happened. intRejectedByID Integer If the return move was rejected, the ID of the user who rejected it. See User. dtmDateCanceled Date If the return move was rejected, the date when it happened. intMoveStatusID Integer The status of the return move. A return move should be created as a \"Draft\". See MoveStatus. intFromSiteID Integer The ID of the site where the assets were temporarily moved. See Asset. intSiteID Integer The ID of the site where the assets are checked back in. See Asset. strNotes String Some additional notes about the return move. Data example { intMovedBackByUserID : 23, dtmMoveBackDate : 2020-11-26T09:00:36.285+00:00, intRequestedByID : 7, dtmDateRequested : 2020-11-26T09:00:36.285+00:00, intConfirmedByID : 4, ... ... } Success Response Code : 200 success Resonse example { msg : MoveBack updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Get Single MoveBack By Id Get a single MoveBack by id if current moveback was registered on it. URL : /api/moveback/:movebackid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the moveback. Success Response: Code : 200 success Resonse example { msg : MoveBack found! , data : { _id : 5f6896897b9884253cf6bdb6 , intMovedBackByUserID : 23, dtmMoveBackDate : 2020-11-26T09:00:36.285+00:00, intRequestedByID : 7, dtmDateRequested : 2020-11-26T09:00:36.285+00:00, intConfirmedByID : 4, dtmDateConfirmed : 2020-11-26T09:00:36.285+00:00, intRejectedByID : 4, dtmDateCanceled : 2020-11-26T09:00:36.285+00:00, intMoveStatusID : 4, intFromSiteID : 2, intSiteID : 5, strNotes : strNotes , __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If moveback does not exist on server. Code : 404 Not Found Content example { msg : MoveBack not found , data :null } Delete MoveBack Delete the MoveBack by Id URL : /api/moveback/:movebackid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the moveback. Success Response Code : 200 success Resonse example { msg : MoveBack deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no moveback available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"MoveBack"},{"location":"MoveBack/index.html#moveback","text":"This object represents a return move to put an asset back to its original location after it was put away as part of a Move. A return move should always be created with a \"Draft\" status and MoveBackAsset objects should then be attached to it. The status of the MoveBack object should then be changed to \"Requested\" in order to trigger notification sending to the site's move managers (see MoveSiteManager). The site's move managers or an administrator will then be able to confirm the move by updating its status to \"Confirmed\", which will trigger the move to be effectively performed. If a move manager or an administrator changes the status of a move to \"Requested\", the status will be changed automatically to \"Confirmed\" and the move will be performed straight away Create an MoveBack if MoveBack does not already exist. URL : /api/moveback Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intMovedBackByUserID Integer The ID of the user who will actually be performing the return move, if different from the one requesting the return move. See User. dtmMoveBackDate Date The date when the return move will physically happen. intRequestedByID Integer The ID of the user who requested the return move. See User. dtmDateRequested Date The date when the return move was requested. intConfirmedByID Integer It he return move was accepted, the ID of the user who accepted it. See User. dtmDateConfirmed Date If the return move was accepted, the date when it happened. intRejectedByID Integer If the return move was rejected, the ID of the user who rejected it. See User. dtmDateCanceled Date If the return move was rejected, the date when it happened. intMoveStatusID Integer The status of the return move. A return move should be created as a \"Draft\". See MoveStatus. intFromSiteID Integer The ID of the site where the assets were temporarily moved. See Asset. intSiteID Integer The ID of the site where the assets are checked back in. See Asset. strNotes String Some additional notes about the return move. Data example { intMovedBackByUserID : 23, dtmMoveBackDate : 2020-11-26T09:00:36.285+00:00, intRequestedByID : 7, dtmDateRequested : 2020-11-26T09:00:36.285+00:00, intConfirmedByID : 4, ... ... } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed }","title":"MoveBack"},{"location":"MoveBack/index.html#get-all-moveback-list","text":"Get the all registered MoveBack list. URL : /api/moveback Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : MoveBack list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intMovedBackByUserID : 23, dtmMoveBackDate : 2020-11-26T09:00:36.285+00:00, intRequestedByID : 7, dtmDateRequested : 2020-11-26T09:00:36.285+00:00, intConfirmedByID : 4, dtmDateConfirmed : 2020-11-26T09:00:36.285+00:00, intRejectedByID : 4, dtmDateCanceled : 2020-11-26T09:00:36.285+00:00, intMoveStatusID : 4, intFromSiteID : 2, intSiteID : 5, strNotes : strNotes , __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all MoveBack list"},{"location":"MoveBack/index.html#update-moveback","text":"Update the MoveBack by Id URL : /api/moveback/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the moveback. Param Type Description intMovedBackByUserID Integer The ID of the user who will actually be performing the return move, if different from the one requesting the return move. See User. dtmMoveBackDate Date The date when the return move will physically happen. intRequestedByID Integer The ID of the user who requested the return move. See User. dtmDateRequested Date The date when the return move was requested. intConfirmedByID Integer It he return move was accepted, the ID of the user who accepted it. See User. dtmDateConfirmed Date If the return move was accepted, the date when it happened. intRejectedByID Integer If the return move was rejected, the ID of the user who rejected it. See User. dtmDateCanceled Date If the return move was rejected, the date when it happened. intMoveStatusID Integer The status of the return move. A return move should be created as a \"Draft\". See MoveStatus. intFromSiteID Integer The ID of the site where the assets were temporarily moved. See Asset. intSiteID Integer The ID of the site where the assets are checked back in. See Asset. strNotes String Some additional notes about the return move. Data example { intMovedBackByUserID : 23, dtmMoveBackDate : 2020-11-26T09:00:36.285+00:00, intRequestedByID : 7, dtmDateRequested : 2020-11-26T09:00:36.285+00:00, intConfirmedByID : 4, ... ... } Success Response Code : 200 success Resonse example { msg : MoveBack updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update MoveBack"},{"location":"MoveBack/index.html#get-single-moveback-by-id","text":"Get a single MoveBack by id if current moveback was registered on it. URL : /api/moveback/:movebackid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the moveback. Success Response: Code : 200 success Resonse example { msg : MoveBack found! , data : { _id : 5f6896897b9884253cf6bdb6 , intMovedBackByUserID : 23, dtmMoveBackDate : 2020-11-26T09:00:36.285+00:00, intRequestedByID : 7, dtmDateRequested : 2020-11-26T09:00:36.285+00:00, intConfirmedByID : 4, dtmDateConfirmed : 2020-11-26T09:00:36.285+00:00, intRejectedByID : 4, dtmDateCanceled : 2020-11-26T09:00:36.285+00:00, intMoveStatusID : 4, intFromSiteID : 2, intSiteID : 5, strNotes : strNotes , __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If moveback does not exist on server. Code : 404 Not Found Content example { msg : MoveBack not found , data :null }","title":"Get Single MoveBack By Id"},{"location":"MoveBack/index.html#delete-moveback","text":"Delete the MoveBack by Id URL : /api/moveback/:movebackid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the moveback. Success Response Code : 200 success Resonse example { msg : MoveBack deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no moveback available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete  MoveBack"},{"location":"MoveBackAsset/index.html","text":"MoveBackAsset This object is used to include assets in a return move. A MoveBack object should always be created with the status \"Draft\" and then MoveBackAsset objects should be created for each asset that is part of the return move. Once all the assets are attached to the return move, its status can be changed to \"Requested\". Create an MoveBackAsset if MoveBackAsset does not already exist. URL : /api/movebackasset Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intAssetID Integer The ID of the asset to attach to the return move. See Asset. intMoveBackID Integer The ID of the return move. See MoveBack. intOriginalMoveAssetID Integer The ID of the MoveAsset object that was used to initially put the asset away from its location. bolPending Boolean A boolean that indicates if the return move is currently pending confirmation by and administrator or move manager. bolSetBackOnline Boolean If set to true, then the asset will be put back online when the return move is confirmed. intReasonOnlineID Integer If bolSetOnline is set to true, then this property can be used to specify a reason to set the asset online. Please refer to ReasonToSetAssetOnline. bolSetBackOffline Boolean If set to true, then the asset will be put back offline when the return move is confirmed. intReasonOfflineID Integer If bolSetOffline is set to true, then this property can be used to specify a reason to set the asset offline. Please refer to ReasonToSetAssetOffline. strToAisle String The aisle the asset is put back in. This will be defaulted to the original aisle of the asset. strToBin String The bin the asset is put back in. This will be defaulted to the original bin of the asset. strToRow String The row the asset is put back in. This will be defaulted to the original row of the asset. intSiteID Integer The ID of the site where the asset is put back. This has to be consistent with the site ID of the MoveBack object and other MoveBackAsset objects associated to it. See Asset. strNotes String Some additional notes about the asset being part of the return move. bolExclude Boolean If set to true, the asset is excluded from the move back from the temporary location. Data example { intAssetID : 23, intMoveBackID : 4, intOriginalMoveAssetID : 7, bolPending : false, bolSetBackOnline : false, ... ... } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed } Get all MoveBackAsset list Get the all registered MoveBackAsset list. URL : /api/movebackasset Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : MoveBackAsset list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intAssetID : 23, intMoveBackID : 4, intOriginalMoveAssetID : 7, bolPending : false, bolSetBackOnline : false, intReasonOnlineID : 23, bolSetBackOffline : true, intReasonOfflineID : 7, strToAisle : strToAisle , strToBin : strToBin , strToRow : strToRow , intSiteID : 4, strNotes : strNotes , bolExclude : false, __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update MoveBackAsset Update the MoveBackAsset by Id URL : /api/movebackasset/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the movebackasset. Param Type Description intAssetID Integer The ID of the asset to attach to the return move. See Asset. intMoveBackID Integer The ID of the return move. See MoveBack. intOriginalMoveAssetID Integer The ID of the MoveAsset object that was used to initially put the asset away from its location. bolPending Boolean A boolean that indicates if the return move is currently pending confirmation by and administrator or move manager. bolSetBackOnline Boolean If set to true, then the asset will be put back online when the return move is confirmed. intReasonOnlineID Integer If bolSetOnline is set to true, then this property can be used to specify a reason to set the asset online. Please refer to ReasonToSetAssetOnline. bolSetBackOffline Boolean If set to true, then the asset will be put back offline when the return move is confirmed. intReasonOfflineID Integer If bolSetOffline is set to true, then this property can be used to specify a reason to set the asset offline. Please refer to ReasonToSetAssetOffline. strToAisle String The aisle the asset is put back in. This will be defaulted to the original aisle of the asset. strToBin String The bin the asset is put back in. This will be defaulted to the original bin of the asset. strToRow String The row the asset is put back in. This will be defaulted to the original row of the asset. intSiteID Integer The ID of the site where the asset is put back. This has to be consistent with the site ID of the MoveBack object and other MoveBackAsset objects associated to it. See Asset. strNotes String Some additional notes about the asset being part of the return move. bolExclude Boolean If set to true, the asset is excluded from the move back from the temporary location. Data example { intAssetID : 23, intMoveBackID : 4, intOriginalMoveAssetID : 7, bolPending : false, bolSetBackOnline : false, ... ... } Success Response Code : 200 success Resonse example { msg : MoveBackAsset updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Get Single MoveBackAsset By Id Get a single MoveBackAsset by id if current movebackasset was registered on it. URL : /api/movebackasset/:movebackassetid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the movebackasset. Success Response: Code : 200 success Resonse example { msg : MoveBackAsset found! , data : { _id : 5f6896897b9884253cf6bdb6 , intAssetID : 23, intMoveBackID : 4, intOriginalMoveAssetID : 7, bolPending : false, bolSetBackOnline : false, intReasonOnlineID : 23, bolSetBackOffline : true, intReasonOfflineID : 7, strToAisle : strToAisle , strToBin : strToBin , strToRow : strToRow , intSiteID : 4, strNotes : strNotes , bolExclude : false, __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If movebackasset does not exist on server. Code : 404 Not Found Content example { msg : MoveBackAsset not found , data :null } Delete MoveBackAsset Delete the MoveBackAsset by Id URL : /api/movebackasset/:movebackassetid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the movebackasset. Success Response Code : 200 success Resonse example { msg : MoveBackAsset deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no movebackasset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"MoveBackAsset"},{"location":"MoveBackAsset/index.html#movebackasset","text":"This object is used to include assets in a return move. A MoveBack object should always be created with the status \"Draft\" and then MoveBackAsset objects should be created for each asset that is part of the return move. Once all the assets are attached to the return move, its status can be changed to \"Requested\". Create an MoveBackAsset if MoveBackAsset does not already exist. URL : /api/movebackasset Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intAssetID Integer The ID of the asset to attach to the return move. See Asset. intMoveBackID Integer The ID of the return move. See MoveBack. intOriginalMoveAssetID Integer The ID of the MoveAsset object that was used to initially put the asset away from its location. bolPending Boolean A boolean that indicates if the return move is currently pending confirmation by and administrator or move manager. bolSetBackOnline Boolean If set to true, then the asset will be put back online when the return move is confirmed. intReasonOnlineID Integer If bolSetOnline is set to true, then this property can be used to specify a reason to set the asset online. Please refer to ReasonToSetAssetOnline. bolSetBackOffline Boolean If set to true, then the asset will be put back offline when the return move is confirmed. intReasonOfflineID Integer If bolSetOffline is set to true, then this property can be used to specify a reason to set the asset offline. Please refer to ReasonToSetAssetOffline. strToAisle String The aisle the asset is put back in. This will be defaulted to the original aisle of the asset. strToBin String The bin the asset is put back in. This will be defaulted to the original bin of the asset. strToRow String The row the asset is put back in. This will be defaulted to the original row of the asset. intSiteID Integer The ID of the site where the asset is put back. This has to be consistent with the site ID of the MoveBack object and other MoveBackAsset objects associated to it. See Asset. strNotes String Some additional notes about the asset being part of the return move. bolExclude Boolean If set to true, the asset is excluded from the move back from the temporary location. Data example { intAssetID : 23, intMoveBackID : 4, intOriginalMoveAssetID : 7, bolPending : false, bolSetBackOnline : false, ... ... } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed }","title":"MoveBackAsset"},{"location":"MoveBackAsset/index.html#get-all-movebackasset-list","text":"Get the all registered MoveBackAsset list. URL : /api/movebackasset Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : MoveBackAsset list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intAssetID : 23, intMoveBackID : 4, intOriginalMoveAssetID : 7, bolPending : false, bolSetBackOnline : false, intReasonOnlineID : 23, bolSetBackOffline : true, intReasonOfflineID : 7, strToAisle : strToAisle , strToBin : strToBin , strToRow : strToRow , intSiteID : 4, strNotes : strNotes , bolExclude : false, __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all MoveBackAsset list"},{"location":"MoveBackAsset/index.html#update-movebackasset","text":"Update the MoveBackAsset by Id URL : /api/movebackasset/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the movebackasset. Param Type Description intAssetID Integer The ID of the asset to attach to the return move. See Asset. intMoveBackID Integer The ID of the return move. See MoveBack. intOriginalMoveAssetID Integer The ID of the MoveAsset object that was used to initially put the asset away from its location. bolPending Boolean A boolean that indicates if the return move is currently pending confirmation by and administrator or move manager. bolSetBackOnline Boolean If set to true, then the asset will be put back online when the return move is confirmed. intReasonOnlineID Integer If bolSetOnline is set to true, then this property can be used to specify a reason to set the asset online. Please refer to ReasonToSetAssetOnline. bolSetBackOffline Boolean If set to true, then the asset will be put back offline when the return move is confirmed. intReasonOfflineID Integer If bolSetOffline is set to true, then this property can be used to specify a reason to set the asset offline. Please refer to ReasonToSetAssetOffline. strToAisle String The aisle the asset is put back in. This will be defaulted to the original aisle of the asset. strToBin String The bin the asset is put back in. This will be defaulted to the original bin of the asset. strToRow String The row the asset is put back in. This will be defaulted to the original row of the asset. intSiteID Integer The ID of the site where the asset is put back. This has to be consistent with the site ID of the MoveBack object and other MoveBackAsset objects associated to it. See Asset. strNotes String Some additional notes about the asset being part of the return move. bolExclude Boolean If set to true, the asset is excluded from the move back from the temporary location. Data example { intAssetID : 23, intMoveBackID : 4, intOriginalMoveAssetID : 7, bolPending : false, bolSetBackOnline : false, ... ... } Success Response Code : 200 success Resonse example { msg : MoveBackAsset updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update MoveBackAsset"},{"location":"MoveBackAsset/index.html#get-single-movebackasset-by-id","text":"Get a single MoveBackAsset by id if current movebackasset was registered on it. URL : /api/movebackasset/:movebackassetid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the movebackasset. Success Response: Code : 200 success Resonse example { msg : MoveBackAsset found! , data : { _id : 5f6896897b9884253cf6bdb6 , intAssetID : 23, intMoveBackID : 4, intOriginalMoveAssetID : 7, bolPending : false, bolSetBackOnline : false, intReasonOnlineID : 23, bolSetBackOffline : true, intReasonOfflineID : 7, strToAisle : strToAisle , strToBin : strToBin , strToRow : strToRow , intSiteID : 4, strNotes : strNotes , bolExclude : false, __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If movebackasset does not exist on server. Code : 404 Not Found Content example { msg : MoveBackAsset not found , data :null }","title":"Get Single MoveBackAsset By Id"},{"location":"MoveBackAsset/index.html#delete-movebackasset","text":"Delete the MoveBackAsset by Id URL : /api/movebackasset/:movebackassetid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the movebackasset. Success Response Code : 200 success Resonse example { msg : MoveBackAsset deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no movebackasset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete  MoveBackAsset"},{"location":"MoveStatus/index.html","text":"MoveStatus This object is used to represent the different statuses of a move. Possible values are \"Draft\", \"Requested\" or \"Confirmed\". Values cannot be added to that table. Create an MoveStatus if MoveStatus does not already exist. URL : /api/movestatus Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intSysCode Integer A fixed integer value used to idenitify the status. Possible values are the following : 100 for \"draft\", 101 for \"requested\", 102 for confirmed and 103 for rejected. strDefaultLabel String A default label for the status. Example values are \"Draft\", \"Requested\", \"Confirmed\" and \"Rejected\". strName String The name of the status. Example values are \"Draft\", \"Requested\", \"Confirmed\" and \"Rejected\". Data example { intSysCode : 23, strDefaultLabel : Draft , strName : Draft } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed } Get all MoveStatus list Get the all registered MoveStatus list. URL : /api/movestatus Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : MoveStatus list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intSysCode : 23, strDefaultLabel : Draft , strName : Draft , __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update MoveStatus Update the MoveStatus by Id URL : /api/movestatus/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the movestatus. Param Type Description intSysCode Integer A fixed integer value used to idenitify the status. Possible values are the following : 100 for \"draft\", 101 for \"requested\", 102 for confirmed and 103 for rejected. strDefaultLabel String A default label for the status. Example values are \"Draft\", \"Requested\", \"Confirmed\" and \"Rejected\". strName String The name of the status. Example values are \"Draft\", \"Requested\", \"Confirmed\" and \"Rejected\". Data example { intSysCode : 23, strDefaultLabel : Draft , strName : Draft } Success Response Code : 200 success Resonse example { msg : MoveStatus updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Get Single MoveStatus By Id Get a single MoveStatus by id if current movestatus was registered on it. URL : /api/movestatus/:movestausid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the movestatus. Success Response: Code : 200 success Resonse example { msg : MoveStatus found! , data : { _id : 5f6896897b9884253cf6bdb6 , intSysCode : 23, strDefaultLabel : Draft , strName : Draft , __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If movestatus does not exist on server. Code : 404 Not Found Content example { msg : MoveStatus not found , data :null } Delete MoveStatus Delete the MoveStatus by Id URL : /api/movestatus/:movestatusid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the movestatus. Success Response Code : 200 success Resonse example { msg : MoveStatus deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no movestatus available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"MoveStatus"},{"location":"MoveStatus/index.html#movestatus","text":"This object is used to represent the different statuses of a move. Possible values are \"Draft\", \"Requested\" or \"Confirmed\". Values cannot be added to that table. Create an MoveStatus if MoveStatus does not already exist. URL : /api/movestatus Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intSysCode Integer A fixed integer value used to idenitify the status. Possible values are the following : 100 for \"draft\", 101 for \"requested\", 102 for confirmed and 103 for rejected. strDefaultLabel String A default label for the status. Example values are \"Draft\", \"Requested\", \"Confirmed\" and \"Rejected\". strName String The name of the status. Example values are \"Draft\", \"Requested\", \"Confirmed\" and \"Rejected\". Data example { intSysCode : 23, strDefaultLabel : Draft , strName : Draft } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed }","title":"MoveStatus"},{"location":"MoveStatus/index.html#get-all-movestatus-list","text":"Get the all registered MoveStatus list. URL : /api/movestatus Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : MoveStatus list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intSysCode : 23, strDefaultLabel : Draft , strName : Draft , __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all MoveStatus list"},{"location":"MoveStatus/index.html#update-movestatus","text":"Update the MoveStatus by Id URL : /api/movestatus/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the movestatus. Param Type Description intSysCode Integer A fixed integer value used to idenitify the status. Possible values are the following : 100 for \"draft\", 101 for \"requested\", 102 for confirmed and 103 for rejected. strDefaultLabel String A default label for the status. Example values are \"Draft\", \"Requested\", \"Confirmed\" and \"Rejected\". strName String The name of the status. Example values are \"Draft\", \"Requested\", \"Confirmed\" and \"Rejected\". Data example { intSysCode : 23, strDefaultLabel : Draft , strName : Draft } Success Response Code : 200 success Resonse example { msg : MoveStatus updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update MoveStatus"},{"location":"MoveStatus/index.html#get-single-movestatus-by-id","text":"Get a single MoveStatus by id if current movestatus was registered on it. URL : /api/movestatus/:movestausid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the movestatus. Success Response: Code : 200 success Resonse example { msg : MoveStatus found! , data : { _id : 5f6896897b9884253cf6bdb6 , intSysCode : 23, strDefaultLabel : Draft , strName : Draft , __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If movestatus does not exist on server. Code : 404 Not Found Content example { msg : MoveStatus not found , data :null }","title":"Get Single MoveStatus By Id"},{"location":"MoveStatus/index.html#delete-movestatus","text":"Delete the MoveStatus by Id URL : /api/movestatus/:movestatusid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the movestatus. Success Response Code : 200 success Resonse example { msg : MoveStatus deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no movestatus available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete  MoveStatus"},{"location":"Priority/index.html","text":"Priority This object represents the different levels of priority for a work order, a task or a scheduled maintenance. Base possible values are \"Highest\", \"High\", \"Medium\", \"Low\" or \"Lowest\", but those values can be modified for each tenant. Create an Priority if Priority does not already exist. URL : /api/priority Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description strName String The display name of the priority. For example : \"Low\", \"Medium\" or \"High\". intOrder Integer An integer representing the order of priority 1 to 5, 1 being the highest, 5 being the lowest intSysCode Integer HIGHEST = 1, HIGH = 2, MEDIUM = 3, LOW = 4, LOWEST = 5 intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. strUuid String A unique identifier for the Priority. Data example { strName : Low , intOrder : 1, strColor : strColor , intSysCode : 3 intUpdated : 123, strUuid : strUuid } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed } Get all Priority list Get the all registered Priority list. URL : /api/priority Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Priority list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , strName : Low , intOrder : 1, strColor : strColor , intSysCode : 3 intUpdated : 123, strUuid : strUuid , __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update Priority Update the Priority by Id URL : /api/priority/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the priority. Param Type Description strName String The display name of the priority. For example : \"Low\", \"Medium\" or \"High\". intOrder Integer An integer representing the order of priority 1 to 5, 1 being the highest, 5 being the lowest intSysCode Integer HIGHEST = 1, HIGH = 2, MEDIUM = 3, LOW = 4, LOWEST = 5 intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. strUuid String A unique identifier for the Priority. Data example { strName : Low , intOrder : 1, strColor : strColor , intSysCode : 3 intUpdated : 123, strUuid : strUuid } Success Response Code : 200 success Resonse example { msg : Priority updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Get Single Priority By Id Get a single Priority by id if current priority was registered on it. URL : /api/priority/:priorityid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the priority. Success Response: Code : 200 success Resonse example { msg : Priority found! , data : { _id : 5f6896897b9884253cf6bdb6 , strName : Low , intOrder : 1, strColor : strColor , intSysCode : 3 intUpdated : 123, strUuid : strUuid , __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If priority does not exist on server. Code : 404 Not Found Content example { msg : Priority not found , data :null } Delete Priority Delete the Priority by Id URL : /api/priority/:priorityid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the priority. Success Response Code : 200 success Resonse example { msg : Priority deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no priority available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Priority"},{"location":"Priority/index.html#priority","text":"This object represents the different levels of priority for a work order, a task or a scheduled maintenance. Base possible values are \"Highest\", \"High\", \"Medium\", \"Low\" or \"Lowest\", but those values can be modified for each tenant. Create an Priority if Priority does not already exist. URL : /api/priority Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description strName String The display name of the priority. For example : \"Low\", \"Medium\" or \"High\". intOrder Integer An integer representing the order of priority 1 to 5, 1 being the highest, 5 being the lowest intSysCode Integer HIGHEST = 1, HIGH = 2, MEDIUM = 3, LOW = 4, LOWEST = 5 intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. strUuid String A unique identifier for the Priority. Data example { strName : Low , intOrder : 1, strColor : strColor , intSysCode : 3 intUpdated : 123, strUuid : strUuid } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed }","title":"Priority"},{"location":"Priority/index.html#get-all-priority-list","text":"Get the all registered Priority list. URL : /api/priority Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Priority list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , strName : Low , intOrder : 1, strColor : strColor , intSysCode : 3 intUpdated : 123, strUuid : strUuid , __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all Priority list"},{"location":"Priority/index.html#update-priority","text":"Update the Priority by Id URL : /api/priority/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the priority. Param Type Description strName String The display name of the priority. For example : \"Low\", \"Medium\" or \"High\". intOrder Integer An integer representing the order of priority 1 to 5, 1 being the highest, 5 being the lowest intSysCode Integer HIGHEST = 1, HIGH = 2, MEDIUM = 3, LOW = 4, LOWEST = 5 intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. strUuid String A unique identifier for the Priority. Data example { strName : Low , intOrder : 1, strColor : strColor , intSysCode : 3 intUpdated : 123, strUuid : strUuid } Success Response Code : 200 success Resonse example { msg : Priority updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update Priority"},{"location":"Priority/index.html#get-single-priority-by-id","text":"Get a single Priority by id if current priority was registered on it. URL : /api/priority/:priorityid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the priority. Success Response: Code : 200 success Resonse example { msg : Priority found! , data : { _id : 5f6896897b9884253cf6bdb6 , strName : Low , intOrder : 1, strColor : strColor , intSysCode : 3 intUpdated : 123, strUuid : strUuid , __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If priority does not exist on server. Code : 404 Not Found Content example { msg : Priority not found , data :null }","title":"Get Single Priority By Id"},{"location":"Priority/index.html#delete-priority","text":"Delete the Priority by Id URL : /api/priority/:priorityid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the priority. Success Response Code : 200 success Resonse example { msg : Priority deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no priority available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete  Priority"},{"location":"Project/index.html","text":"Create Project This object is used to represent a project. A project is used to group scheduled maintenances and work orders together. Create a Project if Project does not already exist. URL : /api/project Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Required Type Description intSiteID Yes Integer For multi-sites tenants, the ID of the site the project was created for. A site is an asset itself, so for possible values, please refer to the Asset section. strName Integer Display name of the project. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 1 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : intSiteID is required } { msg : Create failed } Read all Project list Get the all registered Project list. URL : /api/project Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 1 , intSiteID : 2, strName : String __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Get Single Project By Id Get a single Project by id if current Project was registered on it. URL : /api/project/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the project. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 3 , intSiteID : Integer , strName : String } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If AssetCategory does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null } Update Project Update the Project by Id URL : /api/project/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the Project. Param Required Type Description intSiteID Yes Integer For multi-sites tenants, the ID of the site the project was created for. A site is an asset itself, so for possible values, please refer to the Asset section. strName Integer Display name of the project. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed } Delete Project Delete a Project by Id URL : /api/project/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the Project. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Project"},{"location":"Project/index.html#create-project","text":"This object is used to represent a project. A project is used to group scheduled maintenances and work orders together. Create a Project if Project does not already exist. URL : /api/project Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Required Type Description intSiteID Yes Integer For multi-sites tenants, the ID of the site the project was created for. A site is an asset itself, so for possible values, please refer to the Asset section. strName Integer Display name of the project. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 1 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : intSiteID is required } { msg : Create failed }","title":"Create Project"},{"location":"Project/index.html#read-all-project-list","text":"Get the all registered Project list. URL : /api/project Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 1 , intSiteID : 2, strName : String __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Read all Project list"},{"location":"Project/index.html#get-single-project-by-id","text":"Get a single Project by id if current Project was registered on it. URL : /api/project/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the project. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 3 , intSiteID : Integer , strName : String } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If AssetCategory does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Get Single Project By Id"},{"location":"Project/index.html#update-project","text":"Update the Project by Id URL : /api/project/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the Project. Param Required Type Description intSiteID Yes Integer For multi-sites tenants, the ID of the site the project was created for. A site is an asset itself, so for possible values, please refer to the Asset section. strName Integer Display name of the project. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Update Project"},{"location":"Project/index.html#delete-project","text":"Delete a Project by Id URL : /api/project/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the Project. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete Project"},{"location":"PurchaseOrder/index.html","text":"Create PurchaseOrder A PurchaseOrder represents a Maintenance job that is to be done and executed by the assigned user. It contains information about the PurchaseOrder Maintenance Type, Date created, Priority level, Site it resides in, Asset(s) involved, and assigned User. See the MaintennaceType, SheduledMaintenaceUser, SheduledMaintenancePart, and PurchaseOrderAsset objects for more details and information. You can have multiple PurchaseOrder associated in your CMMS. Create a PurchaseOrder if PurchaseOrder does not already exist. URL : /api/purchaseorder Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description dtmDateCreated Date A date that represents when the purchase order was created. dtmDateExpectedDelivery Date A date that represents when the purchase order is expected to be delivered. dtmDateSubmitted Date A date that represents when the purchase order was submitted. intBillingTermID Integer An integer that uniquely defines a billing term for the purchase order. intChargeDepartmentID Integer An integer that uniquely defines the Charge Department. Please refer to ChargeDepartment intCode Integer An integer that represents the code of the Purchase Order object e.g. For purchase order PO#33, code = 33 intCreatedByUserID Integer An integer that uniquely defines the user who created the purchase order record. Please refer to User intPurchaseOrderStatusID Integer An integer that uniquely defines the purchase order current status. Please refer to PurchaseOrderStatus. intSendToSupplierMethod Integer The sending method of the purchase order item. The possible values are 0 for SEND_TO_SUPPLIER_BY_EMAIL, 1 for SEND_TO_SUPPLIER_BY_FAX, 2 for SEND_TO_SUPPLIER_BY_MAIL and 3 for SEND_TO_SUPPLIER_BY_SUPPLIER_WEBSITE intSiteID Integer The ID of the site where the purchase order will be shipped. A site is an asset itself, so for possible values, please refer to the Asset intSupplierID Integer The ID of the business that fulfills the purchase order. Please refer to Business intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. dtmDateLastUpdated Date A date that represent when purchase order was last updated. dtmDateReceived Date The date the purchase order was received. dtmDateRequiredBy Date The date the purchase order was required. intAccountID integer ID of the account that is associated with the purchase order. intAssetID integer ID of the asset/site associated with the purchase order. intBillToCountryID integer ID of the Country of the facility that is to be billed for the purchase order. intBillToID integer ID of the facility to be billed for the purchase order. See Asset intLastUpdatedUserID integer ID of the user that performed the last update on the purchase order. intPurchaseCurrencyID integer ID of the currency in which the purchase order financial transaction is to be performed. intShipToCountryID integer ID of the Country to which the purchase order will be shipped. intShipToID integer ID of the facility that will receive shipment of purchase order. See Asset intSupplierCountryID integer ID of the Country of the supplier. intWorkOrderID integer ID of WorkOrder that is associated with the purchase order. strBillToAddress string Address of the facility that is to be billed for the purchase order. strBillToCity string City information of the facility that is to be billed for the purchase order. strBillToPostalCode string Postal code information of the facility that is to be billed for the purchase order. strBillToProvince string Province of the facility that is to be billed for the purchase order. strPurchaseOrderReference string Reference number/information for the purchase order. strShipToAddress string Address of the facility that is to receive the purchase order items. strShipToCity string City of the facility that is to receive the purchase order items. strShipToPostalCode string Postal code of the facility that is to receive the purchase order items. strShipToProvince string Province of the facility that is to receive the purchase order items. strSupplierAddress string Address of the supplier of the purchase order items. strSupplierCity string City of the supplier of the purchase order items. strSupplierPostalCode string Postal code of the supplier of the purchase order items. strSupplierProvince string Province of the supplier of the purchase order items. intLocationID integer The id of the location for the PurchaseOrder (Used in conjunction with the Asset object). Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed } Get all PurchaseOrder list Get the all registered PurchaseOrder list. URL : /api/purchaseorder Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 5 , dtmDateCreated :2020-11-09T07:35:22.052+00:00, dtmDateExpectedDelivery : Date , dtmDateSubmitted : Date , intBillingTermID : Integer , intChargeDepartmentID :4, intCode : Integer , intCreatedByUserID :33, intPurchaseOrderStatusID : Integer , intSendToSupplierMethod :1, intSiteID : Integer , intSupplierID :33, intUpdated : Integer , dtmDateLastUpdated : Date , dtmDateReceived :2020-11-09T07:35:22.052+00:00, dtmDateRequiredBy :2020-11-09T07:35:22.052+00:00, intAccountID :33, intAssetID :33, intBillToCountryID :33, intBillToID :33, intLastUpdatedUserID :33, intPurchaseCurrencyID :33, intShipToCountryID :33, intShipToID :33, intSupplierCountryID :33, intWorkOrderID :33, strBillToAddress : address1 , strBillToCity : city_name , strBillToPostalCode :string, strBillToProvince :string, strPurchaseOrderReference :string, strShipToAddress :string, strShipToCity :string, strShipToPostalCode : postcode , strShipToProvince :string, strSupplierAddress :string, strSupplierCity :string, strSupplierPostalCode :string, strSupplierProvince :string, intLocationID : Integer , __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Get Single PurchaseOrder By Id Get a single PurchaseOrder by id if current PurchaseOrder was registered on it. URL : /api/purchaseorder/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the PurchaseOrder. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 5 , dtmDateCreated :2020-11-09T07:35:22.052+00:00, dtmDateExpectedDelivery : Date , dtmDateSubmitted : Date , intBillingTermID : Integer , intChargeDepartmentID :4, intCode : Integer , intCreatedByUserID :33, intPurchaseOrderStatusID : Integer , intSendToSupplierMethod :1, intSiteID : Integer , intSupplierID :33, intUpdated : Integer , dtmDateLastUpdated : Date , dtmDateReceived :2020-11-09T07:35:22.052+00:00, dtmDateRequiredBy :2020-11-09T07:35:22.052+00:00, intAccountID :33, intAssetID :33, intBillToCountryID :33, intBillToID :33, intLastUpdatedUserID :33, intPurchaseCurrencyID :33, intShipToCountryID :33, intShipToID :33, intSupplierCountryID :33, intWorkOrderID :33, strBillToAddress : address1 , strBillToCity : city_name , strBillToPostalCode :string, strBillToProvince :string, strPurchaseOrderReference :string, strShipToAddress :string, strShipToCity :string, strShipToPostalCode : postcode , strShipToProvince :string, strSupplierAddress :string, strSupplierCity :string, strSupplierPostalCode :string, strSupplierProvince :string, intLocationID : Integer } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If PurchaseOrder does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null } Update PurchaseOrder Update the PurchaseOrder by Id URL : /api/purchaseorder/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the PurchaseOrder. Param Type Description dtmDateCreated Date A date that represents when the purchase order was created. dtmDateExpectedDelivery Date A date that represents when the purchase order is expected to be delivered. dtmDateSubmitted Date A date that represents when the purchase order was submitted. intBillingTermID Integer An integer that uniquely defines a billing term for the purchase order. intChargeDepartmentID Integer An integer that uniquely defines the Charge Department. Please refer to ChargeDepartment intCode Integer An integer that represents the code of the Purchase Order object e.g. For purchase order PO#33, code = 33 intCreatedByUserID Integer An integer that uniquely defines the user who created the purchase order record. Please refer to User intPurchaseOrderStatusID Integer An integer that uniquely defines the purchase order current status. Please refer to PurchaseOrderStatus. intSendToSupplierMethod Integer The sending method of the purchase order item. The possible values are 0 for SEND_TO_SUPPLIER_BY_EMAIL, 1 for SEND_TO_SUPPLIER_BY_FAX, 2 for SEND_TO_SUPPLIER_BY_MAIL and 3 for SEND_TO_SUPPLIER_BY_SUPPLIER_WEBSITE intSiteID Integer The ID of the site where the purchase order will be shipped. A site is an asset itself, so for possible values, please refer to the Asset intSupplierID Integer The ID of the business that fulfills the purchase order. Please refer to Business intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. dtmDateLastUpdated Date A date that represent when purchase order was last updated. dtmDateReceived Date The date the purchase order was received. dtmDateRequiredBy Date The date the purchase order was required. intAccountID integer ID of the account that is associated with the purchase order. intAssetID integer ID of the asset/site associated with the purchase order. intBillToCountryID integer ID of the Country of the facility that is to be billed for the purchase order. intBillToID integer ID of the facility to be billed for the purchase order. See Asset intLastUpdatedUserID integer ID of the user that performed the last update on the purchase order. intPurchaseCurrencyID integer ID of the currency in which the purchase order financial transaction is to be performed. intShipToCountryID integer ID of the Country to which the purchase order will be shipped. intShipToID integer ID of the facility that will receive shipment of purchase order. See Asset intSupplierCountryID integer ID of the Country of the supplier. intWorkOrderID integer ID of WorkOrder that is associated with the purchase order. strBillToAddress string Address of the facility that is to be billed for the purchase order. strBillToCity string City information of the facility that is to be billed for the purchase order. strBillToPostalCode string Postal code information of the facility that is to be billed for the purchase order. strBillToProvince string Province of the facility that is to be billed for the purchase order. strPurchaseOrderReference string Reference number/information for the purchase order. strShipToAddress string Address of the facility that is to receive the purchase order items. strShipToCity string City of the facility that is to receive the purchase order items. strShipToPostalCode string Postal code of the facility that is to receive the purchase order items. strShipToProvince string Province of the facility that is to receive the purchase order items. strSupplierAddress string Address of the supplier of the purchase order items. strSupplierCity string City of the supplier of the purchase order items. strSupplierPostalCode string Postal code of the supplier of the purchase order items. strSupplierProvince string Province of the supplier of the purchase order items. intLocationID integer The id of the location for the PurchaseOrder (Used in conjunction with the Asset object). Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed } Delete PurchaseOrder Delete a PurchaseOrder by Id URL : /api/purchaseorder/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the PurchaseOrder. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses : Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"PurchaseOrder"},{"location":"PurchaseOrder/index.html#create-purchaseorder","text":"A PurchaseOrder represents a Maintenance job that is to be done and executed by the assigned user. It contains information about the PurchaseOrder Maintenance Type, Date created, Priority level, Site it resides in, Asset(s) involved, and assigned User. See the MaintennaceType, SheduledMaintenaceUser, SheduledMaintenancePart, and PurchaseOrderAsset objects for more details and information. You can have multiple PurchaseOrder associated in your CMMS. Create a PurchaseOrder if PurchaseOrder does not already exist. URL : /api/purchaseorder Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description dtmDateCreated Date A date that represents when the purchase order was created. dtmDateExpectedDelivery Date A date that represents when the purchase order is expected to be delivered. dtmDateSubmitted Date A date that represents when the purchase order was submitted. intBillingTermID Integer An integer that uniquely defines a billing term for the purchase order. intChargeDepartmentID Integer An integer that uniquely defines the Charge Department. Please refer to ChargeDepartment intCode Integer An integer that represents the code of the Purchase Order object e.g. For purchase order PO#33, code = 33 intCreatedByUserID Integer An integer that uniquely defines the user who created the purchase order record. Please refer to User intPurchaseOrderStatusID Integer An integer that uniquely defines the purchase order current status. Please refer to PurchaseOrderStatus. intSendToSupplierMethod Integer The sending method of the purchase order item. The possible values are 0 for SEND_TO_SUPPLIER_BY_EMAIL, 1 for SEND_TO_SUPPLIER_BY_FAX, 2 for SEND_TO_SUPPLIER_BY_MAIL and 3 for SEND_TO_SUPPLIER_BY_SUPPLIER_WEBSITE intSiteID Integer The ID of the site where the purchase order will be shipped. A site is an asset itself, so for possible values, please refer to the Asset intSupplierID Integer The ID of the business that fulfills the purchase order. Please refer to Business intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. dtmDateLastUpdated Date A date that represent when purchase order was last updated. dtmDateReceived Date The date the purchase order was received. dtmDateRequiredBy Date The date the purchase order was required. intAccountID integer ID of the account that is associated with the purchase order. intAssetID integer ID of the asset/site associated with the purchase order. intBillToCountryID integer ID of the Country of the facility that is to be billed for the purchase order. intBillToID integer ID of the facility to be billed for the purchase order. See Asset intLastUpdatedUserID integer ID of the user that performed the last update on the purchase order. intPurchaseCurrencyID integer ID of the currency in which the purchase order financial transaction is to be performed. intShipToCountryID integer ID of the Country to which the purchase order will be shipped. intShipToID integer ID of the facility that will receive shipment of purchase order. See Asset intSupplierCountryID integer ID of the Country of the supplier. intWorkOrderID integer ID of WorkOrder that is associated with the purchase order. strBillToAddress string Address of the facility that is to be billed for the purchase order. strBillToCity string City information of the facility that is to be billed for the purchase order. strBillToPostalCode string Postal code information of the facility that is to be billed for the purchase order. strBillToProvince string Province of the facility that is to be billed for the purchase order. strPurchaseOrderReference string Reference number/information for the purchase order. strShipToAddress string Address of the facility that is to receive the purchase order items. strShipToCity string City of the facility that is to receive the purchase order items. strShipToPostalCode string Postal code of the facility that is to receive the purchase order items. strShipToProvince string Province of the facility that is to receive the purchase order items. strSupplierAddress string Address of the supplier of the purchase order items. strSupplierCity string City of the supplier of the purchase order items. strSupplierPostalCode string Postal code of the supplier of the purchase order items. strSupplierProvince string Province of the supplier of the purchase order items. intLocationID integer The id of the location for the PurchaseOrder (Used in conjunction with the Asset object). Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed }","title":"Create PurchaseOrder"},{"location":"PurchaseOrder/index.html#get-all-purchaseorder-list","text":"Get the all registered PurchaseOrder list. URL : /api/purchaseorder Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 5 , dtmDateCreated :2020-11-09T07:35:22.052+00:00, dtmDateExpectedDelivery : Date , dtmDateSubmitted : Date , intBillingTermID : Integer , intChargeDepartmentID :4, intCode : Integer , intCreatedByUserID :33, intPurchaseOrderStatusID : Integer , intSendToSupplierMethod :1, intSiteID : Integer , intSupplierID :33, intUpdated : Integer , dtmDateLastUpdated : Date , dtmDateReceived :2020-11-09T07:35:22.052+00:00, dtmDateRequiredBy :2020-11-09T07:35:22.052+00:00, intAccountID :33, intAssetID :33, intBillToCountryID :33, intBillToID :33, intLastUpdatedUserID :33, intPurchaseCurrencyID :33, intShipToCountryID :33, intShipToID :33, intSupplierCountryID :33, intWorkOrderID :33, strBillToAddress : address1 , strBillToCity : city_name , strBillToPostalCode :string, strBillToProvince :string, strPurchaseOrderReference :string, strShipToAddress :string, strShipToCity :string, strShipToPostalCode : postcode , strShipToProvince :string, strSupplierAddress :string, strSupplierCity :string, strSupplierPostalCode :string, strSupplierProvince :string, intLocationID : Integer , __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all PurchaseOrder list"},{"location":"PurchaseOrder/index.html#get-single-purchaseorder-by-id","text":"Get a single PurchaseOrder by id if current PurchaseOrder was registered on it. URL : /api/purchaseorder/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the PurchaseOrder. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 5 , dtmDateCreated :2020-11-09T07:35:22.052+00:00, dtmDateExpectedDelivery : Date , dtmDateSubmitted : Date , intBillingTermID : Integer , intChargeDepartmentID :4, intCode : Integer , intCreatedByUserID :33, intPurchaseOrderStatusID : Integer , intSendToSupplierMethod :1, intSiteID : Integer , intSupplierID :33, intUpdated : Integer , dtmDateLastUpdated : Date , dtmDateReceived :2020-11-09T07:35:22.052+00:00, dtmDateRequiredBy :2020-11-09T07:35:22.052+00:00, intAccountID :33, intAssetID :33, intBillToCountryID :33, intBillToID :33, intLastUpdatedUserID :33, intPurchaseCurrencyID :33, intShipToCountryID :33, intShipToID :33, intSupplierCountryID :33, intWorkOrderID :33, strBillToAddress : address1 , strBillToCity : city_name , strBillToPostalCode :string, strBillToProvince :string, strPurchaseOrderReference :string, strShipToAddress :string, strShipToCity :string, strShipToPostalCode : postcode , strShipToProvince :string, strSupplierAddress :string, strSupplierCity :string, strSupplierPostalCode :string, strSupplierProvince :string, intLocationID : Integer } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If PurchaseOrder does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Get Single PurchaseOrder By Id"},{"location":"PurchaseOrder/index.html#update-purchaseorder","text":"Update the PurchaseOrder by Id URL : /api/purchaseorder/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the PurchaseOrder. Param Type Description dtmDateCreated Date A date that represents when the purchase order was created. dtmDateExpectedDelivery Date A date that represents when the purchase order is expected to be delivered. dtmDateSubmitted Date A date that represents when the purchase order was submitted. intBillingTermID Integer An integer that uniquely defines a billing term for the purchase order. intChargeDepartmentID Integer An integer that uniquely defines the Charge Department. Please refer to ChargeDepartment intCode Integer An integer that represents the code of the Purchase Order object e.g. For purchase order PO#33, code = 33 intCreatedByUserID Integer An integer that uniquely defines the user who created the purchase order record. Please refer to User intPurchaseOrderStatusID Integer An integer that uniquely defines the purchase order current status. Please refer to PurchaseOrderStatus. intSendToSupplierMethod Integer The sending method of the purchase order item. The possible values are 0 for SEND_TO_SUPPLIER_BY_EMAIL, 1 for SEND_TO_SUPPLIER_BY_FAX, 2 for SEND_TO_SUPPLIER_BY_MAIL and 3 for SEND_TO_SUPPLIER_BY_SUPPLIER_WEBSITE intSiteID Integer The ID of the site where the purchase order will be shipped. A site is an asset itself, so for possible values, please refer to the Asset intSupplierID Integer The ID of the business that fulfills the purchase order. Please refer to Business intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. dtmDateLastUpdated Date A date that represent when purchase order was last updated. dtmDateReceived Date The date the purchase order was received. dtmDateRequiredBy Date The date the purchase order was required. intAccountID integer ID of the account that is associated with the purchase order. intAssetID integer ID of the asset/site associated with the purchase order. intBillToCountryID integer ID of the Country of the facility that is to be billed for the purchase order. intBillToID integer ID of the facility to be billed for the purchase order. See Asset intLastUpdatedUserID integer ID of the user that performed the last update on the purchase order. intPurchaseCurrencyID integer ID of the currency in which the purchase order financial transaction is to be performed. intShipToCountryID integer ID of the Country to which the purchase order will be shipped. intShipToID integer ID of the facility that will receive shipment of purchase order. See Asset intSupplierCountryID integer ID of the Country of the supplier. intWorkOrderID integer ID of WorkOrder that is associated with the purchase order. strBillToAddress string Address of the facility that is to be billed for the purchase order. strBillToCity string City information of the facility that is to be billed for the purchase order. strBillToPostalCode string Postal code information of the facility that is to be billed for the purchase order. strBillToProvince string Province of the facility that is to be billed for the purchase order. strPurchaseOrderReference string Reference number/information for the purchase order. strShipToAddress string Address of the facility that is to receive the purchase order items. strShipToCity string City of the facility that is to receive the purchase order items. strShipToPostalCode string Postal code of the facility that is to receive the purchase order items. strShipToProvince string Province of the facility that is to receive the purchase order items. strSupplierAddress string Address of the supplier of the purchase order items. strSupplierCity string City of the supplier of the purchase order items. strSupplierPostalCode string Postal code of the supplier of the purchase order items. strSupplierProvince string Province of the supplier of the purchase order items. intLocationID integer The id of the location for the PurchaseOrder (Used in conjunction with the Asset object). Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Update PurchaseOrder"},{"location":"PurchaseOrder/index.html#delete-purchaseorder","text":"Delete a PurchaseOrder by Id URL : /api/purchaseorder/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the PurchaseOrder. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses : Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete PurchaseOrder"},{"location":"PurchaseOrderLineItem/index.html","text":"Create PurchaseOrderLineItem A PurchaseOrderLineItem represents a Maintenance job that is to be done and executed by the assigned user. It contains information about the PurchaseOrderLineItem Maintenance Type, Date created, Priority level, Site it resides in, Asset(s) involved, and assigned User. See the MaintennaceType, SheduledMaintenaceUser, SheduledMaintenancePart, and PurchaseOrderLineItemAsset objects for more details and information. You can have multiple PurchaseOrderLineItem associated in your CMMS. Create a PurchaseOrderLineItem if PurchaseOrderLineItem does not already exist. URL : /api/purchaseorderlineitem Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description bolAddedDirectlyToPurchaseOrder boolean A boolean that indicates if the purchase order line item is added directly to the purchase order. If set to false, it means it was added through the Purchase Planning Board. bolProductionEquipmentDownWhileOnOrder boolean A boolean that indicates if the production equipment is down while on order or not. This will determine if the purchase of the item is critical or not. dblRemoteOrgUnitPrice double The original unit price. dblTaxRate double The tax rate applied to the purchase order line item. dblUnitPrice double The price for a unit of the item. dtmDateCreated date A date that represents when the item was created. dtmRequiredByDate date The item purchased will be required by this date. intAccountID integer An integer uniquely identifying the account used to purchase the item. Please refer to Account intAssetID integer An integer that uniquely identifies the asset linked to the purchased item. Please refer to Asset intChargeDepartmentID integer An integer that uniquely defines the Charge Department intPurchaseOrderID integer The ID of the purchase order which the purchase order line item is part of. intRequestedByUserID integer The ID of the user who requested the purchase order. Please refer to User. intShipToLocationID integer The reference to the location where the purchased item will be shipped. Please refer to Location intSiteID integer The ID of the site where the purchase order will be shipped. A site is an asset itself, so for possible values, please refer to the Asset intSourceAssetID integer The ID of the asset that represents the source asset of the purchase order item. Please refer to Asset intSourceWorkOrderID integer The ID of the source work order to which the purchase order line item is related. Please refer to WorkOrder intStockHistoryID integer The ID of the stock history record related to the purchase order item. intStockID integer The ID of the stock related to the purchase order item. Please refer to Stock intSupplierID integer The ID of the business that fulfills the purchased order item. Please refer to Business qtyOnOrder integer The quantity requested on the purchase order line item. qtyRecieved integer The quantity received on the purchase order line item. strBusinessAssetNumber string The description for the business asset related to the purchase order line item. strDescription string As string that represents the description on the Purchase order line item. intUpdated integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed } Get all PurchaseOrderLineItem list Get the all registered PurchaseOrderLineItem list. URL : /api/purchaseorderlineitem Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 5 , intUserID :Integer, bolAddedDirectlyToPurchaseOrder :boolean, dblRemoteOrgUnitPrice :double, dblTaxRate :2.8, dblUnitPrice :45, dtmDateCreated :date, dtmRequiredByDate :2020-11-09T07:35:22.052+00:00, intAccountID :Integer, intAssetID :2, intChargeDepartmentID :3, intPurchaseOrderID :4, intRequestedByUserID :55, intShipToLocationID :23, intSiteID :345, intSourceAssetID :5, intSourceWorkOrderID :1, intStockHistoryID :23, intStockID :44, intSupplierID :54, qtyOnOrder :21, qtyRecieved :22, strBusinessAssetNumber :string, strDescription : this is description... , intUpdated :Integer, __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Get Single PurchaseOrderLineItem By Id Get a single PurchaseOrderLineItem by id if current PurchaseOrderLineItem was registered on it. URL : /api/purchaseorderlineitem/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the PurchaseOrderLineItem. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 5 , intUserID :Integer, bolAddedDirectlyToPurchaseOrder :boolean, dblRemoteOrgUnitPrice :double, dblTaxRate :2.8, dblUnitPrice :45, dtmDateCreated :date, dtmRequiredByDate :2020-11-09T07:35:22.052+00:00, intAccountID :Integer, intAssetID :2, intChargeDepartmentID :3, intPurchaseOrderID :4, intRequestedByUserID :55, intShipToLocationID :23, intSiteID :345, intSourceAssetID :5, intSourceWorkOrderID :1, intStockHistoryID :23, intStockID :44, intSupplierID :54, qtyOnOrder :21, qtyRecieved :22, strBusinessAssetNumber :string, strDescription : this is description... , intUpdated :Integer } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If PurchaseOrderLineItem does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null } Update PurchaseOrderLineItem Update the PurchaseOrderLineItem by Id URL : /api/purchaseorderlineitem/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the PurchaseOrderLineItem. Param Type Description bolAddedDirectlyToPurchaseOrder boolean A boolean that indicates if the purchase order line item is added directly to the purchase order. If set to false, it means it was added through the Purchase Planning Board. bolProductionEquipmentDownWhileOnOrder boolean A boolean that indicates if the production equipment is down while on order or not. This will determine if the purchase of the item is critical or not. dblRemoteOrgUnitPrice double The original unit price. dblTaxRate double The tax rate applied to the purchase order line item. dblUnitPrice double The price for a unit of the item. dtmDateCreated date A date that represents when the item was created. dtmRequiredByDate date The item purchased will be required by this date. intAccountID integer An integer uniquely identifying the account used to purchase the item. Please refer to Account intAssetID integer An integer that uniquely identifies the asset linked to the purchased item. Please refer to Asset intChargeDepartmentID integer An integer that uniquely defines the Charge Department intPurchaseOrderID integer The ID of the purchase order which the purchase order line item is part of. intRequestedByUserID integer The ID of the user who requested the purchase order. Please refer to User. intShipToLocationID integer The reference to the location where the purchased item will be shipped. Please refer to Location intSiteID integer The ID of the site where the purchase order will be shipped. A site is an asset itself, so for possible values, please refer to the Asset intSourceAssetID integer The ID of the asset that represents the source asset of the purchase order item. Please refer to Asset intSourceWorkOrderID integer The ID of the source work order to which the purchase order line item is related. Please refer to WorkOrder intStockHistoryID integer The ID of the stock history record related to the purchase order item. intStockID integer The ID of the stock related to the purchase order item. Please refer to Stock intSupplierID integer The ID of the business that fulfills the purchased order item. Please refer to Business qtyOnOrder integer The quantity requested on the purchase order line item. qtyRecieved integer The quantity received on the purchase order line item. strBusinessAssetNumber string The description for the business asset related to the purchase order line item. strDescription string As string that represents the description on the Purchase order line item. intUpdated integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed } Delete PurchaseOrderLineItem Delete a PurchaseOrderLineItem by Id URL : /api/purchaseorderlineitem/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the PurchaseOrderLineItem. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses : Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"PurchaseOrderLineItem"},{"location":"PurchaseOrderLineItem/index.html#create-purchaseorderlineitem","text":"A PurchaseOrderLineItem represents a Maintenance job that is to be done and executed by the assigned user. It contains information about the PurchaseOrderLineItem Maintenance Type, Date created, Priority level, Site it resides in, Asset(s) involved, and assigned User. See the MaintennaceType, SheduledMaintenaceUser, SheduledMaintenancePart, and PurchaseOrderLineItemAsset objects for more details and information. You can have multiple PurchaseOrderLineItem associated in your CMMS. Create a PurchaseOrderLineItem if PurchaseOrderLineItem does not already exist. URL : /api/purchaseorderlineitem Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description bolAddedDirectlyToPurchaseOrder boolean A boolean that indicates if the purchase order line item is added directly to the purchase order. If set to false, it means it was added through the Purchase Planning Board. bolProductionEquipmentDownWhileOnOrder boolean A boolean that indicates if the production equipment is down while on order or not. This will determine if the purchase of the item is critical or not. dblRemoteOrgUnitPrice double The original unit price. dblTaxRate double The tax rate applied to the purchase order line item. dblUnitPrice double The price for a unit of the item. dtmDateCreated date A date that represents when the item was created. dtmRequiredByDate date The item purchased will be required by this date. intAccountID integer An integer uniquely identifying the account used to purchase the item. Please refer to Account intAssetID integer An integer that uniquely identifies the asset linked to the purchased item. Please refer to Asset intChargeDepartmentID integer An integer that uniquely defines the Charge Department intPurchaseOrderID integer The ID of the purchase order which the purchase order line item is part of. intRequestedByUserID integer The ID of the user who requested the purchase order. Please refer to User. intShipToLocationID integer The reference to the location where the purchased item will be shipped. Please refer to Location intSiteID integer The ID of the site where the purchase order will be shipped. A site is an asset itself, so for possible values, please refer to the Asset intSourceAssetID integer The ID of the asset that represents the source asset of the purchase order item. Please refer to Asset intSourceWorkOrderID integer The ID of the source work order to which the purchase order line item is related. Please refer to WorkOrder intStockHistoryID integer The ID of the stock history record related to the purchase order item. intStockID integer The ID of the stock related to the purchase order item. Please refer to Stock intSupplierID integer The ID of the business that fulfills the purchased order item. Please refer to Business qtyOnOrder integer The quantity requested on the purchase order line item. qtyRecieved integer The quantity received on the purchase order line item. strBusinessAssetNumber string The description for the business asset related to the purchase order line item. strDescription string As string that represents the description on the Purchase order line item. intUpdated integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed }","title":"Create PurchaseOrderLineItem"},{"location":"PurchaseOrderLineItem/index.html#get-all-purchaseorderlineitem-list","text":"Get the all registered PurchaseOrderLineItem list. URL : /api/purchaseorderlineitem Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 5 , intUserID :Integer, bolAddedDirectlyToPurchaseOrder :boolean, dblRemoteOrgUnitPrice :double, dblTaxRate :2.8, dblUnitPrice :45, dtmDateCreated :date, dtmRequiredByDate :2020-11-09T07:35:22.052+00:00, intAccountID :Integer, intAssetID :2, intChargeDepartmentID :3, intPurchaseOrderID :4, intRequestedByUserID :55, intShipToLocationID :23, intSiteID :345, intSourceAssetID :5, intSourceWorkOrderID :1, intStockHistoryID :23, intStockID :44, intSupplierID :54, qtyOnOrder :21, qtyRecieved :22, strBusinessAssetNumber :string, strDescription : this is description... , intUpdated :Integer, __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all PurchaseOrderLineItem list"},{"location":"PurchaseOrderLineItem/index.html#get-single-purchaseorderlineitem-by-id","text":"Get a single PurchaseOrderLineItem by id if current PurchaseOrderLineItem was registered on it. URL : /api/purchaseorderlineitem/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the PurchaseOrderLineItem. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 5 , intUserID :Integer, bolAddedDirectlyToPurchaseOrder :boolean, dblRemoteOrgUnitPrice :double, dblTaxRate :2.8, dblUnitPrice :45, dtmDateCreated :date, dtmRequiredByDate :2020-11-09T07:35:22.052+00:00, intAccountID :Integer, intAssetID :2, intChargeDepartmentID :3, intPurchaseOrderID :4, intRequestedByUserID :55, intShipToLocationID :23, intSiteID :345, intSourceAssetID :5, intSourceWorkOrderID :1, intStockHistoryID :23, intStockID :44, intSupplierID :54, qtyOnOrder :21, qtyRecieved :22, strBusinessAssetNumber :string, strDescription : this is description... , intUpdated :Integer } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If PurchaseOrderLineItem does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Get Single PurchaseOrderLineItem By Id"},{"location":"PurchaseOrderLineItem/index.html#update-purchaseorderlineitem","text":"Update the PurchaseOrderLineItem by Id URL : /api/purchaseorderlineitem/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the PurchaseOrderLineItem. Param Type Description bolAddedDirectlyToPurchaseOrder boolean A boolean that indicates if the purchase order line item is added directly to the purchase order. If set to false, it means it was added through the Purchase Planning Board. bolProductionEquipmentDownWhileOnOrder boolean A boolean that indicates if the production equipment is down while on order or not. This will determine if the purchase of the item is critical or not. dblRemoteOrgUnitPrice double The original unit price. dblTaxRate double The tax rate applied to the purchase order line item. dblUnitPrice double The price for a unit of the item. dtmDateCreated date A date that represents when the item was created. dtmRequiredByDate date The item purchased will be required by this date. intAccountID integer An integer uniquely identifying the account used to purchase the item. Please refer to Account intAssetID integer An integer that uniquely identifies the asset linked to the purchased item. Please refer to Asset intChargeDepartmentID integer An integer that uniquely defines the Charge Department intPurchaseOrderID integer The ID of the purchase order which the purchase order line item is part of. intRequestedByUserID integer The ID of the user who requested the purchase order. Please refer to User. intShipToLocationID integer The reference to the location where the purchased item will be shipped. Please refer to Location intSiteID integer The ID of the site where the purchase order will be shipped. A site is an asset itself, so for possible values, please refer to the Asset intSourceAssetID integer The ID of the asset that represents the source asset of the purchase order item. Please refer to Asset intSourceWorkOrderID integer The ID of the source work order to which the purchase order line item is related. Please refer to WorkOrder intStockHistoryID integer The ID of the stock history record related to the purchase order item. intStockID integer The ID of the stock related to the purchase order item. Please refer to Stock intSupplierID integer The ID of the business that fulfills the purchased order item. Please refer to Business qtyOnOrder integer The quantity requested on the purchase order line item. qtyRecieved integer The quantity received on the purchase order line item. strBusinessAssetNumber string The description for the business asset related to the purchase order line item. strDescription string As string that represents the description on the Purchase order line item. intUpdated integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Update PurchaseOrderLineItem"},{"location":"PurchaseOrderLineItem/index.html#delete-purchaseorderlineitem","text":"Delete a PurchaseOrderLineItem by Id URL : /api/purchaseorderlineitem/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the PurchaseOrderLineItem. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses : Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete PurchaseOrderLineItem"},{"location":"PurchaseOrderStatus/index.html","text":"Create PurchaseOrderStatus A PurchaseOrderStatus represents a Maintenance job that is to be done and executed by the assigned user. It contains information about the PurchaseOrderStatus Maintenance Type, Date created, Priority level, Site it resides in, Asset(s) involved, and assigned User. See the MaintennaceType, SheduledMaintenaceUser, SheduledMaintenancePart, and PurchaseOrderStatusAsset objects for more details and information. You can have multiple PurchaseOrderStatus associated in your CMMS. Create a PurchaseOrderStatus if PurchaseOrderStatus does not already exist. URL : /api/purchaseorderstatus Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intSysCode Integer The system codes are used to identify statuses with a special meaning for the CMMS. Possible values are 1 for Draft, 3 for Waiting For Approval, 4 for Approved, 5 for On order, 6 for Order Fulfilled, 7 for Order Not Fulfilled and 8 for Cancelled. intControlID Integer The control ID identifies statuses that can be added by the system or the users to introduce new behavior for the system statuses. The Possible values are 100 for Draft, 101 for Waiting For Approval, 102 for Approved, 103 for On order, 104 for Order Fulfilled, 104 for Order Not Fulfilled and 104 for Cancelled. strDefaultLabel string Default labels to be displayed for the possible statuses. For example, \"Draft\", \"Waiting For Approval\", \"Approved\", \"On order\", \"Order Fulfilled\", \"Order Not Fulfilled\" and \"Cancelled\". strName string The names of the purchase order statuses. Possible values are \"Draft\", \"Waiting For Approval\", \"Approved\", \"On order\", \"Order Fulfilled\", \"Order Not Fulfilled\" and \"Cancelled\". intUpdated integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed } Get all PurchaseOrderStatus list Get the all registered PurchaseOrderStatus list. URL : /api/purchaseorderstatus Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 5 , intSysCode : Integer , intControlID :4, strDefaultLabel :string, strName : name wirte , intUpdated :3, __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Get Single PurchaseOrderStatus By Id Get a single PurchaseOrderStatus by id if current PurchaseOrderStatus was registered on it. URL : /api/purchaseorderstatus/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the PurchaseOrderStatus. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 5 , intSysCode : Integer , intControlID :4, strDefaultLabel :string, strName : name wirte , intUpdated :3 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If PurchaseOrderStatus does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null } Update PurchaseOrderStatus Update the PurchaseOrderStatus by Id URL : /api/purchaseorderstatus/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the PurchaseOrderStatus. Param Type Description intSysCode Integer The system codes are used to identify statuses with a special meaning for the CMMS. Possible values are 1 for Draft, 3 for Waiting For Approval, 4 for Approved, 5 for On order, 6 for Order Fulfilled, 7 for Order Not Fulfilled and 8 for Cancelled. intControlID Integer The control ID identifies statuses that can be added by the system or the users to introduce new behavior for the system statuses. The Possible values are 100 for Draft, 101 for Waiting For Approval, 102 for Approved, 103 for On order, 104 for Order Fulfilled, 104 for Order Not Fulfilled and 104 for Cancelled. strDefaultLabel string Default labels to be displayed for the possible statuses. For example, \"Draft\", \"Waiting For Approval\", \"Approved\", \"On order\", \"Order Fulfilled\", \"Order Not Fulfilled\" and \"Cancelled\". strName string The names of the purchase order statuses. Possible values are \"Draft\", \"Waiting For Approval\", \"Approved\", \"On order\", \"Order Fulfilled\", \"Order Not Fulfilled\" and \"Cancelled\". intUpdated integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed } Delete PurchaseOrderStatus Delete a PurchaseOrderStatus by Id URL : /api/purchaseorderstatus/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the PurchaseOrderStatus. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses : Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"PurchaseOrderStatus"},{"location":"PurchaseOrderStatus/index.html#create-purchaseorderstatus","text":"A PurchaseOrderStatus represents a Maintenance job that is to be done and executed by the assigned user. It contains information about the PurchaseOrderStatus Maintenance Type, Date created, Priority level, Site it resides in, Asset(s) involved, and assigned User. See the MaintennaceType, SheduledMaintenaceUser, SheduledMaintenancePart, and PurchaseOrderStatusAsset objects for more details and information. You can have multiple PurchaseOrderStatus associated in your CMMS. Create a PurchaseOrderStatus if PurchaseOrderStatus does not already exist. URL : /api/purchaseorderstatus Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intSysCode Integer The system codes are used to identify statuses with a special meaning for the CMMS. Possible values are 1 for Draft, 3 for Waiting For Approval, 4 for Approved, 5 for On order, 6 for Order Fulfilled, 7 for Order Not Fulfilled and 8 for Cancelled. intControlID Integer The control ID identifies statuses that can be added by the system or the users to introduce new behavior for the system statuses. The Possible values are 100 for Draft, 101 for Waiting For Approval, 102 for Approved, 103 for On order, 104 for Order Fulfilled, 104 for Order Not Fulfilled and 104 for Cancelled. strDefaultLabel string Default labels to be displayed for the possible statuses. For example, \"Draft\", \"Waiting For Approval\", \"Approved\", \"On order\", \"Order Fulfilled\", \"Order Not Fulfilled\" and \"Cancelled\". strName string The names of the purchase order statuses. Possible values are \"Draft\", \"Waiting For Approval\", \"Approved\", \"On order\", \"Order Fulfilled\", \"Order Not Fulfilled\" and \"Cancelled\". intUpdated integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed }","title":"Create PurchaseOrderStatus"},{"location":"PurchaseOrderStatus/index.html#get-all-purchaseorderstatus-list","text":"Get the all registered PurchaseOrderStatus list. URL : /api/purchaseorderstatus Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 5 , intSysCode : Integer , intControlID :4, strDefaultLabel :string, strName : name wirte , intUpdated :3, __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all PurchaseOrderStatus list"},{"location":"PurchaseOrderStatus/index.html#get-single-purchaseorderstatus-by-id","text":"Get a single PurchaseOrderStatus by id if current PurchaseOrderStatus was registered on it. URL : /api/purchaseorderstatus/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the PurchaseOrderStatus. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 5 , intSysCode : Integer , intControlID :4, strDefaultLabel :string, strName : name wirte , intUpdated :3 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If PurchaseOrderStatus does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Get Single PurchaseOrderStatus By Id"},{"location":"PurchaseOrderStatus/index.html#update-purchaseorderstatus","text":"Update the PurchaseOrderStatus by Id URL : /api/purchaseorderstatus/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the PurchaseOrderStatus. Param Type Description intSysCode Integer The system codes are used to identify statuses with a special meaning for the CMMS. Possible values are 1 for Draft, 3 for Waiting For Approval, 4 for Approved, 5 for On order, 6 for Order Fulfilled, 7 for Order Not Fulfilled and 8 for Cancelled. intControlID Integer The control ID identifies statuses that can be added by the system or the users to introduce new behavior for the system statuses. The Possible values are 100 for Draft, 101 for Waiting For Approval, 102 for Approved, 103 for On order, 104 for Order Fulfilled, 104 for Order Not Fulfilled and 104 for Cancelled. strDefaultLabel string Default labels to be displayed for the possible statuses. For example, \"Draft\", \"Waiting For Approval\", \"Approved\", \"On order\", \"Order Fulfilled\", \"Order Not Fulfilled\" and \"Cancelled\". strName string The names of the purchase order statuses. Possible values are \"Draft\", \"Waiting For Approval\", \"Approved\", \"On order\", \"Order Fulfilled\", \"Order Not Fulfilled\" and \"Cancelled\". intUpdated integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Update PurchaseOrderStatus"},{"location":"PurchaseOrderStatus/index.html#delete-purchaseorderstatus","text":"Delete a PurchaseOrderStatus by Id URL : /api/purchaseorderstatus/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the PurchaseOrderStatus. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses : Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete PurchaseOrderStatus"},{"location":"ReasonToSetAssetOffline/index.html","text":"Create ReasonToSetAssetOffline A ReasonToSetAssetOffline represents a Maintenance job that is to be done and executed by the assigned user. It contains information about the ReasonToSetAssetOffline Maintenance Type, Date created, Priority level, Site it resides in, Asset(s) involved, and assigned User. See the MaintennaceType, SheduledMaintenaceUser, SheduledMaintenancePart, and ReasonToSetAssetOfflineAsset objects for more details and information. You can have multiple ReasonToSetAssetOffline associated in your CMMS. Create a ReasonToSetAssetOffline if ReasonToSetAssetOffline does not already exist. URL : /api/reasontosetassetoffline Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description strName string A string that identifies the name of the ReasonToSetAssetOffline. intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed } Get all ReasonToSetAssetOffline list Get the all registered ReasonToSetAssetOffline list. URL : /api/reasontosetassetoffline Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 5 , strName : name ... , intUpdated :Integer, __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Get Single ReasonToSetAssetOffline By Id Get a single ReasonToSetAssetOffline by id if current ReasonToSetAssetOffline was registered on it. URL : /api/reasontosetassetoffline/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ReasonToSetAssetOffline. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 5 , strName : name ... , intUpdated :Integer } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If ReasonToSetAssetOffline does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null } Update ReasonToSetAssetOffline Update the ReasonToSetAssetOffline by Id URL : /api/reasontosetassetoffline/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ReasonToSetAssetOffline. Param Type Description strName string A string that identifies the name of the ReasonToSetAssetOffline. intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed } Delete ReasonToSetAssetOffline Delete a ReasonToSetAssetOffline by Id URL : /api/reasontosetassetoffline/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ReasonToSetAssetOffline. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses : Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"ReasonToSetAssetOffline"},{"location":"ReasonToSetAssetOffline/index.html#create-reasontosetassetoffline","text":"A ReasonToSetAssetOffline represents a Maintenance job that is to be done and executed by the assigned user. It contains information about the ReasonToSetAssetOffline Maintenance Type, Date created, Priority level, Site it resides in, Asset(s) involved, and assigned User. See the MaintennaceType, SheduledMaintenaceUser, SheduledMaintenancePart, and ReasonToSetAssetOfflineAsset objects for more details and information. You can have multiple ReasonToSetAssetOffline associated in your CMMS. Create a ReasonToSetAssetOffline if ReasonToSetAssetOffline does not already exist. URL : /api/reasontosetassetoffline Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description strName string A string that identifies the name of the ReasonToSetAssetOffline. intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed }","title":"Create ReasonToSetAssetOffline"},{"location":"ReasonToSetAssetOffline/index.html#get-all-reasontosetassetoffline-list","text":"Get the all registered ReasonToSetAssetOffline list. URL : /api/reasontosetassetoffline Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 5 , strName : name ... , intUpdated :Integer, __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all ReasonToSetAssetOffline list"},{"location":"ReasonToSetAssetOffline/index.html#get-single-reasontosetassetoffline-by-id","text":"Get a single ReasonToSetAssetOffline by id if current ReasonToSetAssetOffline was registered on it. URL : /api/reasontosetassetoffline/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ReasonToSetAssetOffline. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 5 , strName : name ... , intUpdated :Integer } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If ReasonToSetAssetOffline does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Get Single ReasonToSetAssetOffline By Id"},{"location":"ReasonToSetAssetOffline/index.html#update-reasontosetassetoffline","text":"Update the ReasonToSetAssetOffline by Id URL : /api/reasontosetassetoffline/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ReasonToSetAssetOffline. Param Type Description strName string A string that identifies the name of the ReasonToSetAssetOffline. intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Update ReasonToSetAssetOffline"},{"location":"ReasonToSetAssetOffline/index.html#delete-reasontosetassetoffline","text":"Delete a ReasonToSetAssetOffline by Id URL : /api/reasontosetassetoffline/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ReasonToSetAssetOffline. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses : Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete ReasonToSetAssetOffline"},{"location":"ReasonToSetAssetOnline/index.html","text":"Create ReasonToSetAssetOnline A ReasonToSetAssetOnline represents a Maintenance job that is to be done and executed by the assigned user. It contains information about the ReasonToSetAssetOnline Maintenance Type, Date created, Priority level, Site it resides in, Asset(s) involved, and assigned User. See the MaintennaceType, SheduledMaintenaceUser, SheduledMaintenancePart, and ReasonToSetAssetOnlineAsset objects for more details and information. You can have multiple ReasonToSetAssetOnline associated in your CMMS. Create a ReasonToSetAssetOnline if ReasonToSetAssetOnline does not already exist. URL : /api/reasontosetassetonline Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description strName string A string that identifies the name of the ReasonToSetAssetOnline. intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed } Get all ReasonToSetAssetOnline list Get the all registered ReasonToSetAssetOnline list. URL : /api/reasontosetassetonline Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 5 , strName : name ... , intUpdated :Integer, __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Get Single ReasonToSetAssetOnline By Id Get a single ReasonToSetAssetOnline by id if current ReasonToSetAssetOnline was registered on it. URL : /api/reasontosetassetonline/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ReasonToSetAssetOnline. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 5 , strName : name ... , intUpdated :Integer } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If ReasonToSetAssetOnline does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null } Update ReasonToSetAssetOnline Update the ReasonToSetAssetOnline by Id URL : /api/reasontosetassetonline/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ReasonToSetAssetOnline. Param Type Description strName string A string that identifies the name of the ReasonToSetAssetOnline. intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed } Delete ReasonToSetAssetOnline Delete a ReasonToSetAssetOnline by Id URL : /api/reasontosetassetonline/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ReasonToSetAssetOnline. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses : Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"ReasonToSetAssetOnline"},{"location":"ReasonToSetAssetOnline/index.html#create-reasontosetassetonline","text":"A ReasonToSetAssetOnline represents a Maintenance job that is to be done and executed by the assigned user. It contains information about the ReasonToSetAssetOnline Maintenance Type, Date created, Priority level, Site it resides in, Asset(s) involved, and assigned User. See the MaintennaceType, SheduledMaintenaceUser, SheduledMaintenancePart, and ReasonToSetAssetOnlineAsset objects for more details and information. You can have multiple ReasonToSetAssetOnline associated in your CMMS. Create a ReasonToSetAssetOnline if ReasonToSetAssetOnline does not already exist. URL : /api/reasontosetassetonline Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description strName string A string that identifies the name of the ReasonToSetAssetOnline. intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed }","title":"Create ReasonToSetAssetOnline"},{"location":"ReasonToSetAssetOnline/index.html#get-all-reasontosetassetonline-list","text":"Get the all registered ReasonToSetAssetOnline list. URL : /api/reasontosetassetonline Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 5 , strName : name ... , intUpdated :Integer, __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all ReasonToSetAssetOnline list"},{"location":"ReasonToSetAssetOnline/index.html#get-single-reasontosetassetonline-by-id","text":"Get a single ReasonToSetAssetOnline by id if current ReasonToSetAssetOnline was registered on it. URL : /api/reasontosetassetonline/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ReasonToSetAssetOnline. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 5 , strName : name ... , intUpdated :Integer } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If ReasonToSetAssetOnline does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Get Single ReasonToSetAssetOnline By Id"},{"location":"ReasonToSetAssetOnline/index.html#update-reasontosetassetonline","text":"Update the ReasonToSetAssetOnline by Id URL : /api/reasontosetassetonline/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ReasonToSetAssetOnline. Param Type Description strName string A string that identifies the name of the ReasonToSetAssetOnline. intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Update ReasonToSetAssetOnline"},{"location":"ReasonToSetAssetOnline/index.html#delete-reasontosetassetonline","text":"Delete a ReasonToSetAssetOnline by Id URL : /api/reasontosetassetonline/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ReasonToSetAssetOnline. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses : Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete ReasonToSetAssetOnline"},{"location":"Receipt/index.html","text":"Receipt Upon receiving a purchase order, a Receipt object is created in the CMMS. Create an Receipt if Receipt does not already exist. URL : /api/receipt Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intSiteID Integer For multi-sites tenants, the ID of the site where the receipt arrived. A site is an asset itself, so for possible values, please refer to the Asset section. dtmDateReceived TimeStamp The date and time when the receipt has arrived. dtmDateOrdered TimeStamp The date and time when the purchase was ordered. intReceiptStatusID Integer The ID of the status of the receipt. For getting possible values, please refer to the ReceiptStatus section. intPurchaseCurrencyID Integer The ID of the currency that was used for the purchase order. For getting possible values, please refer to the Currency section. intPurchaseOrderID Integer The ID of the purchase order which the receipt refers to. intCode Integer An integer that represents the code of the Receipt object e.g. For receipt R#31, code = 31 intSupplierID Integer An integer that represents the id of the Business intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. strPackingSlip String The user can add alphanumeric values denoting packing slip numbers using this field. Max length: 255. Data example { intSiteID : 1, dtmDateReceived : 2020-11-26T09:00:36.285+00:00, dtmDateOrdered : 2020-11-26T09:00:36.285+00:00, intReceiptStatusID : 3 intPurchaseCurrencyID : 3, ... ... } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed } Get all Receipt list Get the all registered Receipt list. URL : /api/receipt Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Receipt list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intSiteID : 1, dtmDateReceived : 2020-11-26T09:00:36.285+00:00, dtmDateOrdered : 2020-11-26T09:00:36.285+00:00, intReceiptStatusID : 3 intPurchaseCurrencyID : 3, intPurchaseOrderID : 3, intCode : 3, intSupplierID : 3, intUpdated : 321, strPackingSlip : strPackingSlip , __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update Receipt Update the Receipt by Id URL : /api/receipt/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the Receipt. Param Type Description intSiteID Integer For multi-sites tenants, the ID of the site where the receipt arrived. A site is an asset itself, so for possible values, please refer to the Asset section. dtmDateReceived TimeStamp The date and time when the receipt has arrived. dtmDateOrdered TimeStamp The date and time when the purchase was ordered. intReceiptStatusID Integer The ID of the status of the receipt. For getting possible values, please refer to the ReceiptStatus section. intPurchaseCurrencyID Integer The ID of the currency that was used for the purchase order. For getting possible values, please refer to the Currency section. intPurchaseOrderID Integer The ID of the purchase order which the receipt refers to. intCode Integer An integer that represents the code of the Receipt object e.g. For receipt R#31, code = 31 intSupplierID Integer An integer that represents the id of the Business intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. strPackingSlip String The user can add alphanumeric values denoting packing slip numbers using this field. Max length: 255. Data example { intSiteID : 1, dtmDateReceived : 2020-11-26T09:00:36.285+00:00, dtmDateOrdered : 2020-11-26T09:00:36.285+00:00, intReceiptStatusID : 3 intPurchaseCurrencyID : 3, ... ... } Success Response Code : 200 success Resonse example { msg : Receipt updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Get Single Receipt By Id Get a single Receipt by id if current Receipt was registered on it. URL : /api/receipt/:receiptid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the Receipt. Success Response: Code : 200 success Resonse example { msg : Receipt found! , data : { _id : 5f6896897b9884253cf6bdb6 , intSiteID : 1, dtmDateReceived : 2020-11-26T09:00:36.285+00:00, dtmDateOrdered : 2020-11-26T09:00:36.285+00:00, intReceiptStatusID : 3 intPurchaseCurrencyID : 3, intPurchaseOrderID : 3, intCode : 3, intSupplierID : 3, intUpdated : 321, strPackingSlip : strPackingSlip , __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If Receipt does not exist on server. Code : 404 Not Found Content example { msg : Receipt not found , data :null } Delete Receipt Delete the Receipt by Id URL : /api/receipt/:receiptid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the Receipt. Success Response Code : 200 success Resonse example { msg : Receipt deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no Receipt available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Receipt"},{"location":"Receipt/index.html#receipt","text":"Upon receiving a purchase order, a Receipt object is created in the CMMS. Create an Receipt if Receipt does not already exist. URL : /api/receipt Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intSiteID Integer For multi-sites tenants, the ID of the site where the receipt arrived. A site is an asset itself, so for possible values, please refer to the Asset section. dtmDateReceived TimeStamp The date and time when the receipt has arrived. dtmDateOrdered TimeStamp The date and time when the purchase was ordered. intReceiptStatusID Integer The ID of the status of the receipt. For getting possible values, please refer to the ReceiptStatus section. intPurchaseCurrencyID Integer The ID of the currency that was used for the purchase order. For getting possible values, please refer to the Currency section. intPurchaseOrderID Integer The ID of the purchase order which the receipt refers to. intCode Integer An integer that represents the code of the Receipt object e.g. For receipt R#31, code = 31 intSupplierID Integer An integer that represents the id of the Business intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. strPackingSlip String The user can add alphanumeric values denoting packing slip numbers using this field. Max length: 255. Data example { intSiteID : 1, dtmDateReceived : 2020-11-26T09:00:36.285+00:00, dtmDateOrdered : 2020-11-26T09:00:36.285+00:00, intReceiptStatusID : 3 intPurchaseCurrencyID : 3, ... ... } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed }","title":"Receipt"},{"location":"Receipt/index.html#get-all-receipt-list","text":"Get the all registered Receipt list. URL : /api/receipt Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Receipt list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intSiteID : 1, dtmDateReceived : 2020-11-26T09:00:36.285+00:00, dtmDateOrdered : 2020-11-26T09:00:36.285+00:00, intReceiptStatusID : 3 intPurchaseCurrencyID : 3, intPurchaseOrderID : 3, intCode : 3, intSupplierID : 3, intUpdated : 321, strPackingSlip : strPackingSlip , __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all Receipt list"},{"location":"Receipt/index.html#update-receipt","text":"Update the Receipt by Id URL : /api/receipt/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the Receipt. Param Type Description intSiteID Integer For multi-sites tenants, the ID of the site where the receipt arrived. A site is an asset itself, so for possible values, please refer to the Asset section. dtmDateReceived TimeStamp The date and time when the receipt has arrived. dtmDateOrdered TimeStamp The date and time when the purchase was ordered. intReceiptStatusID Integer The ID of the status of the receipt. For getting possible values, please refer to the ReceiptStatus section. intPurchaseCurrencyID Integer The ID of the currency that was used for the purchase order. For getting possible values, please refer to the Currency section. intPurchaseOrderID Integer The ID of the purchase order which the receipt refers to. intCode Integer An integer that represents the code of the Receipt object e.g. For receipt R#31, code = 31 intSupplierID Integer An integer that represents the id of the Business intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. strPackingSlip String The user can add alphanumeric values denoting packing slip numbers using this field. Max length: 255. Data example { intSiteID : 1, dtmDateReceived : 2020-11-26T09:00:36.285+00:00, dtmDateOrdered : 2020-11-26T09:00:36.285+00:00, intReceiptStatusID : 3 intPurchaseCurrencyID : 3, ... ... } Success Response Code : 200 success Resonse example { msg : Receipt updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update Receipt"},{"location":"Receipt/index.html#get-single-receipt-by-id","text":"Get a single Receipt by id if current Receipt was registered on it. URL : /api/receipt/:receiptid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the Receipt. Success Response: Code : 200 success Resonse example { msg : Receipt found! , data : { _id : 5f6896897b9884253cf6bdb6 , intSiteID : 1, dtmDateReceived : 2020-11-26T09:00:36.285+00:00, dtmDateOrdered : 2020-11-26T09:00:36.285+00:00, intReceiptStatusID : 3 intPurchaseCurrencyID : 3, intPurchaseOrderID : 3, intCode : 3, intSupplierID : 3, intUpdated : 321, strPackingSlip : strPackingSlip , __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If Receipt does not exist on server. Code : 404 Not Found Content example { msg : Receipt not found , data :null }","title":"Get Single Receipt By Id"},{"location":"Receipt/index.html#delete-receipt","text":"Delete the Receipt by Id URL : /api/receipt/:receiptid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the Receipt. Success Response Code : 200 success Resonse example { msg : Receipt deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no Receipt available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete  Receipt"},{"location":"ReceiptLineItem/index.html","text":"ReceiptLineItem Upon receiptlineitem of a purchase order, a Receipt object is created. This object represents the lines of the receipt. Create an ReceiptLineItem if ReceiptLineItem does not already exist. URL : /api/receiptlineitem Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intStockID Integer The ID of the stock to which the line item refers to. For getting possible values, please refer to the Stock section. qtyQuantityReceived Integer The quantity that was received. qtyQuantityOrdered Integer The quantity that was ordered. intAssetID Integer The ID of the asset. For getting possible values, please refer to the Asset section. intReceiptID Integer The ID of the receipt which this line is part of. For getting possible values, please refer to the Receipt section. strDescription String A short text describing the line item. intParentReceiptLineItemID Integer An integer representing the id of the parent receipt line item intPurchaseOrderLineItemID Integer An integer representing the id of the associated purchase order line item dtmDateExpiryOfInventoryItems TimeStamp The date and time when the inventory items would expire dblPurchasePricePerUnit Double The price of the received part / item per unit intReceiveToStockID Integer An integer that represents the id of a Stock that the part was received to intReceiveToFacilityID Integer An integer that represents the id of an Asset (with AssetCategory set to Facility), to which the part was received to intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Data example { intStockID : 1, qtyQuantityReceived : 12, qtyQuantityOrdered : 4, intAssetID : 3 intReceiptID : 3, ... ... } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed } Get all ReceiptLineItem list Get the all registered receiptlineitem list. URL : /api/receiptlineitem Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : ReceiptLineItem list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intStockID : 1, qtyQuantityReceived : 12, qtyQuantityOrdered : 4, intAssetID : 3 intReceiptID : 3, strDescription : strDescription , intParentReceiptLineItemID : 3, intPurchaseOrderLineItemID : 3, dtmDateExpiryOfInventoryItems : 2020-11-26T09:00:36.285+00:00, dblPurchasePricePerUnit : 3.22, intReceiveToStockID : 3, intReceiveToFacilityID : 3, intUpdated : 322, __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update ReceiptLineItem Update the ReceiptLineItem by Id URL : /api/receiptlineitem/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the receiptlineitem. Param Type Description intStockID Integer The ID of the stock to which the line item refers to. For getting possible values, please refer to the Stock section. qtyQuantityReceived Integer The quantity that was received. qtyQuantityOrdered Integer The quantity that was ordered. intAssetID Integer The ID of the asset. For getting possible values, please refer to the Asset section. intReceiptID Integer The ID of the receipt which this line is part of. For getting possible values, please refer to the Receipt section. strDescription String A short text describing the line item. intParentReceiptLineItemID Integer An integer representing the id of the parent receipt line item intPurchaseOrderLineItemID Integer An integer representing the id of the associated purchase order line item dtmDateExpiryOfInventoryItems TimeStamp The date and time when the inventory items would expire dblPurchasePricePerUnit Double The price of the received part / item per unit intReceiveToStockID Integer An integer that represents the id of a Stock that the part was received to intReceiveToFacilityID Integer An integer that represents the id of an Asset (with AssetCategory set to Facility), to which the part was received to intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Data example { intStockID : 1, qtyQuantityReceived : 12, qtyQuantityOrdered : 4, intAssetID : 3 intReceiptID : 3, ... ... } Success Response Code : 200 success Resonse example { msg : ReceiptLineItem updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Get Single ReceiptLineItem By Id Get a single ReceiptLineItem by id if current receiptlineitem was registered on it. URL : /api/receiptlineitem/:receiptlineitemid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the receiptlineitem. Success Response: Code : 200 success Resonse example { msg : ReceiptLineItem found! , data : { _id : 5f6896897b9884253cf6bdb6 , intStockID : 1, qtyQuantityReceived : 12, qtyQuantityOrdered : 4, intAssetID : 3 intReceiptID : 3, strDescription : strDescription , intParentReceiptLineItemID : 3, intPurchaseOrderLineItemID : 3, dtmDateExpiryOfInventoryItems : 2020-11-26T09:00:36.285+00:00, dblPurchasePricePerUnit : 3.22, intReceiveToStockID : 3, intReceiveToFacilityID : 3, intUpdated : 322, __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If receiptlineitem does not exist on server. Code : 404 Not Found Content example { msg : ReceiptLineItem not found , data :null } Delete ReceiptLineItem Delete the ReceiptLineItem by Id URL : /api/receiptlineitem/:receiptlineitemid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the receiptlineitem. Success Response Code : 200 success Resonse example { msg : ReceiptLineItem deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no receiptlineitem available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"ReceiptLineItem"},{"location":"ReceiptLineItem/index.html#receiptlineitem","text":"Upon receiptlineitem of a purchase order, a Receipt object is created. This object represents the lines of the receipt. Create an ReceiptLineItem if ReceiptLineItem does not already exist. URL : /api/receiptlineitem Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intStockID Integer The ID of the stock to which the line item refers to. For getting possible values, please refer to the Stock section. qtyQuantityReceived Integer The quantity that was received. qtyQuantityOrdered Integer The quantity that was ordered. intAssetID Integer The ID of the asset. For getting possible values, please refer to the Asset section. intReceiptID Integer The ID of the receipt which this line is part of. For getting possible values, please refer to the Receipt section. strDescription String A short text describing the line item. intParentReceiptLineItemID Integer An integer representing the id of the parent receipt line item intPurchaseOrderLineItemID Integer An integer representing the id of the associated purchase order line item dtmDateExpiryOfInventoryItems TimeStamp The date and time when the inventory items would expire dblPurchasePricePerUnit Double The price of the received part / item per unit intReceiveToStockID Integer An integer that represents the id of a Stock that the part was received to intReceiveToFacilityID Integer An integer that represents the id of an Asset (with AssetCategory set to Facility), to which the part was received to intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Data example { intStockID : 1, qtyQuantityReceived : 12, qtyQuantityOrdered : 4, intAssetID : 3 intReceiptID : 3, ... ... } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed }","title":"ReceiptLineItem"},{"location":"ReceiptLineItem/index.html#get-all-receiptlineitem-list","text":"Get the all registered receiptlineitem list. URL : /api/receiptlineitem Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : ReceiptLineItem list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intStockID : 1, qtyQuantityReceived : 12, qtyQuantityOrdered : 4, intAssetID : 3 intReceiptID : 3, strDescription : strDescription , intParentReceiptLineItemID : 3, intPurchaseOrderLineItemID : 3, dtmDateExpiryOfInventoryItems : 2020-11-26T09:00:36.285+00:00, dblPurchasePricePerUnit : 3.22, intReceiveToStockID : 3, intReceiveToFacilityID : 3, intUpdated : 322, __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all ReceiptLineItem list"},{"location":"ReceiptLineItem/index.html#update-receiptlineitem","text":"Update the ReceiptLineItem by Id URL : /api/receiptlineitem/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the receiptlineitem. Param Type Description intStockID Integer The ID of the stock to which the line item refers to. For getting possible values, please refer to the Stock section. qtyQuantityReceived Integer The quantity that was received. qtyQuantityOrdered Integer The quantity that was ordered. intAssetID Integer The ID of the asset. For getting possible values, please refer to the Asset section. intReceiptID Integer The ID of the receipt which this line is part of. For getting possible values, please refer to the Receipt section. strDescription String A short text describing the line item. intParentReceiptLineItemID Integer An integer representing the id of the parent receipt line item intPurchaseOrderLineItemID Integer An integer representing the id of the associated purchase order line item dtmDateExpiryOfInventoryItems TimeStamp The date and time when the inventory items would expire dblPurchasePricePerUnit Double The price of the received part / item per unit intReceiveToStockID Integer An integer that represents the id of a Stock that the part was received to intReceiveToFacilityID Integer An integer that represents the id of an Asset (with AssetCategory set to Facility), to which the part was received to intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Data example { intStockID : 1, qtyQuantityReceived : 12, qtyQuantityOrdered : 4, intAssetID : 3 intReceiptID : 3, ... ... } Success Response Code : 200 success Resonse example { msg : ReceiptLineItem updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update ReceiptLineItem"},{"location":"ReceiptLineItem/index.html#get-single-receiptlineitem-by-id","text":"Get a single ReceiptLineItem by id if current receiptlineitem was registered on it. URL : /api/receiptlineitem/:receiptlineitemid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the receiptlineitem. Success Response: Code : 200 success Resonse example { msg : ReceiptLineItem found! , data : { _id : 5f6896897b9884253cf6bdb6 , intStockID : 1, qtyQuantityReceived : 12, qtyQuantityOrdered : 4, intAssetID : 3 intReceiptID : 3, strDescription : strDescription , intParentReceiptLineItemID : 3, intPurchaseOrderLineItemID : 3, dtmDateExpiryOfInventoryItems : 2020-11-26T09:00:36.285+00:00, dblPurchasePricePerUnit : 3.22, intReceiveToStockID : 3, intReceiveToFacilityID : 3, intUpdated : 322, __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If receiptlineitem does not exist on server. Code : 404 Not Found Content example { msg : ReceiptLineItem not found , data :null }","title":"Get Single ReceiptLineItem By Id"},{"location":"ReceiptLineItem/index.html#delete-receiptlineitem","text":"Delete the ReceiptLineItem by Id URL : /api/receiptlineitem/:receiptlineitemid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the receiptlineitem. Success Response Code : 200 success Resonse example { msg : ReceiptLineItem deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no receiptlineitem available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete  ReceiptLineItem"},{"location":"ReceiptStatus/index.html","text":"ReceiptStatus Upon reception of a purchase order, a Receipt object is created. This object represents the lines of the receipt. Create an ReceiptStatus if ReceiptStatus does not already exist. URL : /api/receiptstatus Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description strName String The display name of the status. intControlID Integer Possible values are 100 for Draft, 101 for Received and 102 for Cancelled. intSysCode Integer Possible values are 1 for Draft, 2 for Received and 3 for Cancelled. strDefaultLabel String The default label to use for this status. intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Data example { strName : strName , intControlID : 12, intSysCode : 4, strDefaultLabel : strDefaultLabel intUpdated : 323 } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed } Get all ReceiptStatus list Get the all registered receiptstatus list. URL : /api/receiptstatus Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : ReceiptStatus list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , strName : strName , intControlID : 12, intSysCode : 4, strDefaultLabel : strDefaultLabel intUpdated : 323, __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update ReceiptStatus Update the ReceiptStatus by Id URL : /api/receiptstatus/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the receiptstatus. Param Type Description strName String The display name of the status. intControlID Integer Possible values are 100 for Draft, 101 for Received and 102 for Cancelled. intSysCode Integer Possible values are 1 for Draft, 2 for Received and 3 for Cancelled. strDefaultLabel String The default label to use for this status. intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Data example { strName : strName , intControlID : 12, intSysCode : 4, strDefaultLabel : strDefaultLabel intUpdated : 323 } Success Response Code : 200 success Resonse example { msg : ReceiptStatus updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Get Single ReceiptStatus By Id Get a single ReceiptStatus by id if current receiptstatus was registered on it. URL : /api/receiptstatus/:receiptstatusid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the receiptstatus. Success Response: Code : 200 success Resonse example { msg : ReceiptStatus found! , data : { _id : 5f6896897b9884253cf6bdb6 , strName : strName , intControlID : 12, intSysCode : 4, strDefaultLabel : strDefaultLabel intUpdated : 323, __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If receiptstatus does not exist on server. Code : 404 Not Found Content example { msg : ReceiptStatus not found , data :null } Delete ReceiptStatus Delete the ReceiptStatus by Id URL : /api/receiptstatus/:receiptstatusid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the receiptstatus. Success Response Code : 200 success Resonse example { msg : ReceiptStatus deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no receiptstatus available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"ReceiptStatus"},{"location":"ReceiptStatus/index.html#receiptstatus","text":"Upon reception of a purchase order, a Receipt object is created. This object represents the lines of the receipt. Create an ReceiptStatus if ReceiptStatus does not already exist. URL : /api/receiptstatus Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description strName String The display name of the status. intControlID Integer Possible values are 100 for Draft, 101 for Received and 102 for Cancelled. intSysCode Integer Possible values are 1 for Draft, 2 for Received and 3 for Cancelled. strDefaultLabel String The default label to use for this status. intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Data example { strName : strName , intControlID : 12, intSysCode : 4, strDefaultLabel : strDefaultLabel intUpdated : 323 } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed }","title":"ReceiptStatus"},{"location":"ReceiptStatus/index.html#get-all-receiptstatus-list","text":"Get the all registered receiptstatus list. URL : /api/receiptstatus Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : ReceiptStatus list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , strName : strName , intControlID : 12, intSysCode : 4, strDefaultLabel : strDefaultLabel intUpdated : 323, __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all ReceiptStatus list"},{"location":"ReceiptStatus/index.html#update-receiptstatus","text":"Update the ReceiptStatus by Id URL : /api/receiptstatus/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the receiptstatus. Param Type Description strName String The display name of the status. intControlID Integer Possible values are 100 for Draft, 101 for Received and 102 for Cancelled. intSysCode Integer Possible values are 1 for Draft, 2 for Received and 3 for Cancelled. strDefaultLabel String The default label to use for this status. intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Data example { strName : strName , intControlID : 12, intSysCode : 4, strDefaultLabel : strDefaultLabel intUpdated : 323 } Success Response Code : 200 success Resonse example { msg : ReceiptStatus updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update ReceiptStatus"},{"location":"ReceiptStatus/index.html#get-single-receiptstatus-by-id","text":"Get a single ReceiptStatus by id if current receiptstatus was registered on it. URL : /api/receiptstatus/:receiptstatusid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the receiptstatus. Success Response: Code : 200 success Resonse example { msg : ReceiptStatus found! , data : { _id : 5f6896897b9884253cf6bdb6 , strName : strName , intControlID : 12, intSysCode : 4, strDefaultLabel : strDefaultLabel intUpdated : 323, __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If receiptstatus does not exist on server. Code : 404 Not Found Content example { msg : ReceiptStatus not found , data :null }","title":"Get Single ReceiptStatus By Id"},{"location":"ReceiptStatus/index.html#delete-receiptstatus","text":"Delete the ReceiptStatus by Id URL : /api/receiptstatus/:receiptstatusid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the receiptstatus. Success Response Code : 200 success Resonse example { msg : ReceiptStatus deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no receiptstatus available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete  ReceiptStatus"},{"location":"ReportsToResolved/index.html","text":"ReportsToResolved This object is a flattened representation of the \"User reporting to user\" hierarchy. For any descendant/ancestor relationship, there will be an entry in this table. This is a computed table, so it is read-only. Create an ReportsToResolved if ReportsToResolved does not already exist. URL : /api/reportstoresolved Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intChildID Integer The ID of the descendant user. See User object. intParentID Integer The ID of the ancestor user. See User object. Data example { intChildID : 2, intParentID : 12 } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed } Get all ReportsToResolved list Get the all registered ReportsToResolved list. URL : /api/reportstoresolved Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : ReportsToResolved list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intChildID : 2, intParentID : 12, __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update ReportsToResolved Update the ReportsToResolved by Id URL : /api/reportstoresolved/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the reportstoresolved. Param Type Description intChildID Integer The ID of the descendant user. See User object. intParentID Integer The ID of the ancestor user. See User object. Data example { intChildID : 2, intParentID : 12 } Success Response Code : 200 success Resonse example { msg : ReportsToResolved updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Get Single ReportsToResolved By Id Get a single ReportsToResolved by id if current reportstoresolved was registered on it. URL : /api/reportstoresolved/:reportstoresolvedid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the reportstoresolved. Success Response: Code : 200 success Resonse example { msg : ReportsToResolved found! , data : { _id : 5f6896897b9884253cf6bdb6 , intChildID : 2, intParentID : 12, __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If reportstoresolved does not exist on server. Code : 404 Not Found Content example { msg : ReportsToResolved not found , data :null } Delete ReportsToResolved Delete the ReportsToResolved by Id URL : /api/reportstoresolved/:reportstoresolvedid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the reportstoresolved. Success Response Code : 200 success Resonse example { msg : ReportsToResolved deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no reportstoresolved available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"ReportsToResolved"},{"location":"ReportsToResolved/index.html#reportstoresolved","text":"This object is a flattened representation of the \"User reporting to user\" hierarchy. For any descendant/ancestor relationship, there will be an entry in this table. This is a computed table, so it is read-only. Create an ReportsToResolved if ReportsToResolved does not already exist. URL : /api/reportstoresolved Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intChildID Integer The ID of the descendant user. See User object. intParentID Integer The ID of the ancestor user. See User object. Data example { intChildID : 2, intParentID : 12 } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed }","title":"ReportsToResolved"},{"location":"ReportsToResolved/index.html#get-all-reportstoresolved-list","text":"Get the all registered ReportsToResolved list. URL : /api/reportstoresolved Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : ReportsToResolved list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intChildID : 2, intParentID : 12, __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all ReportsToResolved list"},{"location":"ReportsToResolved/index.html#update-reportstoresolved","text":"Update the ReportsToResolved by Id URL : /api/reportstoresolved/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the reportstoresolved. Param Type Description intChildID Integer The ID of the descendant user. See User object. intParentID Integer The ID of the ancestor user. See User object. Data example { intChildID : 2, intParentID : 12 } Success Response Code : 200 success Resonse example { msg : ReportsToResolved updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update ReportsToResolved"},{"location":"ReportsToResolved/index.html#get-single-reportstoresolved-by-id","text":"Get a single ReportsToResolved by id if current reportstoresolved was registered on it. URL : /api/reportstoresolved/:reportstoresolvedid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the reportstoresolved. Success Response: Code : 200 success Resonse example { msg : ReportsToResolved found! , data : { _id : 5f6896897b9884253cf6bdb6 , intChildID : 2, intParentID : 12, __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If reportstoresolved does not exist on server. Code : 404 Not Found Content example { msg : ReportsToResolved not found , data :null }","title":"Get Single ReportsToResolved By Id"},{"location":"ReportsToResolved/index.html#delete-reportstoresolved","text":"Delete the ReportsToResolved by Id URL : /api/reportstoresolved/:reportstoresolvedid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the reportstoresolved. Success Response Code : 200 success Resonse example { msg : ReportsToResolved deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no reportstoresolved available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete  ReportsToResolved"},{"location":"ScheduleTrigger/index.html","text":"Create ScheduleTrigger A ScheduleTrigger represents a trigger that is created on a ScheduledMaintenance for scheduling a WorkOrder. A WorkOrder can be scheduled for a ScheduledMaintenance when any of the ScheduleTriggers fire or when all of the ScheduleTriggers are fired depending on the configuration specified on ScheduledMaintenance. Create an ScheduleTrigger if ScheduleTrigger does not already exist. URL : /api/scheduletrigger Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description bolTSWFriday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Friday. bolTSWMonday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Monday. bolTSWSaturday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Saturday. bolTSWSunday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Sunday. bolTSWThursday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Thursday. bolTSWTuesday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Tuesday. bolTSWWednesday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Wednesday. strDatLogicHourly String For a Time Schedule trigger, this field shows the logic of the hourly setting. It is set to x (fixed) or t (floating). strDatLogicDaily String For a Time Schedule trigger, this field shows the logic of the daily setting. It is set to x (fixed) or t (floating). strDatLogicMonthly String For a Time Schedule trigger, this field shows the logic of the monthly setting. It is set to x (fixed) or t (floating). strDatLogicYearly String For a Time Schedule trigger, this field shows the logic of the yearly setting. It is set to x (fixed) or t (floating). dblLastMeterReading double For a Meter Reading trigger, this field identifies the last meter reading recorded. dblRMeterReading double For a Meter Reading trigger, this field specifies the interval in which it should be triggered (Ex: Every 90 hours). dblROMeterReading double For a Meter Reading trigger, this field specifies the value when it should be triggered (Ex: When Hours (h) Reading is greater than 10). dblRREndBy double For a Meter Reading trigger, this field specifies the End By Reading configured for the trigger. If no End By is configured, it defaults to 0. dblRRStart double For a Meter Reading trigger, this field specifies the Start At Reading configured for the trigger. If no Start At is configured, it defaults to 0. dtmLastTriggered timestamp The date and time which the trigger was triggered last. intAssetEventTypeID Integer For an Event trigger, this field specifies the ID of the AssetEventType associated with the trigger. intRMeterReadingUnitID Integer For a Meter Reading trigger, this field specifies ID of MeterReadingUnit associated with the trigger when the trigger is configured for Every reading of the unit. intROMeterReadingUnitID Integer For a Meter Reading trigger, this field specifies ID of MeterReadingUnit associated with the trigger when the trigger is configured based on a condition. intRREndAfter Integer For Meter Reading trigger, it specifies the reading after which to stop the trigger. intScheduledMaintenanceID Integer The ID of the ScheduledMaintenance associated with the trigger. intTREndAfter Integer This field is used to determine after how many occurrences the trigger should be stopped. intTSDEveryDays Integer For a Time Schedule trigger that is configured to be daily, it denotes the daily rate of repetition associated with the trigger. intTSHEveryHours Integer For a Time Schedule trigger that is configured to be hourly, it denotes the hourly rate of repetition associated with the trigger. intTSMDayOfMonth Integer For a Time Schedule trigger that is configured to be monthly, it denotes the day of the month associated with the trigger. intTSMEveryMonths Integer For Time Schedule trigger that is configured to be monthly, it denotes the monthly rate of repetition associated with the trigger. intTSWEveryWeeks Integer For a Time Schedule trigger that is configured to be weekly, it denotes the weekly rate of repetition associated with the trigger. intTSYDayOfMonth Integer For a Time Schedule trigger that is configured to be yearly, it denotes the day of the month associated with the trigger. intTSYEveryYears Integer For a Time Schedule trigger that is configured to be yearly, it denotes the yearly rate of repetition associated with the trigger. intTSYMonthOfYear Integer For a Time Schedule trigger that is configured to be yearly, it denotes the month of the year associated with the trigger. Do note that the months start at 0. For eg: The year starts at January (0) and ends with December (11). strROType String For a Meter Reading trigger, this field is the Trigger Meter (When) Comparison. It is set to l (less than), g (greater than), or empty if not meter reading based. strRRType String It is the Trigger Schedule No End Date. It is set to empty if not time based, n (no end date), b (has a end date). strRType String For a Meter Reading trigger, this field is the Trigger Meter Type. It is set to e (every), o (other), empty if not meter reading based. strTRType String It is the Trigger Reading End type. It is set to n (no end reading), b (end by reading). strTSType String It is the Trigger Schedule Type. It is set to h (hourly), d (daily), w (weekly), m (monthly), y (yearly). strType String This field denotes the type of the Schedule Trigger. It is set to t for Time Schedule trigger, r for Meter Reading Trigger and e for an Event Trigger. strMrLogic String For a Meter Reading trigger, this field is used to determine the logic of the schedule. It is set x (fixed) or t (floating). bolMrByWOClosed boolean If set to true, the Meter Reading trigger should check the reading when the WO is closed. bolCreateWorkOrderOnStartDate boolean If set to true, it indicates that a WorkOrder be created on the start date when the trigger is scheduled. intAssetID Integer Indicates the ID for an Asset associated with the ScheduledMaintenance that creates the trigger. For a Meter Reading trigger, this field needs to be populated with the Asset id of one of the ScheduledMaintenance Assets. strScheduleDescription String The description for the Schedule Trigger. intTRTriggerTime Integer For all the Time Schedule triggers except an hourly trigger, this field specifies time at which it will be triggered. It can have a value between 0 and 23. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 71 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed } Get all ScheduleTrigger list Get the all registered ScheduleTrigger list. URL : /api/scheduletrigger Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 32 , strAssignedUserIds : 13 8 9 intPriorityID : 4156, intWorkOrderStatusID : 4, strAssets : ASSET ABC (0010), ASSET DEF (0011) intSiteID : 3345, strAssignedUsers : John Doe, Samuel Smith , intRequestedByUserID : 667, strEmailUserGuest: , dtmDateCreated: , strAssetIds: 9 78 675 , dtmDateCompleted: , intCompletedByUserID:555 ... __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update ScheduleTrigger Update the ScheduleTrigger by Id URL : /api/scheduletrigger/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ScheduleTrigger. Param Type Description bolTSWFriday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Friday. bolTSWMonday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Monday. bolTSWSaturday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Saturday. bolTSWSunday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Sunday. bolTSWThursday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Thursday. bolTSWTuesday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Tuesday. bolTSWWednesday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Wednesday. strDatLogicHourly String For a Time Schedule trigger, this field shows the logic of the hourly setting. It is set to x (fixed) or t (floating). strDatLogicDaily String For a Time Schedule trigger, this field shows the logic of the daily setting. It is set to x (fixed) or t (floating). strDatLogicMonthly String For a Time Schedule trigger, this field shows the logic of the monthly setting. It is set to x (fixed) or t (floating). strDatLogicYearly String For a Time Schedule trigger, this field shows the logic of the yearly setting. It is set to x (fixed) or t (floating). dblLastMeterReading double For a Meter Reading trigger, this field identifies the last meter reading recorded. dblRMeterReading double For a Meter Reading trigger, this field specifies the interval in which it should be triggered (Ex: Every 90 hours). dblROMeterReading double For a Meter Reading trigger, this field specifies the value when it should be triggered (Ex: When Hours (h) Reading is greater than 10). dblRREndBy double For a Meter Reading trigger, this field specifies the End By Reading configured for the trigger. If no End By is configured, it defaults to 0. dblRRStart double For a Meter Reading trigger, this field specifies the Start At Reading configured for the trigger. If no Start At is configured, it defaults to 0. dtmLastTriggered timestamp The date and time which the trigger was triggered last. intAssetEventTypeID Integer For an Event trigger, this field specifies the ID of the AssetEventType associated with the trigger. intRMeterReadingUnitID Integer For a Meter Reading trigger, this field specifies ID of MeterReadingUnit associated with the trigger when the trigger is configured for Every reading of the unit. intROMeterReadingUnitID Integer For a Meter Reading trigger, this field specifies ID of MeterReadingUnit associated with the trigger when the trigger is configured based on a condition. intRREndAfter Integer For Meter Reading trigger, it specifies the reading after which to stop the trigger. intScheduledMaintenanceID Integer The ID of the ScheduledMaintenance associated with the trigger. intTREndAfter Integer This field is used to determine after how many occurrences the trigger should be stopped. intTSDEveryDays Integer For a Time Schedule trigger that is configured to be daily, it denotes the daily rate of repetition associated with the trigger. intTSHEveryHours Integer For a Time Schedule trigger that is configured to be hourly, it denotes the hourly rate of repetition associated with the trigger. intTSMDayOfMonth Integer For a Time Schedule trigger that is configured to be monthly, it denotes the day of the month associated with the trigger. intTSMEveryMonths Integer For Time Schedule trigger that is configured to be monthly, it denotes the monthly rate of repetition associated with the trigger. intTSWEveryWeeks Integer For a Time Schedule trigger that is configured to be weekly, it denotes the weekly rate of repetition associated with the trigger. intTSYDayOfMonth Integer For a Time Schedule trigger that is configured to be yearly, it denotes the day of the month associated with the trigger. intTSYEveryYears Integer For a Time Schedule trigger that is configured to be yearly, it denotes the yearly rate of repetition associated with the trigger. intTSYMonthOfYear Integer For a Time Schedule trigger that is configured to be yearly, it denotes the month of the year associated with the trigger. Do note that the months start at 0. For eg: The year starts at January (0) and ends with December (11). strROType String For a Meter Reading trigger, this field is the Trigger Meter (When) Comparison. It is set to l (less than), g (greater than), or empty if not meter reading based. strRRType String It is the Trigger Schedule No End Date. It is set to empty if not time based, n (no end date), b (has a end date). strRType String For a Meter Reading trigger, this field is the Trigger Meter Type. It is set to e (every), o (other), empty if not meter reading based. strTRType String It is the Trigger Reading End type. It is set to n (no end reading), b (end by reading). strTSType String It is the Trigger Schedule Type. It is set to h (hourly), d (daily), w (weekly), m (monthly), y (yearly). strType String This field denotes the type of the Schedule Trigger. It is set to t for Time Schedule trigger, r for Meter Reading Trigger and e for an Event Trigger. strMrLogic String For a Meter Reading trigger, this field is used to determine the logic of the schedule. It is set x (fixed) or t (floating). bolMrByWOClosed boolean If set to true, the Meter Reading trigger should check the reading when the WO is closed. bolCreateWorkOrderOnStartDate boolean If set to true, it indicates that a WorkOrder be created on the start date when the trigger is scheduled. intAssetID Integer Indicates the ID for an Asset associated with the ScheduledMaintenance that creates the trigger. For a Meter Reading trigger, this field needs to be populated with the Asset id of one of the ScheduledMaintenance Assets. strScheduleDescription String The description for the Schedule Trigger. intTRTriggerTime Integer For all the Time Schedule triggers except an hourly trigger, this field specifies time at which it will be triggered. It can have a value between 0 and 23. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Delete ScheduleTrigger Delete a ScheduleTrigger by Id URL : /api/scheduletrigger/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ScheduleTrigger. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"ScheduleTrigger"},{"location":"ScheduleTrigger/index.html#create-scheduletrigger","text":"A ScheduleTrigger represents a trigger that is created on a ScheduledMaintenance for scheduling a WorkOrder. A WorkOrder can be scheduled for a ScheduledMaintenance when any of the ScheduleTriggers fire or when all of the ScheduleTriggers are fired depending on the configuration specified on ScheduledMaintenance. Create an ScheduleTrigger if ScheduleTrigger does not already exist. URL : /api/scheduletrigger Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description bolTSWFriday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Friday. bolTSWMonday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Monday. bolTSWSaturday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Saturday. bolTSWSunday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Sunday. bolTSWThursday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Thursday. bolTSWTuesday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Tuesday. bolTSWWednesday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Wednesday. strDatLogicHourly String For a Time Schedule trigger, this field shows the logic of the hourly setting. It is set to x (fixed) or t (floating). strDatLogicDaily String For a Time Schedule trigger, this field shows the logic of the daily setting. It is set to x (fixed) or t (floating). strDatLogicMonthly String For a Time Schedule trigger, this field shows the logic of the monthly setting. It is set to x (fixed) or t (floating). strDatLogicYearly String For a Time Schedule trigger, this field shows the logic of the yearly setting. It is set to x (fixed) or t (floating). dblLastMeterReading double For a Meter Reading trigger, this field identifies the last meter reading recorded. dblRMeterReading double For a Meter Reading trigger, this field specifies the interval in which it should be triggered (Ex: Every 90 hours). dblROMeterReading double For a Meter Reading trigger, this field specifies the value when it should be triggered (Ex: When Hours (h) Reading is greater than 10). dblRREndBy double For a Meter Reading trigger, this field specifies the End By Reading configured for the trigger. If no End By is configured, it defaults to 0. dblRRStart double For a Meter Reading trigger, this field specifies the Start At Reading configured for the trigger. If no Start At is configured, it defaults to 0. dtmLastTriggered timestamp The date and time which the trigger was triggered last. intAssetEventTypeID Integer For an Event trigger, this field specifies the ID of the AssetEventType associated with the trigger. intRMeterReadingUnitID Integer For a Meter Reading trigger, this field specifies ID of MeterReadingUnit associated with the trigger when the trigger is configured for Every reading of the unit. intROMeterReadingUnitID Integer For a Meter Reading trigger, this field specifies ID of MeterReadingUnit associated with the trigger when the trigger is configured based on a condition. intRREndAfter Integer For Meter Reading trigger, it specifies the reading after which to stop the trigger. intScheduledMaintenanceID Integer The ID of the ScheduledMaintenance associated with the trigger. intTREndAfter Integer This field is used to determine after how many occurrences the trigger should be stopped. intTSDEveryDays Integer For a Time Schedule trigger that is configured to be daily, it denotes the daily rate of repetition associated with the trigger. intTSHEveryHours Integer For a Time Schedule trigger that is configured to be hourly, it denotes the hourly rate of repetition associated with the trigger. intTSMDayOfMonth Integer For a Time Schedule trigger that is configured to be monthly, it denotes the day of the month associated with the trigger. intTSMEveryMonths Integer For Time Schedule trigger that is configured to be monthly, it denotes the monthly rate of repetition associated with the trigger. intTSWEveryWeeks Integer For a Time Schedule trigger that is configured to be weekly, it denotes the weekly rate of repetition associated with the trigger. intTSYDayOfMonth Integer For a Time Schedule trigger that is configured to be yearly, it denotes the day of the month associated with the trigger. intTSYEveryYears Integer For a Time Schedule trigger that is configured to be yearly, it denotes the yearly rate of repetition associated with the trigger. intTSYMonthOfYear Integer For a Time Schedule trigger that is configured to be yearly, it denotes the month of the year associated with the trigger. Do note that the months start at 0. For eg: The year starts at January (0) and ends with December (11). strROType String For a Meter Reading trigger, this field is the Trigger Meter (When) Comparison. It is set to l (less than), g (greater than), or empty if not meter reading based. strRRType String It is the Trigger Schedule No End Date. It is set to empty if not time based, n (no end date), b (has a end date). strRType String For a Meter Reading trigger, this field is the Trigger Meter Type. It is set to e (every), o (other), empty if not meter reading based. strTRType String It is the Trigger Reading End type. It is set to n (no end reading), b (end by reading). strTSType String It is the Trigger Schedule Type. It is set to h (hourly), d (daily), w (weekly), m (monthly), y (yearly). strType String This field denotes the type of the Schedule Trigger. It is set to t for Time Schedule trigger, r for Meter Reading Trigger and e for an Event Trigger. strMrLogic String For a Meter Reading trigger, this field is used to determine the logic of the schedule. It is set x (fixed) or t (floating). bolMrByWOClosed boolean If set to true, the Meter Reading trigger should check the reading when the WO is closed. bolCreateWorkOrderOnStartDate boolean If set to true, it indicates that a WorkOrder be created on the start date when the trigger is scheduled. intAssetID Integer Indicates the ID for an Asset associated with the ScheduledMaintenance that creates the trigger. For a Meter Reading trigger, this field needs to be populated with the Asset id of one of the ScheduledMaintenance Assets. strScheduleDescription String The description for the Schedule Trigger. intTRTriggerTime Integer For all the Time Schedule triggers except an hourly trigger, this field specifies time at which it will be triggered. It can have a value between 0 and 23. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 71 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed }","title":"Create ScheduleTrigger"},{"location":"ScheduleTrigger/index.html#get-all-scheduletrigger-list","text":"Get the all registered ScheduleTrigger list. URL : /api/scheduletrigger Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 32 , strAssignedUserIds : 13 8 9 intPriorityID : 4156, intWorkOrderStatusID : 4, strAssets : ASSET ABC (0010), ASSET DEF (0011) intSiteID : 3345, strAssignedUsers : John Doe, Samuel Smith , intRequestedByUserID : 667, strEmailUserGuest: , dtmDateCreated: , strAssetIds: 9 78 675 , dtmDateCompleted: , intCompletedByUserID:555 ... __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all ScheduleTrigger list"},{"location":"ScheduleTrigger/index.html#update-scheduletrigger","text":"Update the ScheduleTrigger by Id URL : /api/scheduletrigger/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ScheduleTrigger. Param Type Description bolTSWFriday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Friday. bolTSWMonday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Monday. bolTSWSaturday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Saturday. bolTSWSunday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Sunday. bolTSWThursday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Thursday. bolTSWTuesday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Tuesday. bolTSWWednesday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Wednesday. strDatLogicHourly String For a Time Schedule trigger, this field shows the logic of the hourly setting. It is set to x (fixed) or t (floating). strDatLogicDaily String For a Time Schedule trigger, this field shows the logic of the daily setting. It is set to x (fixed) or t (floating). strDatLogicMonthly String For a Time Schedule trigger, this field shows the logic of the monthly setting. It is set to x (fixed) or t (floating). strDatLogicYearly String For a Time Schedule trigger, this field shows the logic of the yearly setting. It is set to x (fixed) or t (floating). dblLastMeterReading double For a Meter Reading trigger, this field identifies the last meter reading recorded. dblRMeterReading double For a Meter Reading trigger, this field specifies the interval in which it should be triggered (Ex: Every 90 hours). dblROMeterReading double For a Meter Reading trigger, this field specifies the value when it should be triggered (Ex: When Hours (h) Reading is greater than 10). dblRREndBy double For a Meter Reading trigger, this field specifies the End By Reading configured for the trigger. If no End By is configured, it defaults to 0. dblRRStart double For a Meter Reading trigger, this field specifies the Start At Reading configured for the trigger. If no Start At is configured, it defaults to 0. dtmLastTriggered timestamp The date and time which the trigger was triggered last. intAssetEventTypeID Integer For an Event trigger, this field specifies the ID of the AssetEventType associated with the trigger. intRMeterReadingUnitID Integer For a Meter Reading trigger, this field specifies ID of MeterReadingUnit associated with the trigger when the trigger is configured for Every reading of the unit. intROMeterReadingUnitID Integer For a Meter Reading trigger, this field specifies ID of MeterReadingUnit associated with the trigger when the trigger is configured based on a condition. intRREndAfter Integer For Meter Reading trigger, it specifies the reading after which to stop the trigger. intScheduledMaintenanceID Integer The ID of the ScheduledMaintenance associated with the trigger. intTREndAfter Integer This field is used to determine after how many occurrences the trigger should be stopped. intTSDEveryDays Integer For a Time Schedule trigger that is configured to be daily, it denotes the daily rate of repetition associated with the trigger. intTSHEveryHours Integer For a Time Schedule trigger that is configured to be hourly, it denotes the hourly rate of repetition associated with the trigger. intTSMDayOfMonth Integer For a Time Schedule trigger that is configured to be monthly, it denotes the day of the month associated with the trigger. intTSMEveryMonths Integer For Time Schedule trigger that is configured to be monthly, it denotes the monthly rate of repetition associated with the trigger. intTSWEveryWeeks Integer For a Time Schedule trigger that is configured to be weekly, it denotes the weekly rate of repetition associated with the trigger. intTSYDayOfMonth Integer For a Time Schedule trigger that is configured to be yearly, it denotes the day of the month associated with the trigger. intTSYEveryYears Integer For a Time Schedule trigger that is configured to be yearly, it denotes the yearly rate of repetition associated with the trigger. intTSYMonthOfYear Integer For a Time Schedule trigger that is configured to be yearly, it denotes the month of the year associated with the trigger. Do note that the months start at 0. For eg: The year starts at January (0) and ends with December (11). strROType String For a Meter Reading trigger, this field is the Trigger Meter (When) Comparison. It is set to l (less than), g (greater than), or empty if not meter reading based. strRRType String It is the Trigger Schedule No End Date. It is set to empty if not time based, n (no end date), b (has a end date). strRType String For a Meter Reading trigger, this field is the Trigger Meter Type. It is set to e (every), o (other), empty if not meter reading based. strTRType String It is the Trigger Reading End type. It is set to n (no end reading), b (end by reading). strTSType String It is the Trigger Schedule Type. It is set to h (hourly), d (daily), w (weekly), m (monthly), y (yearly). strType String This field denotes the type of the Schedule Trigger. It is set to t for Time Schedule trigger, r for Meter Reading Trigger and e for an Event Trigger. strMrLogic String For a Meter Reading trigger, this field is used to determine the logic of the schedule. It is set x (fixed) or t (floating). bolMrByWOClosed boolean If set to true, the Meter Reading trigger should check the reading when the WO is closed. bolCreateWorkOrderOnStartDate boolean If set to true, it indicates that a WorkOrder be created on the start date when the trigger is scheduled. intAssetID Integer Indicates the ID for an Asset associated with the ScheduledMaintenance that creates the trigger. For a Meter Reading trigger, this field needs to be populated with the Asset id of one of the ScheduledMaintenance Assets. strScheduleDescription String The description for the Schedule Trigger. intTRTriggerTime Integer For all the Time Schedule triggers except an hourly trigger, this field specifies time at which it will be triggered. It can have a value between 0 and 23. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update ScheduleTrigger"},{"location":"ScheduleTrigger/index.html#delete-scheduletrigger","text":"Delete a ScheduleTrigger by Id URL : /api/scheduletrigger/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ScheduleTrigger. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete ScheduleTrigger"},{"location":"ScheduledMaintenance/index.html","text":"Create ScheduledMaintenace A ScheduledMaintenace represents a Maintenance job that is to be done and executed by the assigned user. It contains information about the ScheduledMaintenace Maintenance Type, Date created, Priority level, Site it resides in, Asset(s) involved, and assigned User. See the MaintennaceType, SheduledMaintenaceUser, SheduledMaintenancePart, and ScheduledMaintenanceAsset objects for more details and information. You can have multiple ScheduledMaintenace associated in your CMMS. Create a ScheduledMaintenace if ScheduledMaintenace does not already exist. URL : /api/scheduledmaintenace Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intPriorityID Integer The ID of the priority level for this scheduled maintenace. For getting possible values, please refer to the Priority section. intSiteID Integer For multi-sites tenants, the ID of the site where the maintenace is taking place at. A site is an asset itself, so for possible values, please refer to the Asset section. intStartAsWorkOrderStatusID Integer An Integer that represents the id of a WorkOrderStatus intScheduledMaintenanceStatusID Integer An integer that represents the status of the ScheduledMaintenace. Possible values STATUS_PAUSED=0, STATUS_PLAYING=1 intSuggestedCompletion Integer The estimated number of days that the generated work order should be completed by. dtmUpdatedDate timestamp The date and time when the ScheduledMaintenace was updated(UNIX epoch miliseconds). strCode String A code that represents the ScheduledMaintenace intProjectId Integer The ID of the Project. strCompletionNotes String A string that represents the completion notes on this ScheduledMaintenace. dtmCreateDate timestamp The date and time when the ScheduledMaintenace was created (UNIX epoch milliseconds). intMaintenanceTypeID Integer An integer that represents the id of the MaintenaceType intRequestorUserID Integer An integer that represents the id of a User who requested the scheduled maintenace. strDescription String As string that represents the description on the ScheduledMaintenace. bolCanFireSMwithOpenWO boolean If set to true, a new work order will be created even if there are existing work orders taht are not closed from this scheduled maintenace. bolWORequiresSignature boolean If set to true, indicates that the Work Orders generated from the ScheduledMaintenace need to be signed. A Work Order generated from the ScheduledMaintenace does not need to be signed if this is set to false. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed } Get all ScheduledMaintenace list Get the all registered ScheduledMaintenace list. URL : /api/scheduledmaintenace Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 5 , intPriorityID : Integer , intSiteID :Object, intStartAsWorkOrderStatusID :3, intScheduledMaintenanceStatusID : Integer , intSuggestedCompletion : Integer , dtmUpdatedDate :2020-11-09T07:35:22.052+00:00, strCode : String , intProjectID :Object, strCompletionNotes : String , dtmCreateDate :2020-11-09T07:35:22.052+00:00, intMaintenanceTypeID : Integer , intRequestorUserID : Integer , strDescription : String , bolCanFireSMWithOpenWO :true, bolWORequiresSignature :true, intAccountID :Object, intChargeDepartmentID :Object, intAssignedToUserID :Object, strWorkInstruction : String , dblTimeEstimatedHours :2.5 __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Get Single ScheduledMaintenace By Id Get a single ScheduledMaintenace by id if current ScheduledMaintenace was registered on it. URL : /api/scheduledmaintenance/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ScheduledMaintenace. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 5 , intPriorityID : Integer , intSiteID :Object, intStartAsWorkOrderStatusID :3, intScheduledMaintenanceStatusID : Integer , intSuggestedCompletion : Integer , dtmUpdatedDate :2020-11-09T07:35:22.052+00:00, strCode : String , intProjectID :Object, strCompletionNotes : String , dtmCreateDate :2020-11-09T07:35:22.052+00:00, intMaintenanceTypeID : Integer , intRequestorUserID : Integer , strDescription : String , bolCanFireSMWithOpenWO :true, bolWORequiresSignature :true, intAccountID :Object, intChargeDepartmentID :Object, intAssignedToUserID :Object, strWorkInstruction : String , dblTimeEstimatedHours :2.5 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If ScheduledMaintenace does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null } Update ScheduledMaintenace Update the ScheduledMaintenace by Id URL : /api/scheduledmaintenance/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ScheduledMaintenace. Param Type Description intPriorityID Integer The ID of the priority level for this scheduled maintenace. For getting possible values, please refer to the Priority section. intSiteID Integer For multi-sites tenants, the ID of the site where the maintenace is taking place at. A site is an asset itself, so for possible values, please refer to the Asset section. intStartAsWorkOrderStatusID Integer An Integer that represents the id of a WorkOrderStatus intScheduledMaintenanceStatusID Integer An integer that represents the status of the ScheduledMaintenance. Possible values STATUS_PAUSED=0, STATUS_PLAYING=1 intSuggestedCompletion Integer The estimated number of days that the generated work order should be completed by. dtmUpdatedDate timestamp The date and time when the ScheduledMaintenace was updated(UNIX epoch miliseconds). strCode String A code that represents the ScheduledMaintenace intProjectId Integer The ID of the Project. strCompletionNotes String A string that represents the completion notes on this ScheduledMaintenace. dtmCreateDate timestamp The date and time when the ScheduledMaintenance was created (UNIX epoch milliseconds). intMaintenanceTypeID Integer An integer that represents the id of the MaintenaceType intRequestorUserID Integer An integer that represents the id of a User who requested the scheduled maintenace. strDescription String As string that represents the description on the ScheduledMaintenance. bolCanFireSMwithOpenWO boolean If set to true, a new work order will be created even if there are existing work orders taht are not closed from this scheduled maintenace. bolWORequiresSignature boolean If set to true, indicates that the Work Orders generated from the ScheduledMaintenance need to be signed. A Work Order generated from the ScheduledMaintenace does not need to be signed if this is set to false. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed } Delete ScheduledMaintenace Delete a ScheduledMaintenace by Id URL : /api/scheduledmaintenance/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ScheduledMaintenace. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses : Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"ScheduledMaintenance"},{"location":"ScheduledMaintenance/index.html#create-scheduledmaintenace","text":"A ScheduledMaintenace represents a Maintenance job that is to be done and executed by the assigned user. It contains information about the ScheduledMaintenace Maintenance Type, Date created, Priority level, Site it resides in, Asset(s) involved, and assigned User. See the MaintennaceType, SheduledMaintenaceUser, SheduledMaintenancePart, and ScheduledMaintenanceAsset objects for more details and information. You can have multiple ScheduledMaintenace associated in your CMMS. Create a ScheduledMaintenace if ScheduledMaintenace does not already exist. URL : /api/scheduledmaintenace Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intPriorityID Integer The ID of the priority level for this scheduled maintenace. For getting possible values, please refer to the Priority section. intSiteID Integer For multi-sites tenants, the ID of the site where the maintenace is taking place at. A site is an asset itself, so for possible values, please refer to the Asset section. intStartAsWorkOrderStatusID Integer An Integer that represents the id of a WorkOrderStatus intScheduledMaintenanceStatusID Integer An integer that represents the status of the ScheduledMaintenace. Possible values STATUS_PAUSED=0, STATUS_PLAYING=1 intSuggestedCompletion Integer The estimated number of days that the generated work order should be completed by. dtmUpdatedDate timestamp The date and time when the ScheduledMaintenace was updated(UNIX epoch miliseconds). strCode String A code that represents the ScheduledMaintenace intProjectId Integer The ID of the Project. strCompletionNotes String A string that represents the completion notes on this ScheduledMaintenace. dtmCreateDate timestamp The date and time when the ScheduledMaintenace was created (UNIX epoch milliseconds). intMaintenanceTypeID Integer An integer that represents the id of the MaintenaceType intRequestorUserID Integer An integer that represents the id of a User who requested the scheduled maintenace. strDescription String As string that represents the description on the ScheduledMaintenace. bolCanFireSMwithOpenWO boolean If set to true, a new work order will be created even if there are existing work orders taht are not closed from this scheduled maintenace. bolWORequiresSignature boolean If set to true, indicates that the Work Orders generated from the ScheduledMaintenace need to be signed. A Work Order generated from the ScheduledMaintenace does not need to be signed if this is set to false. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed }","title":"Create ScheduledMaintenace"},{"location":"ScheduledMaintenance/index.html#get-all-scheduledmaintenace-list","text":"Get the all registered ScheduledMaintenace list. URL : /api/scheduledmaintenace Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 5 , intPriorityID : Integer , intSiteID :Object, intStartAsWorkOrderStatusID :3, intScheduledMaintenanceStatusID : Integer , intSuggestedCompletion : Integer , dtmUpdatedDate :2020-11-09T07:35:22.052+00:00, strCode : String , intProjectID :Object, strCompletionNotes : String , dtmCreateDate :2020-11-09T07:35:22.052+00:00, intMaintenanceTypeID : Integer , intRequestorUserID : Integer , strDescription : String , bolCanFireSMWithOpenWO :true, bolWORequiresSignature :true, intAccountID :Object, intChargeDepartmentID :Object, intAssignedToUserID :Object, strWorkInstruction : String , dblTimeEstimatedHours :2.5 __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all ScheduledMaintenace list"},{"location":"ScheduledMaintenance/index.html#get-single-scheduledmaintenace-by-id","text":"Get a single ScheduledMaintenace by id if current ScheduledMaintenace was registered on it. URL : /api/scheduledmaintenance/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ScheduledMaintenace. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 5 , intPriorityID : Integer , intSiteID :Object, intStartAsWorkOrderStatusID :3, intScheduledMaintenanceStatusID : Integer , intSuggestedCompletion : Integer , dtmUpdatedDate :2020-11-09T07:35:22.052+00:00, strCode : String , intProjectID :Object, strCompletionNotes : String , dtmCreateDate :2020-11-09T07:35:22.052+00:00, intMaintenanceTypeID : Integer , intRequestorUserID : Integer , strDescription : String , bolCanFireSMWithOpenWO :true, bolWORequiresSignature :true, intAccountID :Object, intChargeDepartmentID :Object, intAssignedToUserID :Object, strWorkInstruction : String , dblTimeEstimatedHours :2.5 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If ScheduledMaintenace does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Get Single ScheduledMaintenace By Id"},{"location":"ScheduledMaintenance/index.html#update-scheduledmaintenace","text":"Update the ScheduledMaintenace by Id URL : /api/scheduledmaintenance/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ScheduledMaintenace. Param Type Description intPriorityID Integer The ID of the priority level for this scheduled maintenace. For getting possible values, please refer to the Priority section. intSiteID Integer For multi-sites tenants, the ID of the site where the maintenace is taking place at. A site is an asset itself, so for possible values, please refer to the Asset section. intStartAsWorkOrderStatusID Integer An Integer that represents the id of a WorkOrderStatus intScheduledMaintenanceStatusID Integer An integer that represents the status of the ScheduledMaintenance. Possible values STATUS_PAUSED=0, STATUS_PLAYING=1 intSuggestedCompletion Integer The estimated number of days that the generated work order should be completed by. dtmUpdatedDate timestamp The date and time when the ScheduledMaintenace was updated(UNIX epoch miliseconds). strCode String A code that represents the ScheduledMaintenace intProjectId Integer The ID of the Project. strCompletionNotes String A string that represents the completion notes on this ScheduledMaintenace. dtmCreateDate timestamp The date and time when the ScheduledMaintenance was created (UNIX epoch milliseconds). intMaintenanceTypeID Integer An integer that represents the id of the MaintenaceType intRequestorUserID Integer An integer that represents the id of a User who requested the scheduled maintenace. strDescription String As string that represents the description on the ScheduledMaintenance. bolCanFireSMwithOpenWO boolean If set to true, a new work order will be created even if there are existing work orders taht are not closed from this scheduled maintenace. bolWORequiresSignature boolean If set to true, indicates that the Work Orders generated from the ScheduledMaintenance need to be signed. A Work Order generated from the ScheduledMaintenace does not need to be signed if this is set to false. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Update ScheduledMaintenace"},{"location":"ScheduledMaintenance/index.html#delete-scheduledmaintenace","text":"Delete a ScheduledMaintenace by Id URL : /api/scheduledmaintenance/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ScheduledMaintenace. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses : Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete ScheduledMaintenace"},{"location":"ScheduledMaintenanceAsset/index.html","text":"ScheduledMaintenanceAsset This object is used to link a scheduled maintenance with the assets the maintenance should be performed on. Create an ScheduledMaintenanceAsset if ScheduledMaintenanceAsset does not already exist. URL : /api/scheduledmaintenanceasset Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intScheduledMaintenanceID Integer The ID of the schedule maintenance. For getting possible values, please refer to the ScheduledMaintenance section. intAssetID Integer The ID of the asset. For getting possible values, please refer to the Asset section. Data example { intScheduledMaintenanceID : 2, intAssetID : 12 } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed } Get all ScheduledMaintenanceAsset list Get the all registered ScheduledMaintenanceAsset list. URL : /api/scheduledmaintenanceasset Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : ScheduledMaintenanceAsset list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intScheduledMaintenanceID : 2, intAssetID : 12, __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update ScheduledMaintenanceAsset Update the ScheduledMaintenanceAsset by Id URL : /api/scheduledmaintenanceasset/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the scheduledmaintenanceasset. Param Type Description intScheduledMaintenanceID Integer The ID of the schedule maintenance. For getting possible values, please refer to the ScheduledMaintenance section. intAssetID Integer The ID of the asset. For getting possible values, please refer to the Asset section. Data example { intScheduledMaintenanceID : 2, intAssetID : 12 } Success Response Code : 200 success Resonse example { msg : ScheduledMaintenanceAsset updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Get Single ScheduledMaintenanceAsset By Id Get a single ScheduledMaintenanceAsset by id if current scheduledmaintenanceasset was registered on it. URL : /api/scheduledmaintenanceasset/:scheduledmaintenanceassetid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the scheduledmaintenanceasset. Success Response: Code : 200 success Resonse example { msg : ScheduledMaintenanceAsset found! , data : { _id : 5f6896897b9884253cf6bdb6 , intScheduledMaintenanceID : 2, intAssetID : 12, __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If scheduledmaintenanceasset does not exist on server. Code : 404 Not Found Content example { msg : ScheduledMaintenanceAsset not found , data :null } Delete ScheduledMaintenanceAsset Delete the ScheduledMaintenanceAsset by Id URL : /api/scheduledmaintenanceasset/:scheduledmaintenanceassetid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the scheduledmaintenanceasset. Success Response Code : 200 success Resonse example { msg : ScheduledMaintenanceAsset deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no scheduledmaintenanceasset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"ScheduledMaintenanceAsset"},{"location":"ScheduledMaintenanceAsset/index.html#scheduledmaintenanceasset","text":"This object is used to link a scheduled maintenance with the assets the maintenance should be performed on. Create an ScheduledMaintenanceAsset if ScheduledMaintenanceAsset does not already exist. URL : /api/scheduledmaintenanceasset Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intScheduledMaintenanceID Integer The ID of the schedule maintenance. For getting possible values, please refer to the ScheduledMaintenance section. intAssetID Integer The ID of the asset. For getting possible values, please refer to the Asset section. Data example { intScheduledMaintenanceID : 2, intAssetID : 12 } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed }","title":"ScheduledMaintenanceAsset"},{"location":"ScheduledMaintenanceAsset/index.html#get-all-scheduledmaintenanceasset-list","text":"Get the all registered ScheduledMaintenanceAsset list. URL : /api/scheduledmaintenanceasset Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : ScheduledMaintenanceAsset list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intScheduledMaintenanceID : 2, intAssetID : 12, __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all ScheduledMaintenanceAsset list"},{"location":"ScheduledMaintenanceAsset/index.html#update-scheduledmaintenanceasset","text":"Update the ScheduledMaintenanceAsset by Id URL : /api/scheduledmaintenanceasset/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the scheduledmaintenanceasset. Param Type Description intScheduledMaintenanceID Integer The ID of the schedule maintenance. For getting possible values, please refer to the ScheduledMaintenance section. intAssetID Integer The ID of the asset. For getting possible values, please refer to the Asset section. Data example { intScheduledMaintenanceID : 2, intAssetID : 12 } Success Response Code : 200 success Resonse example { msg : ScheduledMaintenanceAsset updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update ScheduledMaintenanceAsset"},{"location":"ScheduledMaintenanceAsset/index.html#get-single-scheduledmaintenanceasset-by-id","text":"Get a single ScheduledMaintenanceAsset by id if current scheduledmaintenanceasset was registered on it. URL : /api/scheduledmaintenanceasset/:scheduledmaintenanceassetid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the scheduledmaintenanceasset. Success Response: Code : 200 success Resonse example { msg : ScheduledMaintenanceAsset found! , data : { _id : 5f6896897b9884253cf6bdb6 , intScheduledMaintenanceID : 2, intAssetID : 12, __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If scheduledmaintenanceasset does not exist on server. Code : 404 Not Found Content example { msg : ScheduledMaintenanceAsset not found , data :null }","title":"Get Single ScheduledMaintenanceAsset By Id"},{"location":"ScheduledMaintenanceAsset/index.html#delete-scheduledmaintenanceasset","text":"Delete the ScheduledMaintenanceAsset by Id URL : /api/scheduledmaintenanceasset/:scheduledmaintenanceassetid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the scheduledmaintenanceasset. Success Response Code : 200 success Resonse example { msg : ScheduledMaintenanceAsset deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no scheduledmaintenanceasset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete  ScheduledMaintenanceAsset"},{"location":"ScheduledMaintenancePart/index.html","text":"ScheduledMaintenancePart A ScheduledMaintenancePart represents the relationship between a particular ScheduledMaintenance within your CMMS and the associated Parts in the CMMS. It contains information about the Part and Asset that is tied to this ScheduledMaintenance. See the ScheduledMaintenance, Part, and ScheduledMaintenance objects for more details and information. Create an ScheduledMaintenancePart if ScheduledMaintenancePart does not already exist. URL : /api/scheduledmaintenancepart Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intScheduledMaintenanceID Integer An integer that uniquely identifies the ScheduledMaintenance that have associated Parts. intPartID Integer An integer that uniquely identifies the Part that is associated to a ScheduledMaintenance. intAssetID Integer The ID of the asset. For getting possible values, please refer to the Asset section. intStockID Integer An integer representing the id of the associated Stock qtySuggestedQuantity Integer An integer representing the suggested quantity to be used to complete the task Data example { intScheduledMaintenanceID : 2, intPartID : 12, intAssetID : 2, intStockID : 12, qtySuggestedQuantity : 2 } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed } Get all ScheduledMaintenancePart list Get the all registered ScheduledMaintenancePart list. URL : /api/scheduledmaintenancepart Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : ScheduledMaintenancePart list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intScheduledMaintenanceID : 2, intPartID : 12, intAssetID : 2, intStockID : 12, qtySuggestedQuantity : 2, __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update ScheduledMaintenancePart Update the ScheduledMaintenancePart by Id URL : /api/scheduledmaintenancepart/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the scheduledmaintenancepart. Param Type Description intScheduledMaintenanceID Integer An integer that uniquely identifies the ScheduledMaintenance that have associated Parts. intPartID Integer An integer that uniquely identifies the Part that is associated to a ScheduledMaintenance. intAssetID Integer The ID of the asset. For getting possible values, please refer to the Asset section. intStockID Integer An integer representing the id of the associated Stock qtySuggestedQuantity Integer An integer representing the suggested quantity to be used to complete the task Data example { intScheduledMaintenanceID : 2, intPartID : 12, intAssetID : 2, intStockID : 12, qtySuggestedQuantity : 2 } Success Response Code : 200 success Resonse example { msg : ScheduledMaintenancePart updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Get Single ScheduledMaintenancePart By Id Get a single ScheduledMaintenancePart by id if current scheduledmaintenancepart was registered on it. URL : /api/scheduledmaintenancepart/:scheduledmaintenancepartid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the scheduledmaintenancepart. Success Response: Code : 200 success Resonse example { msg : ScheduledMaintenancePart found! , data : { _id : 5f6896897b9884253cf6bdb6 , intScheduledMaintenanceID : 2, intPartID : 12, intAssetID : 2, intStockID : 12, qtySuggestedQuantity : 2, __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If scheduledmaintenancepart does not exist on server. Code : 404 Not Found Content example { msg : ScheduledMaintenancePart not found , data :null } Delete ScheduledMaintenancePart Delete the ScheduledMaintenancePart by Id URL : /api/scheduledmaintenancepart/:scheduledmaintenancepartid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the scheduledmaintenancepart. Success Response Code : 200 success Resonse example { msg : ScheduledMaintenancePart deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no ScheduledMaintenancePart available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"ScheduledMaintenancePart"},{"location":"ScheduledMaintenancePart/index.html#scheduledmaintenancepart","text":"A ScheduledMaintenancePart represents the relationship between a particular ScheduledMaintenance within your CMMS and the associated Parts in the CMMS. It contains information about the Part and Asset that is tied to this ScheduledMaintenance. See the ScheduledMaintenance, Part, and ScheduledMaintenance objects for more details and information. Create an ScheduledMaintenancePart if ScheduledMaintenancePart does not already exist. URL : /api/scheduledmaintenancepart Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intScheduledMaintenanceID Integer An integer that uniquely identifies the ScheduledMaintenance that have associated Parts. intPartID Integer An integer that uniquely identifies the Part that is associated to a ScheduledMaintenance. intAssetID Integer The ID of the asset. For getting possible values, please refer to the Asset section. intStockID Integer An integer representing the id of the associated Stock qtySuggestedQuantity Integer An integer representing the suggested quantity to be used to complete the task Data example { intScheduledMaintenanceID : 2, intPartID : 12, intAssetID : 2, intStockID : 12, qtySuggestedQuantity : 2 } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed }","title":"ScheduledMaintenancePart"},{"location":"ScheduledMaintenancePart/index.html#get-all-scheduledmaintenancepart-list","text":"Get the all registered ScheduledMaintenancePart list. URL : /api/scheduledmaintenancepart Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : ScheduledMaintenancePart list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intScheduledMaintenanceID : 2, intPartID : 12, intAssetID : 2, intStockID : 12, qtySuggestedQuantity : 2, __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all ScheduledMaintenancePart list"},{"location":"ScheduledMaintenancePart/index.html#update-scheduledmaintenancepart","text":"Update the ScheduledMaintenancePart by Id URL : /api/scheduledmaintenancepart/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the scheduledmaintenancepart. Param Type Description intScheduledMaintenanceID Integer An integer that uniquely identifies the ScheduledMaintenance that have associated Parts. intPartID Integer An integer that uniquely identifies the Part that is associated to a ScheduledMaintenance. intAssetID Integer The ID of the asset. For getting possible values, please refer to the Asset section. intStockID Integer An integer representing the id of the associated Stock qtySuggestedQuantity Integer An integer representing the suggested quantity to be used to complete the task Data example { intScheduledMaintenanceID : 2, intPartID : 12, intAssetID : 2, intStockID : 12, qtySuggestedQuantity : 2 } Success Response Code : 200 success Resonse example { msg : ScheduledMaintenancePart updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update ScheduledMaintenancePart"},{"location":"ScheduledMaintenancePart/index.html#get-single-scheduledmaintenancepart-by-id","text":"Get a single ScheduledMaintenancePart by id if current scheduledmaintenancepart was registered on it. URL : /api/scheduledmaintenancepart/:scheduledmaintenancepartid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the scheduledmaintenancepart. Success Response: Code : 200 success Resonse example { msg : ScheduledMaintenancePart found! , data : { _id : 5f6896897b9884253cf6bdb6 , intScheduledMaintenanceID : 2, intPartID : 12, intAssetID : 2, intStockID : 12, qtySuggestedQuantity : 2, __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If scheduledmaintenancepart does not exist on server. Code : 404 Not Found Content example { msg : ScheduledMaintenancePart not found , data :null }","title":"Get Single ScheduledMaintenancePart By Id"},{"location":"ScheduledMaintenancePart/index.html#delete-scheduledmaintenancepart","text":"Delete the ScheduledMaintenancePart by Id URL : /api/scheduledmaintenancepart/:scheduledmaintenancepartid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the scheduledmaintenancepart. Success Response Code : 200 success Resonse example { msg : ScheduledMaintenancePart deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no ScheduledMaintenancePart available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete  ScheduledMaintenancePart"},{"location":"ScheduledMaintenanceUser/index.html","text":"ScheduledMaintenanceUser A ScheduledMaintenanceUser represents the relationship between a particular ScheduledMaintenance within your CMMS and the associated User in the CMMS. It contains information about the Notification options available to notify the User. See the User and the ScheduledMaintenance objects for more details and information. Create an ScheduledMaintenanceUser if ScheduledMaintenanceUser does not already exist. URL : /api/scheduledmaintenanceuser Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intScheduledMaintenanceID Integer An integer that uniquely identifies the associated ScheduledMaintenance. intUserID Integer An integer that uniquely identifies the associated User. intUserID Integer An integer that uniquely identifies the associated User. bolNotifyOnAssignment Boolean If set to true, when a work order is triggered from the scheduled maintenance, then the user will be notified on work order assignment. bolNotifyOnCompletion Boolean If set to true, when a work order is triggered from the scheduled maintenance, then the user will be notified on work order completion. bolNotifyOnOnlineOffline Boolean If set to true, when a work order is triggered from the scheduled maintenance, then the user will be notified when the asset associated with the work order is set online/offline. bolNotifyOnStatusChange Boolean If set to true, when a work order is triggered from the scheduled maintenance, then the user will be notified when the status of the work order changes. bolNotifyOnTaskCompleted Boolean If set to true, when a work order is triggered from the scheduled maintenance, then the user will be notified on work order task completion. Data example { intScheduledMaintenanceID : 2, intUserID : 12, bolNotifyOnAssignment : false, bolNotifyOnCompletion : true, ... ... } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed } Get all ScheduledMaintenanceUser list Get the all registered ScheduledMaintenanceUser list. URL : /api/scheduledmaintenanceuser Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : ScheduledMaintenanceUser list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intScheduledMaintenanceID : 2, intUserID : 12, bolNotifyOnAssignment : false, bolNotifyOnCompletion : true, bolNotifyOnOnlineOffline : true, bolNotifyOnStatusChange : true, bolNotifyOnTaskCompleted : true, __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update ScheduledMaintenanceUser Update the ScheduledMaintenanceUser by Id URL : /api/scheduledmaintenanceuser/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the scheduledmaintenanceuser. Param Type Description intScheduledMaintenanceID Integer An integer that uniquely identifies the associated ScheduledMaintenance. intUserID Integer An integer that uniquely identifies the associated User. intUserID Integer An integer that uniquely identifies the associated User. bolNotifyOnAssignment Boolean If set to true, when a work order is triggered from the scheduled maintenance, then the user will be notified on work order assignment. bolNotifyOnCompletion Boolean If set to true, when a work order is triggered from the scheduled maintenance, then the user will be notified on work order completion. bolNotifyOnOnlineOffline Boolean If set to true, when a work order is triggered from the scheduled maintenance, then the user will be notified when the asset associated with the work order is set online/offline. bolNotifyOnStatusChange Boolean If set to true, when a work order is triggered from the scheduled maintenance, then the user will be notified when the status of the work order changes. bolNotifyOnTaskCompleted Boolean If set to true, when a work order is triggered from the scheduled maintenance, then the user will be notified on work order task completion. Data example { intScheduledMaintenanceID : 2, intUserID : 12, bolNotifyOnAssignment : false, bolNotifyOnCompletion : true, ... ... } Success Response Code : 200 success Resonse example { msg : ScheduledMaintenanceUser updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Get Single ScheduledMaintenanceUser By Id Get a single ScheduledMaintenanceUser by id if current scheduledmaintenanceuser was registered on it. URL : /api/scheduledmaintenanceuser/:scheduledmaintenanceuserid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the scheduledmaintenanceuser. Success Response: Code : 200 success Resonse example { msg : ScheduledMaintenanceUser found! , data : { _id : 5f6896897b9884253cf6bdb6 , intScheduledMaintenanceID : 2, intUserID : 12, bolNotifyOnAssignment : false, bolNotifyOnCompletion : true, bolNotifyOnOnlineOffline : true, bolNotifyOnStatusChange : true, bolNotifyOnTaskCompleted : true, __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If scheduledmaintenanceuser does not exist on server. Code : 404 Not Found Content example { msg : ScheduledMaintenanceUser not found , data :null } Delete ScheduledMaintenanceUser Delete the ScheduledMaintenanceUser by Id URL : /api/scheduledmaintenanceuser/:scheduledmaintenanceuserid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the scheduledmaintenanceuser. Success Response Code : 200 success Resonse example { msg : ScheduledMaintenanceUser deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no scheduledmaintenanceuser available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"ScheduledMaintenanceUser"},{"location":"ScheduledMaintenanceUser/index.html#scheduledmaintenanceuser","text":"A ScheduledMaintenanceUser represents the relationship between a particular ScheduledMaintenance within your CMMS and the associated User in the CMMS. It contains information about the Notification options available to notify the User. See the User and the ScheduledMaintenance objects for more details and information. Create an ScheduledMaintenanceUser if ScheduledMaintenanceUser does not already exist. URL : /api/scheduledmaintenanceuser Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intScheduledMaintenanceID Integer An integer that uniquely identifies the associated ScheduledMaintenance. intUserID Integer An integer that uniquely identifies the associated User. intUserID Integer An integer that uniquely identifies the associated User. bolNotifyOnAssignment Boolean If set to true, when a work order is triggered from the scheduled maintenance, then the user will be notified on work order assignment. bolNotifyOnCompletion Boolean If set to true, when a work order is triggered from the scheduled maintenance, then the user will be notified on work order completion. bolNotifyOnOnlineOffline Boolean If set to true, when a work order is triggered from the scheduled maintenance, then the user will be notified when the asset associated with the work order is set online/offline. bolNotifyOnStatusChange Boolean If set to true, when a work order is triggered from the scheduled maintenance, then the user will be notified when the status of the work order changes. bolNotifyOnTaskCompleted Boolean If set to true, when a work order is triggered from the scheduled maintenance, then the user will be notified on work order task completion. Data example { intScheduledMaintenanceID : 2, intUserID : 12, bolNotifyOnAssignment : false, bolNotifyOnCompletion : true, ... ... } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed }","title":"ScheduledMaintenanceUser"},{"location":"ScheduledMaintenanceUser/index.html#get-all-scheduledmaintenanceuser-list","text":"Get the all registered ScheduledMaintenanceUser list. URL : /api/scheduledmaintenanceuser Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : ScheduledMaintenanceUser list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intScheduledMaintenanceID : 2, intUserID : 12, bolNotifyOnAssignment : false, bolNotifyOnCompletion : true, bolNotifyOnOnlineOffline : true, bolNotifyOnStatusChange : true, bolNotifyOnTaskCompleted : true, __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all ScheduledMaintenanceUser list"},{"location":"ScheduledMaintenanceUser/index.html#update-scheduledmaintenanceuser","text":"Update the ScheduledMaintenanceUser by Id URL : /api/scheduledmaintenanceuser/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the scheduledmaintenanceuser. Param Type Description intScheduledMaintenanceID Integer An integer that uniquely identifies the associated ScheduledMaintenance. intUserID Integer An integer that uniquely identifies the associated User. intUserID Integer An integer that uniquely identifies the associated User. bolNotifyOnAssignment Boolean If set to true, when a work order is triggered from the scheduled maintenance, then the user will be notified on work order assignment. bolNotifyOnCompletion Boolean If set to true, when a work order is triggered from the scheduled maintenance, then the user will be notified on work order completion. bolNotifyOnOnlineOffline Boolean If set to true, when a work order is triggered from the scheduled maintenance, then the user will be notified when the asset associated with the work order is set online/offline. bolNotifyOnStatusChange Boolean If set to true, when a work order is triggered from the scheduled maintenance, then the user will be notified when the status of the work order changes. bolNotifyOnTaskCompleted Boolean If set to true, when a work order is triggered from the scheduled maintenance, then the user will be notified on work order task completion. Data example { intScheduledMaintenanceID : 2, intUserID : 12, bolNotifyOnAssignment : false, bolNotifyOnCompletion : true, ... ... } Success Response Code : 200 success Resonse example { msg : ScheduledMaintenanceUser updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update ScheduledMaintenanceUser"},{"location":"ScheduledMaintenanceUser/index.html#get-single-scheduledmaintenanceuser-by-id","text":"Get a single ScheduledMaintenanceUser by id if current scheduledmaintenanceuser was registered on it. URL : /api/scheduledmaintenanceuser/:scheduledmaintenanceuserid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the scheduledmaintenanceuser. Success Response: Code : 200 success Resonse example { msg : ScheduledMaintenanceUser found! , data : { _id : 5f6896897b9884253cf6bdb6 , intScheduledMaintenanceID : 2, intUserID : 12, bolNotifyOnAssignment : false, bolNotifyOnCompletion : true, bolNotifyOnOnlineOffline : true, bolNotifyOnStatusChange : true, bolNotifyOnTaskCompleted : true, __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If scheduledmaintenanceuser does not exist on server. Code : 404 Not Found Content example { msg : ScheduledMaintenanceUser not found , data :null }","title":"Get Single ScheduledMaintenanceUser By Id"},{"location":"ScheduledMaintenanceUser/index.html#delete-scheduledmaintenanceuser","text":"Delete the ScheduledMaintenanceUser by Id URL : /api/scheduledmaintenanceuser/:scheduledmaintenanceuserid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the scheduledmaintenanceuser. Success Response Code : 200 success Resonse example { msg : ScheduledMaintenanceUser deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no scheduledmaintenanceuser available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete  ScheduledMaintenanceUser"},{"location":"ScheduledTask/index.html","text":"ScheduledTask A ScheduledTask represents the relationship between a particular ScheduledMaintenance within your CMMS and the associated Task in the CMMS. It contains information about the assigned User, Description, Time estimate (hours), and Task Type. See the User object for more details and information. Create an ScheduledTask if ScheduledTask does not already exist. URL : /api/scheduledtask Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intTaskType Integer An integer representing the type of the task. Possible values are : 0 for General, 1 for Text Result, 2 for Meter Reading, and 3 for Inspection Task. dblTimeEstimatedHours Double An estimation of how many hours it should take to perform the task intAssetID Integer An integer that uniquely identifies the Asset that is associated with the ScheduledTask intAssignedToUserID Integer An integer that represents the id of a User who the task is assigned to intMeterReadingUnitID Integer An integer that represents the id of a MeterReadingUnit associated to the task intOrder Integer An integer representing the relative order in the Scheduled Maintenance of this task. This should be unique to the Scheduled Maintenance intParentScheduledTaskID Integer An integer that represents the id of the parent scheduled task intScheduledMaintenanceID Integer An integer that represents the id of a ScheduledMaintenance associated to the task strDescription String A string that describes the task. E.g. - Replace the air filter Data example { intTaskType : 2, dblTimeEstimatedHours : 1.2, intAssetID : 2, intAssignedToUserID : 1, ... ... } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed } Get all ScheduledTask list Get the all registered ScheduledTask list. URL : /api/scheduledtask Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : ScheduledTask list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intTaskType : 2, dblTimeEstimatedHours : 1.2, intAssetID : 2, intAssignedToUserID : 1, intMeterReadingUnitID : 1, intOrder : 3, intParentScheduledTaskID : 1, intScheduledMaintenanceID : 2, strDescription : strDescription , __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update ScheduledTask Update the ScheduledTask by Id URL : /api/scheduledtask/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the scheduledtask. Param Type Description intTaskType Integer An integer representing the type of the task. Possible values are : 0 for General, 1 for Text Result, 2 for Meter Reading, and 3 for Inspection Task. dblTimeEstimatedHours Double An estimation of how many hours it should take to perform the task intAssetID Integer An integer that uniquely identifies the Asset that is associated with the ScheduledTask intAssignedToUserID Integer An integer that represents the id of a User who the task is assigned to intMeterReadingUnitID Integer An integer that represents the id of a MeterReadingUnit associated to the task intOrder Integer An integer representing the relative order in the Scheduled Maintenance of this task. This should be unique to the Scheduled Maintenance intParentScheduledTaskID Integer An integer that represents the id of the parent scheduled task intScheduledMaintenanceID Integer An integer that represents the id of a ScheduledMaintenance associated to the task strDescription String A string that describes the task. E.g. - Replace the air filter Data example { intTaskType : 2, dblTimeEstimatedHours : 1.2, intAssetID : 2, intAssignedToUserID : 1, ... ... } Success Response Code : 200 success Resonse example { msg : ScheduledTask updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Get Single ScheduledTask By Id Get a single ScheduledTask by id if current scheduledtask was registered on it. URL : /api/scheduledtask/:scheduledtaskid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the scheduledtask. Success Response: Code : 200 success Resonse example { msg : ScheduledTask found! , data : { _id : 5f6896897b9884253cf6bdb6 , intTaskType : 2, dblTimeEstimatedHours : 1.2, intAssetID : 2, intAssignedToUserID : 1, intMeterReadingUnitID : 1, intOrder : 3, intParentScheduledTaskID : 1, intScheduledMaintenanceID : 2, strDescription : strDescription , __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If scheduledtask does not exist on server. Code : 404 Not Found Content example { msg : ScheduledTask not found , data :null } Delete ScheduledTask Delete the ScheduledTask by Id URL : /api/scheduledtask/:scheduledtaskid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the scheduledtask. Success Response Code : 200 success Resonse example { msg : ScheduledTask deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no scheduledtask available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"ScheduledTask"},{"location":"ScheduledTask/index.html#scheduledtask","text":"A ScheduledTask represents the relationship between a particular ScheduledMaintenance within your CMMS and the associated Task in the CMMS. It contains information about the assigned User, Description, Time estimate (hours), and Task Type. See the User object for more details and information. Create an ScheduledTask if ScheduledTask does not already exist. URL : /api/scheduledtask Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intTaskType Integer An integer representing the type of the task. Possible values are : 0 for General, 1 for Text Result, 2 for Meter Reading, and 3 for Inspection Task. dblTimeEstimatedHours Double An estimation of how many hours it should take to perform the task intAssetID Integer An integer that uniquely identifies the Asset that is associated with the ScheduledTask intAssignedToUserID Integer An integer that represents the id of a User who the task is assigned to intMeterReadingUnitID Integer An integer that represents the id of a MeterReadingUnit associated to the task intOrder Integer An integer representing the relative order in the Scheduled Maintenance of this task. This should be unique to the Scheduled Maintenance intParentScheduledTaskID Integer An integer that represents the id of the parent scheduled task intScheduledMaintenanceID Integer An integer that represents the id of a ScheduledMaintenance associated to the task strDescription String A string that describes the task. E.g. - Replace the air filter Data example { intTaskType : 2, dblTimeEstimatedHours : 1.2, intAssetID : 2, intAssignedToUserID : 1, ... ... } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed }","title":"ScheduledTask"},{"location":"ScheduledTask/index.html#get-all-scheduledtask-list","text":"Get the all registered ScheduledTask list. URL : /api/scheduledtask Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : ScheduledTask list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intTaskType : 2, dblTimeEstimatedHours : 1.2, intAssetID : 2, intAssignedToUserID : 1, intMeterReadingUnitID : 1, intOrder : 3, intParentScheduledTaskID : 1, intScheduledMaintenanceID : 2, strDescription : strDescription , __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all ScheduledTask list"},{"location":"ScheduledTask/index.html#update-scheduledtask","text":"Update the ScheduledTask by Id URL : /api/scheduledtask/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the scheduledtask. Param Type Description intTaskType Integer An integer representing the type of the task. Possible values are : 0 for General, 1 for Text Result, 2 for Meter Reading, and 3 for Inspection Task. dblTimeEstimatedHours Double An estimation of how many hours it should take to perform the task intAssetID Integer An integer that uniquely identifies the Asset that is associated with the ScheduledTask intAssignedToUserID Integer An integer that represents the id of a User who the task is assigned to intMeterReadingUnitID Integer An integer that represents the id of a MeterReadingUnit associated to the task intOrder Integer An integer representing the relative order in the Scheduled Maintenance of this task. This should be unique to the Scheduled Maintenance intParentScheduledTaskID Integer An integer that represents the id of the parent scheduled task intScheduledMaintenanceID Integer An integer that represents the id of a ScheduledMaintenance associated to the task strDescription String A string that describes the task. E.g. - Replace the air filter Data example { intTaskType : 2, dblTimeEstimatedHours : 1.2, intAssetID : 2, intAssignedToUserID : 1, ... ... } Success Response Code : 200 success Resonse example { msg : ScheduledTask updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update ScheduledTask"},{"location":"ScheduledTask/index.html#get-single-scheduledtask-by-id","text":"Get a single ScheduledTask by id if current scheduledtask was registered on it. URL : /api/scheduledtask/:scheduledtaskid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the scheduledtask. Success Response: Code : 200 success Resonse example { msg : ScheduledTask found! , data : { _id : 5f6896897b9884253cf6bdb6 , intTaskType : 2, dblTimeEstimatedHours : 1.2, intAssetID : 2, intAssignedToUserID : 1, intMeterReadingUnitID : 1, intOrder : 3, intParentScheduledTaskID : 1, intScheduledMaintenanceID : 2, strDescription : strDescription , __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If scheduledtask does not exist on server. Code : 404 Not Found Content example { msg : ScheduledTask not found , data :null }","title":"Get Single ScheduledTask By Id"},{"location":"ScheduledTask/index.html#delete-scheduledtask","text":"Delete the ScheduledTask by Id URL : /api/scheduledtask/:scheduledtaskid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the scheduledtask. Success Response Code : 200 success Resonse example { msg : ScheduledTask deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no scheduledtask available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete  ScheduledTask"},{"location":"SiteUser/index.html","text":"SiteUser For a multi-sites tenant, this object is used to link a user to a site. Create an SiteUser if SiteUser does not already exist. URL : /api/siteuser Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intSiteID Integer For multi-site tenants, the ID of the site the work order is related to. A site is an asset itself, so for possible values, please refer to the Asset section. intUserID Integer The ID of the user. For getting possible values, please refer to the User section. Data example { intSiteID : 2, intUserID : 12 } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed } Get all SiteUser list Get the all registered siteuser list. URL : /api/siteuser Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : SiteUser list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intSiteID : 2, intUserID : 12, __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update SiteUser Update the SiteUser by Id URL : /api/siteuser/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the siteuser. Param Type Description intSiteID Integer For multi-site tenants, the ID of the site the work order is related to. A site is an asset itself, so for possible values, please refer to the Asset section. intUserID Integer The ID of the user. For getting possible values, please refer to the User section. Data example { intSiteID : 2, intUserID : 12 } Success Response Code : 200 success Resonse example { msg : SiteUser updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Get Single SiteUser By Id Get a single SiteUser by id if current siteuser was registered on it. URL : /api/siteuser/:siteuserid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the siteuser. Success Response: Code : 200 success Resonse example { msg : SiteUser found! , data : { _id : 5f6896897b9884253cf6bdb6 , intSiteID : 2, intUserID : 12, __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If siteuser does not exist on server. Code : 404 Not Found Content example { msg : SiteUser not found , data :null } Delete SiteUser Delete the SiteUser by Id URL : /api/siteuser/:siteuserid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the siteuser. Success Response Code : 200 success Resonse example { msg : SiteUser deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no siteuser available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"SiteUser"},{"location":"SiteUser/index.html#siteuser","text":"For a multi-sites tenant, this object is used to link a user to a site. Create an SiteUser if SiteUser does not already exist. URL : /api/siteuser Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intSiteID Integer For multi-site tenants, the ID of the site the work order is related to. A site is an asset itself, so for possible values, please refer to the Asset section. intUserID Integer The ID of the user. For getting possible values, please refer to the User section. Data example { intSiteID : 2, intUserID : 12 } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed }","title":"SiteUser"},{"location":"SiteUser/index.html#get-all-siteuser-list","text":"Get the all registered siteuser list. URL : /api/siteuser Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : SiteUser list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intSiteID : 2, intUserID : 12, __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all SiteUser list"},{"location":"SiteUser/index.html#update-siteuser","text":"Update the SiteUser by Id URL : /api/siteuser/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the siteuser. Param Type Description intSiteID Integer For multi-site tenants, the ID of the site the work order is related to. A site is an asset itself, so for possible values, please refer to the Asset section. intUserID Integer The ID of the user. For getting possible values, please refer to the User section. Data example { intSiteID : 2, intUserID : 12 } Success Response Code : 200 success Resonse example { msg : SiteUser updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update SiteUser"},{"location":"SiteUser/index.html#get-single-siteuser-by-id","text":"Get a single SiteUser by id if current siteuser was registered on it. URL : /api/siteuser/:siteuserid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the siteuser. Success Response: Code : 200 success Resonse example { msg : SiteUser found! , data : { _id : 5f6896897b9884253cf6bdb6 , intSiteID : 2, intUserID : 12, __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If siteuser does not exist on server. Code : 404 Not Found Content example { msg : SiteUser not found , data :null }","title":"Get Single SiteUser By Id"},{"location":"SiteUser/index.html#delete-siteuser","text":"Delete the SiteUser by Id URL : /api/siteuser/:siteuserid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the siteuser. Success Response Code : 200 success Resonse example { msg : SiteUser deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no siteuser available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete  SiteUser"},{"location":"SiteUserGroup/index.html","text":"SiteUserGroup For multi-sites tenants, this object does the link between site users and groups. For more details about site users, please refer to the SiteUser section. Create an SiteUserGroup if SiteUserGroup does not already exist. URL : /api/siteusergroup Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intSiteUserID Integer The ID of the site user. For getting possible values, please refer to the SiteUser section. intGroupID Integer The ID of the group. For getting possible values, please refer to the User section. Data example { intSiteUserID : 2, intGroupID : 12 } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed } Get all SiteUserGroup list Get the all registered siteusergroup list. URL : /api/siteusergroup Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : SiteUserGroup list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intSiteUserID : 2, intGroupID : 12, __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update SiteUserGroup Update the SiteUserGroup by Id URL : /api/siteusergroup/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the siteusergroup. Param Type Description intSiteUserID Integer The ID of the site user. For getting possible values, please refer to the SiteUser section. intGroupID Integer The ID of the group. For getting possible values, please refer to the User section. Data example { intSiteUserID : 2, intGroupID : 12 } Success Response Code : 200 success Resonse example { msg : SiteUserGroup updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Get Single SiteUserGroup By Id Get a single SiteUserGroup by id if current siteusergroup was registered on it. URL : /api/siteusergroup/:siteusergroupid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the siteusergroup. Success Response: Code : 200 success Resonse example { msg : SiteUserGroup found! , data : { _id : 5f6896897b9884253cf6bdb6 , intSiteUserID : 2, intGroupID : 12, __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If siteusergroup does not exist on server. Code : 404 Not Found Content example { msg : SiteUserGroup not found , data :null } Delete SiteUserGroup Delete the SiteUserGroup by Id URL : /api/siteusergroup/:siteusergroupid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the siteusergroup. Success Response Code : 200 success Resonse example { msg : SiteUserGroup deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no siteusergroup available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"SiteUserGroup"},{"location":"SiteUserGroup/index.html#siteusergroup","text":"For multi-sites tenants, this object does the link between site users and groups. For more details about site users, please refer to the SiteUser section. Create an SiteUserGroup if SiteUserGroup does not already exist. URL : /api/siteusergroup Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intSiteUserID Integer The ID of the site user. For getting possible values, please refer to the SiteUser section. intGroupID Integer The ID of the group. For getting possible values, please refer to the User section. Data example { intSiteUserID : 2, intGroupID : 12 } Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed }","title":"SiteUserGroup"},{"location":"SiteUserGroup/index.html#get-all-siteusergroup-list","text":"Get the all registered siteusergroup list. URL : /api/siteusergroup Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : SiteUserGroup list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intSiteUserID : 2, intGroupID : 12, __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all SiteUserGroup list"},{"location":"SiteUserGroup/index.html#update-siteusergroup","text":"Update the SiteUserGroup by Id URL : /api/siteusergroup/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the siteusergroup. Param Type Description intSiteUserID Integer The ID of the site user. For getting possible values, please refer to the SiteUser section. intGroupID Integer The ID of the group. For getting possible values, please refer to the User section. Data example { intSiteUserID : 2, intGroupID : 12 } Success Response Code : 200 success Resonse example { msg : SiteUserGroup updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update SiteUserGroup"},{"location":"SiteUserGroup/index.html#get-single-siteusergroup-by-id","text":"Get a single SiteUserGroup by id if current siteusergroup was registered on it. URL : /api/siteusergroup/:siteusergroupid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the siteusergroup. Success Response: Code : 200 success Resonse example { msg : SiteUserGroup found! , data : { _id : 5f6896897b9884253cf6bdb6 , intSiteUserID : 2, intGroupID : 12, __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If siteusergroup does not exist on server. Code : 404 Not Found Content example { msg : SiteUserGroup not found , data :null }","title":"Get Single SiteUserGroup By Id"},{"location":"SiteUserGroup/index.html#delete-siteusergroup","text":"Delete the SiteUserGroup by Id URL : /api/siteusergroup/:siteusergroupid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the siteusergroup. Success Response Code : 200 success Resonse example { msg : SiteUserGroup deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no siteusergroup available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete  SiteUserGroup"},{"location":"User/index.html","text":"Create User This object represents a user that can access and use the CMMS or a user group. Note: Only inactive users can be added through the API (with intUserStatusID set to 0). The user has to be activated using the CMMS. Create an User if User does not already exist. URL : /api/users/register Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Required Type Description strFullName yes String The full name of the user or user group. intUserStatusID optional Integer This can take the value 0 or 1 . A status 1 means that the user is active, whereas a status 0 means that the user is currently not activated and cannot access and use the CMMS. strTelephone2 optional String Secondary phone number. strEmailAddress yes String Email address. strUserTitle optional String The title of the user. For example : \"Head of Operations\" or \"Program Director\" . strPersonnelCode optional String Field that can be used to store a personnel code associated to this user. strUserName yes String The username that will be used by the user to access the CMMS. strTelephone yes String Primary phone number. strNotes optional String This fied can contain technical notes about the user. For example : \"Data imported from V2: language=English\" . strRequestNotes optional String Contains a string stating when the account was created. For example : \"Wed Nov 23 09:43:49 EST 2011: Account created.\" . bolGroup optional boolean This can take the value 0 or 1 or null. A value of 1 means the object represents a user group. bolApiManaged optional boolean The boolean value represents if the user is created through the API, in an external system. User information is managed in the Originating system. strPreferences optional String Technical string defining the user's preferences. password yes String user's password. passwordconfirm yes String password confirm. Data example All fields must be sent. { strFullName : first last , strTelephone : 5141257 , strEmailAddress : test@gmai.com , bolGroup :true, password : test!@3 , passwordconfirm : test!@3 , ... ... } Success Response: Code : 200 success Resonse example { msg : User added successfully!!! , data : {id: 5f68a89c247532232419483c } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed. Code : 400 BAD REQUEST Content example { msg : Email is required } Or Condition : Internal Server Error. Code : 500 Content example { msg : Internal Server error , } Get all user list Get the all registered user list. URL : /api/users/userlist Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : null, data : [ { _id : 5f6212d8ed7daa16dcbf44ca , strFullName : test demo , strEmailAddress : pavel@gmail.com , strTelephone : 123456 , strTelephone2 : 1 , intUserStatusID : 1, strUserTitle : 2 , strPersonnelCode : , strUserName : 3 , strNotes : 4 , strRequestNotes : sdfddd , bolGroup : true, bolApiManaged : true, strPreferences : 6 , __v : 0 }, { _id : 5f68a89c247532232419483c , strFullName : ttest pavel , strEmailAddress : olga@gmail.com , strTelephone : 45789 , strTelephone2 : , intUserStatusID : 0, strUserTitle : , strPersonnelCode : , strUserName : , strNotes : , strRequestNotes : , bolGroup : false, bolApiManaged : false, strPreferences : , __v : 0 } ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error , data :null } Get Single User By Id Get a single User by id if current user was registered on it. URL : /api/users/:uid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the user. Success Response: Code : 200 success Resonse example { msg : null, data : { user : { _id : 5f6212d8ed7daa16dcbf44ca , strFullName : test demo , password : $2b$10$jIqho0m8oHKsXTNIk6xFcu0kSBme4zNieLyrm.cFDLYMCpVzRcKPq , strEmailAddress : test@gmail.com , strTelephone : strTelephone , strTelephone2 : , intUserStatusID : 1, strUserTitle : strUserTitle , strPersonnelCode : , strUserName : 3 , strNotes : strNotes , strRequestNotes : strRequste notes , bolGroup : true, bolApiManaged : true, strPreferences : 6 , __v : 0 } } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If user does not exist on server. Code : 404 Not Found Content example { msg : User not found , data :null } Update User Update the User by Id URL : /api/users/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the user. Param Required Type Description strFullName yes String The full name of the user or user group. intUserStatusID optional Integer This can take the value 0 or 1 . A status 1 means that the user is active, whereas a status 0 means that the user is currently not activated and cannot access and use the CMMS. strTelephone2 optional String Secondary phone number. strEmailAddress yes String Email address. strUserTitle optional String The title of the user. For example : \"Head of Operations\" or \"Program Director\" . strPersonnelCode optional String Field that can be used to store a personnel code associated to this user. strUserName yes String The username that will be used by the user to access the CMMS. strTelephone yes String Primary phone number. strNotes optional String This fied can contain technical notes about the user. For example : \"Data imported from V2: language=English\" . strRequestNotes optional String Contains a string stating when the account was created. For example : \"Wed Nov 23 09:43:49 EST 2011: Account created.\" . bolGroup optional boolean This can take the value 0 or 1 or null. A value of 1 means the object represents a user group. bolApiManaged optional boolean The boolean value represents if the user is created through the API, in an external system. User information is managed in the Originating system. strPreferences optional String Technical string defining the user's preferences. password yes String user's password. passwordconfirm yes String password confirm. Data example All fields must be sent. { strFullName : first last , strTelephone : 5141257 , strEmailAddress : test@gmai.com , bolGroup :true, password : test!@3 , passwordconfirm : test!@3 , ... ... } Success Response: Code : 200 success Resonse example { msg : User updated successfully! , data: user : { _id : 5f6212d8ed7daa16dcbf44ca , strFullName : first last , strEmailAddress : test@gmail.com , strTelephone : 5141257 , strTelephone2 : , intUserStatusID : 1, strUserTitle : strUserTitle , strPersonnelCode : , strUserName : 3 , strNotes : strNotes , strRequestNotes : strRequste notes , bolGroup : true, bolApiManaged : true, strPreferences : 6 , __v : 0 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed. Code : 400 BAD REQUEST Content example { msg : Update failed , data :null } Or Condition : Internal Server Error. Code : 500 Content example { msg : Internal Server error , data :null } Delete User Delete the User by Id URL : /api/users/:uid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the user. Success Response: Code : 200 success Resonse example { msg : User deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no User available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"User"},{"location":"User/index.html#create-user","text":"This object represents a user that can access and use the CMMS or a user group. Note: Only inactive users can be added through the API (with intUserStatusID set to 0). The user has to be activated using the CMMS. Create an User if User does not already exist. URL : /api/users/register Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Required Type Description strFullName yes String The full name of the user or user group. intUserStatusID optional Integer This can take the value 0 or 1 . A status 1 means that the user is active, whereas a status 0 means that the user is currently not activated and cannot access and use the CMMS. strTelephone2 optional String Secondary phone number. strEmailAddress yes String Email address. strUserTitle optional String The title of the user. For example : \"Head of Operations\" or \"Program Director\" . strPersonnelCode optional String Field that can be used to store a personnel code associated to this user. strUserName yes String The username that will be used by the user to access the CMMS. strTelephone yes String Primary phone number. strNotes optional String This fied can contain technical notes about the user. For example : \"Data imported from V2: language=English\" . strRequestNotes optional String Contains a string stating when the account was created. For example : \"Wed Nov 23 09:43:49 EST 2011: Account created.\" . bolGroup optional boolean This can take the value 0 or 1 or null. A value of 1 means the object represents a user group. bolApiManaged optional boolean The boolean value represents if the user is created through the API, in an external system. User information is managed in the Originating system. strPreferences optional String Technical string defining the user's preferences. password yes String user's password. passwordconfirm yes String password confirm. Data example All fields must be sent. { strFullName : first last , strTelephone : 5141257 , strEmailAddress : test@gmai.com , bolGroup :true, password : test!@3 , passwordconfirm : test!@3 , ... ... } Success Response: Code : 200 success Resonse example { msg : User added successfully!!! , data : {id: 5f68a89c247532232419483c } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed. Code : 400 BAD REQUEST Content example { msg : Email is required } Or Condition : Internal Server Error. Code : 500 Content example { msg : Internal Server error , }","title":"Create User"},{"location":"User/index.html#get-all-user-list","text":"Get the all registered user list. URL : /api/users/userlist Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : null, data : [ { _id : 5f6212d8ed7daa16dcbf44ca , strFullName : test demo , strEmailAddress : pavel@gmail.com , strTelephone : 123456 , strTelephone2 : 1 , intUserStatusID : 1, strUserTitle : 2 , strPersonnelCode : , strUserName : 3 , strNotes : 4 , strRequestNotes : sdfddd , bolGroup : true, bolApiManaged : true, strPreferences : 6 , __v : 0 }, { _id : 5f68a89c247532232419483c , strFullName : ttest pavel , strEmailAddress : olga@gmail.com , strTelephone : 45789 , strTelephone2 : , intUserStatusID : 0, strUserTitle : , strPersonnelCode : , strUserName : , strNotes : , strRequestNotes : , bolGroup : false, bolApiManaged : false, strPreferences : , __v : 0 } ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error , data :null }","title":"Get all user list"},{"location":"User/index.html#get-single-user-by-id","text":"Get a single User by id if current user was registered on it. URL : /api/users/:uid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the user. Success Response: Code : 200 success Resonse example { msg : null, data : { user : { _id : 5f6212d8ed7daa16dcbf44ca , strFullName : test demo , password : $2b$10$jIqho0m8oHKsXTNIk6xFcu0kSBme4zNieLyrm.cFDLYMCpVzRcKPq , strEmailAddress : test@gmail.com , strTelephone : strTelephone , strTelephone2 : , intUserStatusID : 1, strUserTitle : strUserTitle , strPersonnelCode : , strUserName : 3 , strNotes : strNotes , strRequestNotes : strRequste notes , bolGroup : true, bolApiManaged : true, strPreferences : 6 , __v : 0 } } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If user does not exist on server. Code : 404 Not Found Content example { msg : User not found , data :null }","title":"Get Single User By Id"},{"location":"User/index.html#update-user","text":"Update the User by Id URL : /api/users/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the user. Param Required Type Description strFullName yes String The full name of the user or user group. intUserStatusID optional Integer This can take the value 0 or 1 . A status 1 means that the user is active, whereas a status 0 means that the user is currently not activated and cannot access and use the CMMS. strTelephone2 optional String Secondary phone number. strEmailAddress yes String Email address. strUserTitle optional String The title of the user. For example : \"Head of Operations\" or \"Program Director\" . strPersonnelCode optional String Field that can be used to store a personnel code associated to this user. strUserName yes String The username that will be used by the user to access the CMMS. strTelephone yes String Primary phone number. strNotes optional String This fied can contain technical notes about the user. For example : \"Data imported from V2: language=English\" . strRequestNotes optional String Contains a string stating when the account was created. For example : \"Wed Nov 23 09:43:49 EST 2011: Account created.\" . bolGroup optional boolean This can take the value 0 or 1 or null. A value of 1 means the object represents a user group. bolApiManaged optional boolean The boolean value represents if the user is created through the API, in an external system. User information is managed in the Originating system. strPreferences optional String Technical string defining the user's preferences. password yes String user's password. passwordconfirm yes String password confirm. Data example All fields must be sent. { strFullName : first last , strTelephone : 5141257 , strEmailAddress : test@gmai.com , bolGroup :true, password : test!@3 , passwordconfirm : test!@3 , ... ... } Success Response: Code : 200 success Resonse example { msg : User updated successfully! , data: user : { _id : 5f6212d8ed7daa16dcbf44ca , strFullName : first last , strEmailAddress : test@gmail.com , strTelephone : 5141257 , strTelephone2 : , intUserStatusID : 1, strUserTitle : strUserTitle , strPersonnelCode : , strUserName : 3 , strNotes : strNotes , strRequestNotes : strRequste notes , bolGroup : true, bolApiManaged : true, strPreferences : 6 , __v : 0 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed. Code : 400 BAD REQUEST Content example { msg : Update failed , data :null } Or Condition : Internal Server Error. Code : 500 Content example { msg : Internal Server error , data :null }","title":"Update User"},{"location":"User/index.html#delete-user","text":"Delete the User by Id URL : /api/users/:uid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the user. Success Response: Code : 200 success Resonse example { msg : User deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no User available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete User"},{"location":"WorkOrder/index.html","text":"Create WorkOrder This object is used to represent work orders. A work order is a set of maintenance tasks that have to be executed by some assigned users on a given asset. Create an WorkOrder if WorkOrder does not already exist. URL : /api/workorder Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intPriorityID Integer The ID of the priority level of the task. For getting possible values, please refer to the Priority section. intWorkOrderStatusID Integer The ID of the current status of the work order. For possible values, please refer to the WorkOrderStatus section. intSiteID Integer For multi-sites tenants, the ID of the site the work order is related to. A site is an asset itself, so for possible values, please refer to the Asset section. intRequestedByUserID Integer The ID of the user who requested the work order. For getting possible values, please refer to the User section. strEmailUserGuest String Work orders can be requested by guests without having to log into the CMMS. In this case, this field gives the email address of the person who submitted the work order. dtmDateCreated timestamp The date and time when the work order was created. dtmDateCompleted timestamp The date and time when the work order was completed. intCompletedByUserID Integer The ID of the user who requested the work order. strDescription String A short text describing the work order. strNameUserGuest String Work orders can be requested by guests without having to log into the CMMS. In this case, this field gives the name of the person who submitted the work order. dtmSuggestedCompletionDate timestamp The date and time when the work order should be completed. strPhoneUserGuest String Work orders can be requested by guests without having to log into the CMMS. In this case, this field gives the phone number of the person who submitted the work order. strCode String An unique code for referencing the work order. Work order codes are automatically generated by the CMMS. For example : \"2009-02-05.0004.00004\" . strCompletionNotes String This field can be used to input some notes upon the completion of the work order. intMaintenanceTypeID Integer An ID referring to the maintenance type of the work order. dtmDateLastModified timestamp The date and time when the work order was modified for the last time. strAdminNotes String This field can be used by the administrator to input some notes upon the completion of the work order. intRCAActionID Integer For Enterprise tenants only. An ID that indicates the action/solution for a problem code. Problems, causes, and actions must be configured in the tenant to use this field. intRCACauseID Integer For Enterprise tenants only. An ID that indicates the root cause for a problem code. Problems, causes, and actions must be configured in the tenant to use this field. intRCAProblemID Integer For Enterprise tenants only. An ID that indicates the root cause for a problem code on a specific asset or asset category. Problems, causes, and actions must be configured in the tenant to use this field. Data example { intPriorityID : 4156, intSiteID : 9, strCode : 2009-02-05.0004.00004 , strCompletionNotes : strCompletionNotes , intRCACauseID : 4 ... ... } Success Response: Code : 200 success Resonse example { msg : WorkOrder added successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : intWorkOrderStatusID is required } { msg : Create failed } Get all workorder list Get the all registered workorder list. URL : /api/workorder Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : WorkOrder list found! , data : [ { _id : 5f6a6f90d9741d152c754178 , intPriorityID : 11, intWorkOrderStatusID : 22, intSiteID : 33, intRequestedByUserID : null, strEmailUserGuest : , dtmDateCreated : , dtmDateCompleted : , intCompletedByUserID : null, strDescription : , strNameUserGuest : , dtmSuggestedCompletionDate : , strPhoneUserGuest : , strCode : , strCompletionNotes : , intMaintenanceTypeID : null, dtmDateLastModified : , strAdminNotes : , intRCAActionID : null, intRCACauseID : null, intRCAProblemID : null, __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error. } Get Single WorkOrder By Id Get a single Workorder by id if current workorder was registered on it. URL : /api/workorder/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorder. Success Response: Code : 200 success Resonse example { msg : Workorder found! , data : { _id : 5f6896897b9884253cf6bdb6 , strAssignedUserIds : 13 8 9 intPriorityID : 4156, intWorkOrderStatusID : 4, strAssets : ASSET ABC (0010), ASSET DEF (0011) intSiteID : 3345, strAssignedUsers : John Doe, Samuel Smith , intRequestedByUserID : 667, strEmailUserGuest: , dtmDateCreated: , strAssetIds: 9 78 675 , dtmDateCompleted: , intCompletedByUserID:555 ... } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If workorder does not exist on server. Code : 404 Not Found Content example { msg : WorkOrder not found , data :null } Update WorkOrder Update the WorkOrder by Id URL : /api/workorder/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorder. Param Type Description intPriorityID Integer The ID of the priority level of the task. For getting possible values, please refer to the Priority section. intWorkOrderStatusID Integer The ID of the current status of the work order. For possible values, please refer to the WorkOrderStatus section. intSiteID Integer For multi-sites tenants, the ID of the site the work order is related to. A site is an asset itself, so for possible values, please refer to the Asset section. intRequestedByUserID Integer The ID of the user who requested the work order. For getting possible values, please refer to the User section. strEmailUserGuest String Work orders can be requested by guests without having to log into the CMMS. In this case, this field gives the email address of the person who submitted the work order. dtmDateCreated timestamp The date and time when the work order was created. dtmDateCompleted timestamp The date and time when the work order was completed. intCompletedByUserID Integer The ID of the user who requested the work order. strDescription String A short text describing the work order. strNameUserGuest String Work orders can be requested by guests without having to log into the CMMS. In this case, this field gives the name of the person who submitted the work order. dtmSuggestedCompletionDate timestamp The date and time when the work order should be completed. strPhoneUserGuest String Work orders can be requested by guests without having to log into the CMMS. In this case, this field gives the phone number of the person who submitted the work order. strCode String An unique code for referencing the work order. Work order codes are automatically generated by the CMMS. For example : \"2009-02-05.0004.00004\" . strCompletionNotes String This field can be used to input some notes upon the completion of the work order. intMaintenanceTypeID Integer An ID referring to the maintenance type of the work order. dtmDateLastModified timestamp The date and time when the work order was modified for the last time. strAdminNotes String This field can be used by the administrator to input some notes upon the completion of the work order. intRCAActionID Integer For Enterprise tenants only. An ID that indicates the action/solution for a problem code. Problems, causes, and actions must be configured in the tenant to use this field. intRCACauseID Integer For Enterprise tenants only. An ID that indicates the root cause for a problem code. Problems, causes, and actions must be configured in the tenant to use this field. intRCAProblemID Integer For Enterprise tenants only. An ID that indicates the root cause for a problem code on a specific asset or asset category. Problems, causes, and actions must be configured in the tenant to use this field. Data example { intPriorityID : 556, strDescription : example of strDescription , strNameUserGuest : str_Name_User_Guest , strPhoneUserGuest : str_PhoneUser_Guest , strCode : 2019-12-05.0004.00004 ... ... } Success Response: Code : 200 success Resonse example { msg : WorkOrder updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Delete WorkOrder Delete a WorkOrder by Id URL : /api/workorder/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorder. Success Response: Code : 200 success Resonse example { msg : Workorder deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"WorkOrder"},{"location":"WorkOrder/index.html#create-workorder","text":"This object is used to represent work orders. A work order is a set of maintenance tasks that have to be executed by some assigned users on a given asset. Create an WorkOrder if WorkOrder does not already exist. URL : /api/workorder Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intPriorityID Integer The ID of the priority level of the task. For getting possible values, please refer to the Priority section. intWorkOrderStatusID Integer The ID of the current status of the work order. For possible values, please refer to the WorkOrderStatus section. intSiteID Integer For multi-sites tenants, the ID of the site the work order is related to. A site is an asset itself, so for possible values, please refer to the Asset section. intRequestedByUserID Integer The ID of the user who requested the work order. For getting possible values, please refer to the User section. strEmailUserGuest String Work orders can be requested by guests without having to log into the CMMS. In this case, this field gives the email address of the person who submitted the work order. dtmDateCreated timestamp The date and time when the work order was created. dtmDateCompleted timestamp The date and time when the work order was completed. intCompletedByUserID Integer The ID of the user who requested the work order. strDescription String A short text describing the work order. strNameUserGuest String Work orders can be requested by guests without having to log into the CMMS. In this case, this field gives the name of the person who submitted the work order. dtmSuggestedCompletionDate timestamp The date and time when the work order should be completed. strPhoneUserGuest String Work orders can be requested by guests without having to log into the CMMS. In this case, this field gives the phone number of the person who submitted the work order. strCode String An unique code for referencing the work order. Work order codes are automatically generated by the CMMS. For example : \"2009-02-05.0004.00004\" . strCompletionNotes String This field can be used to input some notes upon the completion of the work order. intMaintenanceTypeID Integer An ID referring to the maintenance type of the work order. dtmDateLastModified timestamp The date and time when the work order was modified for the last time. strAdminNotes String This field can be used by the administrator to input some notes upon the completion of the work order. intRCAActionID Integer For Enterprise tenants only. An ID that indicates the action/solution for a problem code. Problems, causes, and actions must be configured in the tenant to use this field. intRCACauseID Integer For Enterprise tenants only. An ID that indicates the root cause for a problem code. Problems, causes, and actions must be configured in the tenant to use this field. intRCAProblemID Integer For Enterprise tenants only. An ID that indicates the root cause for a problem code on a specific asset or asset category. Problems, causes, and actions must be configured in the tenant to use this field. Data example { intPriorityID : 4156, intSiteID : 9, strCode : 2009-02-05.0004.00004 , strCompletionNotes : strCompletionNotes , intRCACauseID : 4 ... ... } Success Response: Code : 200 success Resonse example { msg : WorkOrder added successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : intWorkOrderStatusID is required } { msg : Create failed }","title":"Create WorkOrder"},{"location":"WorkOrder/index.html#get-all-workorder-list","text":"Get the all registered workorder list. URL : /api/workorder Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : WorkOrder list found! , data : [ { _id : 5f6a6f90d9741d152c754178 , intPriorityID : 11, intWorkOrderStatusID : 22, intSiteID : 33, intRequestedByUserID : null, strEmailUserGuest : , dtmDateCreated : , dtmDateCompleted : , intCompletedByUserID : null, strDescription : , strNameUserGuest : , dtmSuggestedCompletionDate : , strPhoneUserGuest : , strCode : , strCompletionNotes : , intMaintenanceTypeID : null, dtmDateLastModified : , strAdminNotes : , intRCAActionID : null, intRCACauseID : null, intRCAProblemID : null, __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error. }","title":"Get all workorder list"},{"location":"WorkOrder/index.html#get-single-workorder-by-id","text":"Get a single Workorder by id if current workorder was registered on it. URL : /api/workorder/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorder. Success Response: Code : 200 success Resonse example { msg : Workorder found! , data : { _id : 5f6896897b9884253cf6bdb6 , strAssignedUserIds : 13 8 9 intPriorityID : 4156, intWorkOrderStatusID : 4, strAssets : ASSET ABC (0010), ASSET DEF (0011) intSiteID : 3345, strAssignedUsers : John Doe, Samuel Smith , intRequestedByUserID : 667, strEmailUserGuest: , dtmDateCreated: , strAssetIds: 9 78 675 , dtmDateCompleted: , intCompletedByUserID:555 ... } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If workorder does not exist on server. Code : 404 Not Found Content example { msg : WorkOrder not found , data :null }","title":"Get Single WorkOrder By Id"},{"location":"WorkOrder/index.html#update-workorder","text":"Update the WorkOrder by Id URL : /api/workorder/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorder. Param Type Description intPriorityID Integer The ID of the priority level of the task. For getting possible values, please refer to the Priority section. intWorkOrderStatusID Integer The ID of the current status of the work order. For possible values, please refer to the WorkOrderStatus section. intSiteID Integer For multi-sites tenants, the ID of the site the work order is related to. A site is an asset itself, so for possible values, please refer to the Asset section. intRequestedByUserID Integer The ID of the user who requested the work order. For getting possible values, please refer to the User section. strEmailUserGuest String Work orders can be requested by guests without having to log into the CMMS. In this case, this field gives the email address of the person who submitted the work order. dtmDateCreated timestamp The date and time when the work order was created. dtmDateCompleted timestamp The date and time when the work order was completed. intCompletedByUserID Integer The ID of the user who requested the work order. strDescription String A short text describing the work order. strNameUserGuest String Work orders can be requested by guests without having to log into the CMMS. In this case, this field gives the name of the person who submitted the work order. dtmSuggestedCompletionDate timestamp The date and time when the work order should be completed. strPhoneUserGuest String Work orders can be requested by guests without having to log into the CMMS. In this case, this field gives the phone number of the person who submitted the work order. strCode String An unique code for referencing the work order. Work order codes are automatically generated by the CMMS. For example : \"2009-02-05.0004.00004\" . strCompletionNotes String This field can be used to input some notes upon the completion of the work order. intMaintenanceTypeID Integer An ID referring to the maintenance type of the work order. dtmDateLastModified timestamp The date and time when the work order was modified for the last time. strAdminNotes String This field can be used by the administrator to input some notes upon the completion of the work order. intRCAActionID Integer For Enterprise tenants only. An ID that indicates the action/solution for a problem code. Problems, causes, and actions must be configured in the tenant to use this field. intRCACauseID Integer For Enterprise tenants only. An ID that indicates the root cause for a problem code. Problems, causes, and actions must be configured in the tenant to use this field. intRCAProblemID Integer For Enterprise tenants only. An ID that indicates the root cause for a problem code on a specific asset or asset category. Problems, causes, and actions must be configured in the tenant to use this field. Data example { intPriorityID : 556, strDescription : example of strDescription , strNameUserGuest : str_Name_User_Guest , strPhoneUserGuest : str_PhoneUser_Guest , strCode : 2019-12-05.0004.00004 ... ... } Success Response: Code : 200 success Resonse example { msg : WorkOrder updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update WorkOrder"},{"location":"WorkOrder/index.html#delete-workorder","text":"Delete a WorkOrder by Id URL : /api/workorder/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorder. Success Response: Code : 200 success Resonse example { msg : Workorder deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete WorkOrder"},{"location":"WorkOrderAsset/index.html","text":"Create WorkOrderAsset This object is used for linking a work order to an workorderssset. Create an WorkOrderAsset if WorkOrderAsset does not already exist. URL : /api/workorderasset Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intWorkOrderID Integer The ID of the work order. For possible values, please refer to the WorkOrder section. intAssetID Integer The ID of the asset. For possible values, please refer to the Asset section. intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Data example { intWorkOrderID : 3, intAssetID : 5, intUpdated : 123124 } Success Response: Code : 200 success Resonse example { msg : WorkOrderAsset added successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed } Get all WorkOrderAsset list Get the all registered WorkOrderAsset list. URL : /api/workorderasset Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : WorkOrderAsset list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intWorkOrderID : 3, intAssetID : 5, intUpdated : 123124 __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update WorkOrderAsset Update the WorkOrderAsset by Id URL : /api/workorderasset/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorderssset. Param Type Description intWorkOrderID Integer The ID of the work order. For possible values, please refer to the WorkOrder section. intAssetID Integer The ID of the asset. For possible values, please refer to the Asset section. intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. *Data example { intWorkOrderID : 3, intAssetID : 5, intUpdated : 123124 } Success Response Code : 200 success Resonse example { msg : WorkOrderAsset updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Get Single WorkOrderAsset By Id Get a single WorkOrderAsset by id if current workorderssset was registered on it. URL : /api/workorderasset/:workorderassetid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorderssset. Success Response: Code : 200 success Resonse example { msg : WorkOrderAsset found! , data : { _id : 5f6896897b9884253cf6bdb6 , intWorkOrderID : 3, intAssetID : 5, intUpdated : 123124 __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If workorderssset does not exist on server. Code : 404 Not Found Content example { msg : WorkOrderAsset not found , data :null } Delete WorkOrderAsset Delete the WorkOrderAsset by Id URL : /api/workorderasset/:workorderassetid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorderssset. Success Response Code : 200 success Resonse example { msg : WorkOrderAsset deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no workorderssset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"WorkOrderAsset"},{"location":"WorkOrderAsset/index.html#create-workorderasset","text":"This object is used for linking a work order to an workorderssset. Create an WorkOrderAsset if WorkOrderAsset does not already exist. URL : /api/workorderasset Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intWorkOrderID Integer The ID of the work order. For possible values, please refer to the WorkOrder section. intAssetID Integer The ID of the asset. For possible values, please refer to the Asset section. intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. Data example { intWorkOrderID : 3, intAssetID : 5, intUpdated : 123124 } Success Response: Code : 200 success Resonse example { msg : WorkOrderAsset added successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed }","title":"Create WorkOrderAsset"},{"location":"WorkOrderAsset/index.html#get-all-workorderasset-list","text":"Get the all registered WorkOrderAsset list. URL : /api/workorderasset Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : WorkOrderAsset list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intWorkOrderID : 3, intAssetID : 5, intUpdated : 123124 __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all WorkOrderAsset list"},{"location":"WorkOrderAsset/index.html#update-workorderasset","text":"Update the WorkOrderAsset by Id URL : /api/workorderasset/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorderssset. Param Type Description intWorkOrderID Integer The ID of the work order. For possible values, please refer to the WorkOrder section. intAssetID Integer The ID of the asset. For possible values, please refer to the Asset section. intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. *Data example { intWorkOrderID : 3, intAssetID : 5, intUpdated : 123124 } Success Response Code : 200 success Resonse example { msg : WorkOrderAsset updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update WorkOrderAsset"},{"location":"WorkOrderAsset/index.html#get-single-workorderasset-by-id","text":"Get a single WorkOrderAsset by id if current workorderssset was registered on it. URL : /api/workorderasset/:workorderassetid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorderssset. Success Response: Code : 200 success Resonse example { msg : WorkOrderAsset found! , data : { _id : 5f6896897b9884253cf6bdb6 , intWorkOrderID : 3, intAssetID : 5, intUpdated : 123124 __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If workorderssset does not exist on server. Code : 404 Not Found Content example { msg : WorkOrderAsset not found , data :null }","title":"Get Single WorkOrderAsset By Id"},{"location":"WorkOrderAsset/index.html#delete-workorderasset","text":"Delete the WorkOrderAsset by Id URL : /api/workorderasset/:workorderassetid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorderssset. Success Response Code : 200 success Resonse example { msg : WorkOrderAsset deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no workorderssset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete  WorkOrderAsset"},{"location":"WorkOrderBusiness/index.html","text":"Create WorkOrderBusiness This object is used to specify the relation between and WorkOrder and the Businesses. Create an WorkOrderBusiness if WorkOrderBusiness does not already exist. URL : /api/workorderbusiness Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intAssetID Integer An integer that uniquely identifies the Asset that is associated with the WorkOrderBusiness (Used in conjunction with the Asset object). intBusinessGroupID Integer An integer that uniquely identifies the BusinessGroup that is associated with the WorkOrderBusiness. intBusinessID Integer An integer that uniquely identifies the Business that is associated with the WorkOrderBusiness (Used in conjunction with the Business object). intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn\u2019t been updated at all or the time it was most recently updated. intWorkOrderID Integer An integer that uniquely identifies the Work Order that is associated with this WorkOrderBusiness (Used in conjunction with the WorkOrder object). Data example { intAssetID : 3, intBusinessGroupID : 5, intBusinessID : 5, intUpdated : 123124, intWorkOrderID : 5 } Success Response: Code : 200 success Resonse example { msg : WorkOrderBusiness added successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed } Get all WorkOrderBusiness list Get the all registered WorkOrderBusiness list. URL : /api/workorderbusiness Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : WorkOrderBusiness list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intAssetID : 3, intBusinessGroupID : 5, intBusinessID : 5, intUpdated : 123124, intWorkOrderID : 5, __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update WorkOrderBusiness Update the WorkOrderBusiness by Id URL : /api/workorderbusiness/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorderbusiness. Param Type Description intAssetID Integer An integer that uniquely identifies the Asset that is associated with the WorkOrderBusiness (Used in conjunction with the Asset object). intBusinessGroupID Integer An integer that uniquely identifies the BusinessGroup that is associated with the WorkOrderBusiness. intBusinessID Integer An integer that uniquely identifies the Business that is associated with the WorkOrderBusiness (Used in conjunction with the Business object). intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn\u2019t been updated at all or the time it was most recently updated. intWorkOrderID Integer An integer that uniquely identifies the Work Order that is associated with this WorkOrderBusiness (Used in conjunction with the WorkOrder object). *Data example { intAssetID : 3, intBusinessGroupID : 5, intBusinessID : 5, intUpdated : 123124, intWorkOrderID : 5 } Success Response Code : 200 success Resonse example { msg : WorkOrderBusiness updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Get Single WorkOrderBusiness By Id Get a single WorkOrderBusiness by id if current workorderbusiness was registered on it. URL : /api/workorderbusiness/:workorderbusinessid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorderbusiness. Success Response: Code : 200 success Resonse example { msg : WorkOrderBusiness found! , data : { _id : 5f6896897b9884253cf6bdb6 , intAssetID : 3, intBusinessGroupID : 5, intBusinessID : 5, intUpdated : 123124, intWorkOrderID : 5, __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If workorderbusiness does not exist on server. Code : 404 Not Found Content example { msg : WorkOrderBusiness not found , data :null } Delete WorkOrderBusiness Delete the WorkOrderBusiness by Id URL : /api/workorderbusiness/:workorderbusinessid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorderbusiness. Success Response Code : 200 success Resonse example { msg : WorkOrderBusiness deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no workorderbusiness available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"WorkOrderBusiness"},{"location":"WorkOrderBusiness/index.html#create-workorderbusiness","text":"This object is used to specify the relation between and WorkOrder and the Businesses. Create an WorkOrderBusiness if WorkOrderBusiness does not already exist. URL : /api/workorderbusiness Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intAssetID Integer An integer that uniquely identifies the Asset that is associated with the WorkOrderBusiness (Used in conjunction with the Asset object). intBusinessGroupID Integer An integer that uniquely identifies the BusinessGroup that is associated with the WorkOrderBusiness. intBusinessID Integer An integer that uniquely identifies the Business that is associated with the WorkOrderBusiness (Used in conjunction with the Business object). intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn\u2019t been updated at all or the time it was most recently updated. intWorkOrderID Integer An integer that uniquely identifies the Work Order that is associated with this WorkOrderBusiness (Used in conjunction with the WorkOrder object). Data example { intAssetID : 3, intBusinessGroupID : 5, intBusinessID : 5, intUpdated : 123124, intWorkOrderID : 5 } Success Response: Code : 200 success Resonse example { msg : WorkOrderBusiness added successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed }","title":"Create WorkOrderBusiness"},{"location":"WorkOrderBusiness/index.html#get-all-workorderbusiness-list","text":"Get the all registered WorkOrderBusiness list. URL : /api/workorderbusiness Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : WorkOrderBusiness list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intAssetID : 3, intBusinessGroupID : 5, intBusinessID : 5, intUpdated : 123124, intWorkOrderID : 5, __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all WorkOrderBusiness list"},{"location":"WorkOrderBusiness/index.html#update-workorderbusiness","text":"Update the WorkOrderBusiness by Id URL : /api/workorderbusiness/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorderbusiness. Param Type Description intAssetID Integer An integer that uniquely identifies the Asset that is associated with the WorkOrderBusiness (Used in conjunction with the Asset object). intBusinessGroupID Integer An integer that uniquely identifies the BusinessGroup that is associated with the WorkOrderBusiness. intBusinessID Integer An integer that uniquely identifies the Business that is associated with the WorkOrderBusiness (Used in conjunction with the Business object). intUpdated Integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn\u2019t been updated at all or the time it was most recently updated. intWorkOrderID Integer An integer that uniquely identifies the Work Order that is associated with this WorkOrderBusiness (Used in conjunction with the WorkOrder object). *Data example { intAssetID : 3, intBusinessGroupID : 5, intBusinessID : 5, intUpdated : 123124, intWorkOrderID : 5 } Success Response Code : 200 success Resonse example { msg : WorkOrderBusiness updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update WorkOrderBusiness"},{"location":"WorkOrderBusiness/index.html#get-single-workorderbusiness-by-id","text":"Get a single WorkOrderBusiness by id if current workorderbusiness was registered on it. URL : /api/workorderbusiness/:workorderbusinessid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorderbusiness. Success Response: Code : 200 success Resonse example { msg : WorkOrderBusiness found! , data : { _id : 5f6896897b9884253cf6bdb6 , intAssetID : 3, intBusinessGroupID : 5, intBusinessID : 5, intUpdated : 123124, intWorkOrderID : 5, __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If workorderbusiness does not exist on server. Code : 404 Not Found Content example { msg : WorkOrderBusiness not found , data :null }","title":"Get Single WorkOrderBusiness By Id"},{"location":"WorkOrderBusiness/index.html#delete-workorderbusiness","text":"Delete the WorkOrderBusiness by Id URL : /api/workorderbusiness/:workorderbusinessid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorderbusiness. Success Response Code : 200 success Resonse example { msg : WorkOrderBusiness deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no workorderbusiness available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete  WorkOrderBusiness"},{"location":"WorkOrderPart/index.html","text":"Create WorkOrderPart This object is used to represent work orders. A work order is a set of maintenance tasks that have to be executed by some assigned users on a given asset. Create an WorkOrderPart if WorkOrderPart does not already exist. URL : /api/workorderpart Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intWorkOrderID Integer The ID of the work order the part will be needed for. intAssetID Integer The ID of the asset the part will be needed for. For getting possible values, please refer to the Asset section. intStockID Integer The ID of the stock representing the part. For getting possible values, please refer to the Stock section. intPartID Integer The ID of the asset associated with the stock that represents the part. For getting possible values, please refer to the Asset section. qtySuggestedQuantity Integer This field can be used to indicate the quantity that is going to be used for this part to perform the work order. qtyActualQuantityUsed integer This field can be used to indicate the quantity that was actually used to performed the work order. intUpdated integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. dv_intWorkOrderID string The code of the work order. For example : \"WO 2009-09-01.0010.00048.Any\". For more details, please refer to the WorkOrder section. dv_intPartID String The name and the code of the asset associated with the stock that represents the part. dv_intAssetID String The name and the code of the asset the part will be used to perform the work order on. dv_intStockID String The display value for the stock associated with the part. For example \"Asset (asset code) at facility x aisle y row z\". Data example { intPriorityID : 4156, intSiteID : 9, strCode : 2009-02-05.0004.00004 , strCompletionNotes : strCompletionNotes , intRCACauseID : 4 ... ... } Success Response: Code : 200 success Resonse example { msg : WorkOrderPart added successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : intWorkOrderStatusID is required } { msg : Create failed } Get all workorderpart list Get the all registered workorderpart list. URL : /api/workorderpart Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : WorkOrderPart list found! , data : [ { _id : 5f6a6f90d9741d152c754178 , intWorkOrderID : 11, intAssetID : 22, intStockID : 33, intPartID : null, qtySuggestedQuantity : , qtyActualQuantityUsed : , intUpdated : , __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error. } Get Single WorkOrderPart By Id Get a single WorkOrderPart by id if current workorderpart was registered on it. URL : /api/workorderpart/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorderpart. Success Response: Code : 200 success Resonse example { msg : Workorderpart found! , data : { _id : 5f6896897b9884253cf6bdb6 , intWorkOrderID : 1234, intAssetID : 5678, intStockID : 1111, intPartID : 3434, qtySuggestedQuantity : 2, qtyActualQuantityUsed : 4 ... } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If WorkOrderPart does not exist on server. Code : 404 Not Found Content example { msg : WorkOrderPart not found , data :null } Update WorkOrderPart Update the WorkOrderPart by Id URL : /api/workorderpart/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorder. Param Type Description intWorkOrderID Integer The ID of the work order the part will be needed for. intAssetID Integer The ID of the asset the part will be needed for. For getting possible values, please refer to the Asset section. intStockID Integer The ID of the stock representing the part. For getting possible values, please refer to the Stock section. intPartID Integer The ID of the asset associated with the stock that represents the part. For getting possible values, please refer to the Asset section. qtySuggestedQuantity Integer This field can be used to indicate the quantity that is going to be used for this part to perform the work order. qtyActualQuantityUsed integer This field can be used to indicate the quantity that was actually used to performed the work order. intUpdated integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. dv_intWorkOrderID string The code of the work order. For example : \"WO 2009-09-01.0010.00048.Any\". For more details, please refer to the WorkOrder section. dv_intPartID String The name and the code of the asset associated with the stock that represents the part. dv_intAssetID String The name and the code of the asset the part will be used to perform the work order on. dv_intStockID String The display value for the stock associated with the part. For example \"Asset (asset code) at facility x aisle y row z\". Data example { intWorkOrderID : 556, intAssetID : 789, intStockID : 98786, intPartID : 8564, qtySuggestedQuantity :545 ... ... } Success Response: Code : 200 success Resonse example { msg : WorkOrderPart updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Delete WorkOrderPart Delete a WorkOrderPart by Id URL : /api/workorderpart/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorderpart. Success Response: Code : 200 success Resonse example { msg : WorkOrderPart deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"WorkOrderPart"},{"location":"WorkOrderPart/index.html#create-workorderpart","text":"This object is used to represent work orders. A work order is a set of maintenance tasks that have to be executed by some assigned users on a given asset. Create an WorkOrderPart if WorkOrderPart does not already exist. URL : /api/workorderpart Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intWorkOrderID Integer The ID of the work order the part will be needed for. intAssetID Integer The ID of the asset the part will be needed for. For getting possible values, please refer to the Asset section. intStockID Integer The ID of the stock representing the part. For getting possible values, please refer to the Stock section. intPartID Integer The ID of the asset associated with the stock that represents the part. For getting possible values, please refer to the Asset section. qtySuggestedQuantity Integer This field can be used to indicate the quantity that is going to be used for this part to perform the work order. qtyActualQuantityUsed integer This field can be used to indicate the quantity that was actually used to performed the work order. intUpdated integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. dv_intWorkOrderID string The code of the work order. For example : \"WO 2009-09-01.0010.00048.Any\". For more details, please refer to the WorkOrder section. dv_intPartID String The name and the code of the asset associated with the stock that represents the part. dv_intAssetID String The name and the code of the asset the part will be used to perform the work order on. dv_intStockID String The display value for the stock associated with the part. For example \"Asset (asset code) at facility x aisle y row z\". Data example { intPriorityID : 4156, intSiteID : 9, strCode : 2009-02-05.0004.00004 , strCompletionNotes : strCompletionNotes , intRCACauseID : 4 ... ... } Success Response: Code : 200 success Resonse example { msg : WorkOrderPart added successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : intWorkOrderStatusID is required } { msg : Create failed }","title":"Create WorkOrderPart"},{"location":"WorkOrderPart/index.html#get-all-workorderpart-list","text":"Get the all registered workorderpart list. URL : /api/workorderpart Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : WorkOrderPart list found! , data : [ { _id : 5f6a6f90d9741d152c754178 , intWorkOrderID : 11, intAssetID : 22, intStockID : 33, intPartID : null, qtySuggestedQuantity : , qtyActualQuantityUsed : , intUpdated : , __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error. }","title":"Get all workorderpart list"},{"location":"WorkOrderPart/index.html#get-single-workorderpart-by-id","text":"Get a single WorkOrderPart by id if current workorderpart was registered on it. URL : /api/workorderpart/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorderpart. Success Response: Code : 200 success Resonse example { msg : Workorderpart found! , data : { _id : 5f6896897b9884253cf6bdb6 , intWorkOrderID : 1234, intAssetID : 5678, intStockID : 1111, intPartID : 3434, qtySuggestedQuantity : 2, qtyActualQuantityUsed : 4 ... } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If WorkOrderPart does not exist on server. Code : 404 Not Found Content example { msg : WorkOrderPart not found , data :null }","title":"Get Single WorkOrderPart By Id"},{"location":"WorkOrderPart/index.html#update-workorderpart","text":"Update the WorkOrderPart by Id URL : /api/workorderpart/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorder. Param Type Description intWorkOrderID Integer The ID of the work order the part will be needed for. intAssetID Integer The ID of the asset the part will be needed for. For getting possible values, please refer to the Asset section. intStockID Integer The ID of the stock representing the part. For getting possible values, please refer to the Stock section. intPartID Integer The ID of the asset associated with the stock that represents the part. For getting possible values, please refer to the Asset section. qtySuggestedQuantity Integer This field can be used to indicate the quantity that is going to be used for this part to perform the work order. qtyActualQuantityUsed integer This field can be used to indicate the quantity that was actually used to performed the work order. intUpdated integer An integer capturing the most recent write of a resource in UNIX epoch milliseconds, or milliseconds since 1970-01-01 00:00:00 UTC. The field is read-only and will reflect the time a resource was created if it hasn't been updated at all or the time it was most recently updated. dv_intWorkOrderID string The code of the work order. For example : \"WO 2009-09-01.0010.00048.Any\". For more details, please refer to the WorkOrder section. dv_intPartID String The name and the code of the asset associated with the stock that represents the part. dv_intAssetID String The name and the code of the asset the part will be used to perform the work order on. dv_intStockID String The display value for the stock associated with the part. For example \"Asset (asset code) at facility x aisle y row z\". Data example { intWorkOrderID : 556, intAssetID : 789, intStockID : 98786, intPartID : 8564, qtySuggestedQuantity :545 ... ... } Success Response: Code : 200 success Resonse example { msg : WorkOrderPart updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update WorkOrderPart"},{"location":"WorkOrderPart/index.html#delete-workorderpart","text":"Delete a WorkOrderPart by Id URL : /api/workorderpart/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorderpart. Success Response: Code : 200 success Resonse example { msg : WorkOrderPart deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete WorkOrderPart"},{"location":"WorkOrderStatus/index.html","text":"Create WorkOrderStatus Create a WorkOrderStatus if WorkOrderStatus does not already exist. URL : /api/workorderstatus Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Required Type Description strName String The display name of the status. intControlID Yes Integer The control ID is used to associated the status with a more general state of the work order workflow. Possible values are :100 for Pending, 101 for Active, 102 for Closed and 103 for Draft. intSysCode Integer The system codes are used to identify statuses with a special meaning for the CMMS. Possible values are:2 for Requested, 3 for Assigned, 4 for Open, 5 for Work In Progress, 6 for On Hold, 7 for Closed, Completed,8 for Draft and 9 for Closed, Incomplete. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 12 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : intControlID is required } { msg : Create failed } Get all WorkOrderStatus list Get the all registered WorkOrderStatus list. URL : /api/workorderstatus Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : WorkOrder list found! , data : [ { _id : 11 , strName : String intControlID : 100, intSysCode : 3, intUpdated : 2020-11-09T07:35:22.052+00:00, __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Get Single WorkOrderStatus By Id Get a single WorkOrderStatus by id if current WorkOrderStatus was registered on it. URL : /api/workorderstatus/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorder. Success Response: Code : 200 success Resonse example { msg : Workorder found! , data : { _id : 11 , strName : String intControlID : 100, intSysCode : 3, intUpdated : 2020-11-09T07:35:22.052+00:00, } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If workorderstatus does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null } Update WorkOrderStatus Update the WorkOrderStatus by Id URL : /api/workorderstatus/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderStatus. Param Required Type Description strName String The display name of the status. intControlID Yes Integer The control ID is used to associated the status with a more general state of the work order workflow. Possible values are :100 for Pending, 101 for Active, 102 for Closed and 103 for Draft. intSysCode Integer The system codes are used to identify statuses with a special meaning for the CMMS. Possible values are:2 for Requested, 3 for Assigned, 4 for Open, 5 for Work In Progress, 6 for On Hold, 7 for Closed, Completed,8 for Draft and 9 for Closed, Incomplete. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Delete WorkOrderStatus Delete a WorkOrderStatus by Id URL : /api/workorderstatus/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderStatus. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"WorkOrderStatus"},{"location":"WorkOrderStatus/index.html#create-workorderstatus","text":"Create a WorkOrderStatus if WorkOrderStatus does not already exist. URL : /api/workorderstatus Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Required Type Description strName String The display name of the status. intControlID Yes Integer The control ID is used to associated the status with a more general state of the work order workflow. Possible values are :100 for Pending, 101 for Active, 102 for Closed and 103 for Draft. intSysCode Integer The system codes are used to identify statuses with a special meaning for the CMMS. Possible values are:2 for Requested, 3 for Assigned, 4 for Open, 5 for Work In Progress, 6 for On Hold, 7 for Closed, Completed,8 for Draft and 9 for Closed, Incomplete. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 12 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : intControlID is required } { msg : Create failed }","title":"Create WorkOrderStatus"},{"location":"WorkOrderStatus/index.html#get-all-workorderstatus-list","text":"Get the all registered WorkOrderStatus list. URL : /api/workorderstatus Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : WorkOrder list found! , data : [ { _id : 11 , strName : String intControlID : 100, intSysCode : 3, intUpdated : 2020-11-09T07:35:22.052+00:00, __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all WorkOrderStatus list"},{"location":"WorkOrderStatus/index.html#get-single-workorderstatus-by-id","text":"Get a single WorkOrderStatus by id if current WorkOrderStatus was registered on it. URL : /api/workorderstatus/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorder. Success Response: Code : 200 success Resonse example { msg : Workorder found! , data : { _id : 11 , strName : String intControlID : 100, intSysCode : 3, intUpdated : 2020-11-09T07:35:22.052+00:00, } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If workorderstatus does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Get Single WorkOrderStatus By Id"},{"location":"WorkOrderStatus/index.html#update-workorderstatus","text":"Update the WorkOrderStatus by Id URL : /api/workorderstatus/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderStatus. Param Required Type Description strName String The display name of the status. intControlID Yes Integer The control ID is used to associated the status with a more general state of the work order workflow. Possible values are :100 for Pending, 101 for Active, 102 for Closed and 103 for Draft. intSysCode Integer The system codes are used to identify statuses with a special meaning for the CMMS. Possible values are:2 for Requested, 3 for Assigned, 4 for Open, 5 for Work In Progress, 6 for On Hold, 7 for Closed, Completed,8 for Draft and 9 for Closed, Incomplete. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update WorkOrderStatus"},{"location":"WorkOrderStatus/index.html#delete-workorderstatus","text":"Delete a WorkOrderStatus by Id URL : /api/workorderstatus/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderStatus. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete WorkOrderStatus"},{"location":"WorkOrderStatusTransition/index.html","text":"Create WorkOrderStatusTransition This object is used to represent work orders. A work order is a set of maintenance tasks that have to be executed by some assigned users on a given asset. Create an WorkOrderStatusTransition if WorkOrderStatusTransition does not already exist. URL : /api/workorderstatustransition Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intFromWorkOrderStatusID Integer The ID of the previous Work Order status that was changed. For getting possible values, please refer to the WorkOrderStatus section. intToWorkOrderStatusID Integer TThe ID of the new Work Order status that was set on the Work Order. For getting possible values, please refer to the WorkOrderStatus section. intUserID Integer The ID of the user that made the status transition on a Work Order. For getting possible values, please refer to the User section. intWorkOrderID Integer TThe ID of the Work Order on which the status was changed. For getting possible values, please refer to the WorkOrder section. dtmDate Date The date and time when the status transition was made. dv_intFromWorkOrderStatusID string The name of the WorkOrderStatus associated with intFromWorkOrderStatusID. dv_intToWorkOrderStatusID String The name of the WorkOrderStatus associated with intToWorkOrderStatusID. dv_intUserID String The name of the User associated with the intUserID. dv_intWorkOrderID String The code of the WorkOrder associated with intWorkOrderID. Data example { intFromWorkOrderStatusID : 4156, intToWorkOrderStatusID : 9, intUserID : 9, intWorkOrderID : 9, dtmDate : 2009-02-05.0004.00004 , ... ... } Success Response: Code : 200 success Resonse example { msg : WorkOrderStatusTransition added successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : intWorkOrderStatusID is required } { msg : Create failed } Get all WorkOrderStatusTransition list Get the all registered WorkOrderStatusTransition list. URL : /api/workorderstatustransition Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : WorkOrderStatusTransition list found! , data : [ { _id : 5f6a6f90d9741d152c754178 , intFromWorkOrderStatusID : 4156, intToWorkOrderStatusID : 9, intUserID : 9, intWorkOrderID : 9, dtmDate : 2009-02-05.0004.00004 , __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error. } Get Single WorkOrderStatusTransition By Id Get a single WorkOrderStatusTransition by id if current WorkOrderStatusTransition was registered on it. URL : /api/workorderstatustransition/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderStatusTransition. Success Response: Code : 200 success Resonse example { msg : WorkOrderStatusTransition found! , data : { _id : 5f6896897b9884253cf6bdb6 , intFromWorkOrderStatusID : 4156, intToWorkOrderStatusID : 9, intUserID : 9, intWorkOrderID : 9, dtmDate : 2009-02-05.0004.00004 , ... } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If WorkOrderStatusTransition does not exist on server. Code : 404 Not Found Content example { msg : WorkOrderStatusTransition not found , data :null } Update WorkOrderStatusTransition Update the WorkOrderStatusTransition by Id URL : /api/workorderstatustransition/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorder. Param Type Description intFromWorkOrderStatusID Integer The ID of the previous Work Order status that was changed. For getting possible values, please refer to the WorkOrderStatus section. intToWorkOrderStatusID Integer TThe ID of the new Work Order status that was set on the Work Order. For getting possible values, please refer to the WorkOrderStatus section. intUserID Integer The ID of the user that made the status transition on a Work Order. For getting possible values, please refer to the User section. intWorkOrderID Integer TThe ID of the Work Order on which the status was changed. For getting possible values, please refer to the WorkOrder section. dtmDate Date The date and time when the status transition was made. dv_intFromWorkOrderStatusID string The name of the WorkOrderStatus associated with intFromWorkOrderStatusID. dv_intToWorkOrderStatusID String The name of the WorkOrderStatus associated with intToWorkOrderStatusID. dv_intUserID String The name of the User associated with the intUserID. dv_intWorkOrderID String The code of the WorkOrder associated with intWorkOrderID. Data example { intFromWorkOrderStatusID : 4156, intToWorkOrderStatusID : 9, intUserID : 9, intWorkOrderID : 9, dtmDate : 2009-02-05.0004.00004 , ... ... } Success Response: Code : 200 success Resonse example { msg : WorkOrderStatusTransition updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Delete WorkOrderStatusTransition Delete a WorkOrderStatusTransition by Id URL : /api/workorderstatustransition/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderStatusTransition. Success Response: Code : 200 success Resonse example { msg : WorkOrderStatusTransition deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"WorkOrderStatusTransition"},{"location":"WorkOrderStatusTransition/index.html#create-workorderstatustransition","text":"This object is used to represent work orders. A work order is a set of maintenance tasks that have to be executed by some assigned users on a given asset. Create an WorkOrderStatusTransition if WorkOrderStatusTransition does not already exist. URL : /api/workorderstatustransition Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intFromWorkOrderStatusID Integer The ID of the previous Work Order status that was changed. For getting possible values, please refer to the WorkOrderStatus section. intToWorkOrderStatusID Integer TThe ID of the new Work Order status that was set on the Work Order. For getting possible values, please refer to the WorkOrderStatus section. intUserID Integer The ID of the user that made the status transition on a Work Order. For getting possible values, please refer to the User section. intWorkOrderID Integer TThe ID of the Work Order on which the status was changed. For getting possible values, please refer to the WorkOrder section. dtmDate Date The date and time when the status transition was made. dv_intFromWorkOrderStatusID string The name of the WorkOrderStatus associated with intFromWorkOrderStatusID. dv_intToWorkOrderStatusID String The name of the WorkOrderStatus associated with intToWorkOrderStatusID. dv_intUserID String The name of the User associated with the intUserID. dv_intWorkOrderID String The code of the WorkOrder associated with intWorkOrderID. Data example { intFromWorkOrderStatusID : 4156, intToWorkOrderStatusID : 9, intUserID : 9, intWorkOrderID : 9, dtmDate : 2009-02-05.0004.00004 , ... ... } Success Response: Code : 200 success Resonse example { msg : WorkOrderStatusTransition added successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : intWorkOrderStatusID is required } { msg : Create failed }","title":"Create WorkOrderStatusTransition"},{"location":"WorkOrderStatusTransition/index.html#get-all-workorderstatustransition-list","text":"Get the all registered WorkOrderStatusTransition list. URL : /api/workorderstatustransition Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : WorkOrderStatusTransition list found! , data : [ { _id : 5f6a6f90d9741d152c754178 , intFromWorkOrderStatusID : 4156, intToWorkOrderStatusID : 9, intUserID : 9, intWorkOrderID : 9, dtmDate : 2009-02-05.0004.00004 , __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error. }","title":"Get all WorkOrderStatusTransition list"},{"location":"WorkOrderStatusTransition/index.html#get-single-workorderstatustransition-by-id","text":"Get a single WorkOrderStatusTransition by id if current WorkOrderStatusTransition was registered on it. URL : /api/workorderstatustransition/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderStatusTransition. Success Response: Code : 200 success Resonse example { msg : WorkOrderStatusTransition found! , data : { _id : 5f6896897b9884253cf6bdb6 , intFromWorkOrderStatusID : 4156, intToWorkOrderStatusID : 9, intUserID : 9, intWorkOrderID : 9, dtmDate : 2009-02-05.0004.00004 , ... } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If WorkOrderStatusTransition does not exist on server. Code : 404 Not Found Content example { msg : WorkOrderStatusTransition not found , data :null }","title":"Get Single WorkOrderStatusTransition By Id"},{"location":"WorkOrderStatusTransition/index.html#update-workorderstatustransition","text":"Update the WorkOrderStatusTransition by Id URL : /api/workorderstatustransition/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorder. Param Type Description intFromWorkOrderStatusID Integer The ID of the previous Work Order status that was changed. For getting possible values, please refer to the WorkOrderStatus section. intToWorkOrderStatusID Integer TThe ID of the new Work Order status that was set on the Work Order. For getting possible values, please refer to the WorkOrderStatus section. intUserID Integer The ID of the user that made the status transition on a Work Order. For getting possible values, please refer to the User section. intWorkOrderID Integer TThe ID of the Work Order on which the status was changed. For getting possible values, please refer to the WorkOrder section. dtmDate Date The date and time when the status transition was made. dv_intFromWorkOrderStatusID string The name of the WorkOrderStatus associated with intFromWorkOrderStatusID. dv_intToWorkOrderStatusID String The name of the WorkOrderStatus associated with intToWorkOrderStatusID. dv_intUserID String The name of the User associated with the intUserID. dv_intWorkOrderID String The code of the WorkOrder associated with intWorkOrderID. Data example { intFromWorkOrderStatusID : 4156, intToWorkOrderStatusID : 9, intUserID : 9, intWorkOrderID : 9, dtmDate : 2009-02-05.0004.00004 , ... ... } Success Response: Code : 200 success Resonse example { msg : WorkOrderStatusTransition updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update WorkOrderStatusTransition"},{"location":"WorkOrderStatusTransition/index.html#delete-workorderstatustransition","text":"Delete a WorkOrderStatusTransition by Id URL : /api/workorderstatustransition/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderStatusTransition. Success Response: Code : 200 success Resonse example { msg : WorkOrderStatusTransition deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete WorkOrderStatusTransition"},{"location":"WorkOrderTask/index.html","text":"Create WorkOrderTask A work order consists of a set of tasks that must be executed by some assigned users on a set of assets. This object represents those tasks. Create a WorkOrderTask if WorkOrderTask does not already exist. URL : /api/workordertask Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intWorkOrderID Integer The ID of the work order the task is part of. For getting possible values, please refer to the WorkOrder section. intTaskType Integer An integer representing the type of the task. Possible values are : 0 for General, 1 for Text Result, 2 for Meter Reading, and 3 for Inspection Task. strResult String In case of a Text Result task, a text explaining the output of the task. intAssetID Integer The ID of the asset the task should be executed on. For getting possible values, please refer to the Asset section. intOrder Integer An integer used for ordering the tasks inside the work order. dtmStartDate timestamp The date and time when the task is scheduled to be worked on. dtmDateCompleted timestamp The date and time when the task was completed. intCompletedByUserID Integer The ID of the user who competed the task. For getting possible values, please refer to the User section. intAssignedToUserID Integer The ID of the user the task is assigned to. For getting possible values, please refer to the User section. dblTimeSpentHours Double The actual hours that were spent on the task. intMeterReadingUnitID Double In case of a Meter Reading task, the ID of the unit used for the meter reading. For getting all possible values, please refer to the MeterReadingUnit section. strDescription String A short description of the task itself. strTaskNotesCompletion String This field can be used to store some notes upon the completion of the task. intTaskGroupControlID Integer An integer representing the id of the task group. intParentWorkOrderTaskID Integer An integer representing the id of the parent work order task. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 12 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed } Read all WorkOrderTask list Get the all registered WorkOrderTask list. URL : /api/workordertask Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 11 , intWorkOrderID : 1234, dtmDateCompleted : 2020-11-26T09:00:36.285+00:00, intCompletedByUserID : 9876, dblTimeSpentHours : 4, intMeterReadingUnitID : 9010, strTaskNotesCompletion : The meter reading is over 9000 , ... __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Get Single WorkOrderTask By Id Get a single WorkOrderTask by id if current WorkOrderTask was registered on it. URL : /api/workordertask/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderTask. Success Response : Code : 200 success Resonse example { msg : Found! , data : { _id : 11, intWorkOrderID : 1234, dtmDateCompleted : 2020-11-26T09:00:36.285+00:00, intCompletedByUserID : 9876, dblTimeSpentHours : 4, intMeterReadingUnitID : 9010, strTaskNotesCompletion : The meter reading is over 9000 , ... } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If workordertask does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null } Update WorkOrderTask Update the WorkOrderTask by Id URL : /api/workordertask/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderTask. Param Type Description intWorkOrderID Integer The ID of the work order the task is part of. For getting possible values, please refer to the WorkOrder section. intTaskType Integer An integer representing the type of the task. Possible values are : 0 for General, 1 for Text Result, 2 for Meter Reading, and 3 for Inspection Task. strResult String In case of a Text Result task, a text explaining the output of the task. intAssetID Integer The ID of the asset the task should be executed on. For getting possible values, please refer to the Asset section. intOrder Integer An integer used for ordering the tasks inside the work order. dtmStartDate timestamp The date and time when the task is scheduled to be worked on. dtmDateCompleted timestamp The date and time when the task was completed. intCompletedByUserID Integer The ID of the user who competed the task. For getting possible values, please refer to the User section. intAssignedToUserID Integer The ID of the user the task is assigned to. For getting possible values, please refer to the User section. dblTimeSpentHours Double The actual hours that were spent on the task. intMeterReadingUnitID Double In case of a Meter Reading task, the ID of the unit used for the meter reading. For getting all possible values, please refer to the MeterReadingUnit section. strDescription String A short description of the task itself. strTaskNotesCompletion String This field can be used to store some notes upon the completion of the task. intTaskGroupControlID Integer An integer representing the id of the task group. intParentWorkOrderTaskID Integer An integer representing the id of the parent work order task. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Delete WorkOrderTask Delete a WorkOrderTask by Id URL : /api/workordertask/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderTask. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses : Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"WorkOrderTask"},{"location":"WorkOrderTask/index.html#create-workordertask","text":"A work order consists of a set of tasks that must be executed by some assigned users on a set of assets. This object represents those tasks. Create a WorkOrderTask if WorkOrderTask does not already exist. URL : /api/workordertask Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intWorkOrderID Integer The ID of the work order the task is part of. For getting possible values, please refer to the WorkOrder section. intTaskType Integer An integer representing the type of the task. Possible values are : 0 for General, 1 for Text Result, 2 for Meter Reading, and 3 for Inspection Task. strResult String In case of a Text Result task, a text explaining the output of the task. intAssetID Integer The ID of the asset the task should be executed on. For getting possible values, please refer to the Asset section. intOrder Integer An integer used for ordering the tasks inside the work order. dtmStartDate timestamp The date and time when the task is scheduled to be worked on. dtmDateCompleted timestamp The date and time when the task was completed. intCompletedByUserID Integer The ID of the user who competed the task. For getting possible values, please refer to the User section. intAssignedToUserID Integer The ID of the user the task is assigned to. For getting possible values, please refer to the User section. dblTimeSpentHours Double The actual hours that were spent on the task. intMeterReadingUnitID Double In case of a Meter Reading task, the ID of the unit used for the meter reading. For getting all possible values, please refer to the MeterReadingUnit section. strDescription String A short description of the task itself. strTaskNotesCompletion String This field can be used to store some notes upon the completion of the task. intTaskGroupControlID Integer An integer representing the id of the task group. intParentWorkOrderTaskID Integer An integer representing the id of the parent work order task. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 12 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed }","title":"Create WorkOrderTask"},{"location":"WorkOrderTask/index.html#read-all-workordertask-list","text":"Get the all registered WorkOrderTask list. URL : /api/workordertask Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 11 , intWorkOrderID : 1234, dtmDateCompleted : 2020-11-26T09:00:36.285+00:00, intCompletedByUserID : 9876, dblTimeSpentHours : 4, intMeterReadingUnitID : 9010, strTaskNotesCompletion : The meter reading is over 9000 , ... __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Read all WorkOrderTask list"},{"location":"WorkOrderTask/index.html#get-single-workordertask-by-id","text":"Get a single WorkOrderTask by id if current WorkOrderTask was registered on it. URL : /api/workordertask/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderTask. Success Response : Code : 200 success Resonse example { msg : Found! , data : { _id : 11, intWorkOrderID : 1234, dtmDateCompleted : 2020-11-26T09:00:36.285+00:00, intCompletedByUserID : 9876, dblTimeSpentHours : 4, intMeterReadingUnitID : 9010, strTaskNotesCompletion : The meter reading is over 9000 , ... } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If workordertask does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Get Single WorkOrderTask By Id"},{"location":"WorkOrderTask/index.html#update-workordertask","text":"Update the WorkOrderTask by Id URL : /api/workordertask/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderTask. Param Type Description intWorkOrderID Integer The ID of the work order the task is part of. For getting possible values, please refer to the WorkOrder section. intTaskType Integer An integer representing the type of the task. Possible values are : 0 for General, 1 for Text Result, 2 for Meter Reading, and 3 for Inspection Task. strResult String In case of a Text Result task, a text explaining the output of the task. intAssetID Integer The ID of the asset the task should be executed on. For getting possible values, please refer to the Asset section. intOrder Integer An integer used for ordering the tasks inside the work order. dtmStartDate timestamp The date and time when the task is scheduled to be worked on. dtmDateCompleted timestamp The date and time when the task was completed. intCompletedByUserID Integer The ID of the user who competed the task. For getting possible values, please refer to the User section. intAssignedToUserID Integer The ID of the user the task is assigned to. For getting possible values, please refer to the User section. dblTimeSpentHours Double The actual hours that were spent on the task. intMeterReadingUnitID Double In case of a Meter Reading task, the ID of the unit used for the meter reading. For getting all possible values, please refer to the MeterReadingUnit section. strDescription String A short description of the task itself. strTaskNotesCompletion String This field can be used to store some notes upon the completion of the task. intTaskGroupControlID Integer An integer representing the id of the task group. intParentWorkOrderTaskID Integer An integer representing the id of the parent work order task. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update WorkOrderTask"},{"location":"WorkOrderTask/index.html#delete-workordertask","text":"Delete a WorkOrderTask by Id URL : /api/workordertask/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderTask. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses : Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete WorkOrderTask"},{"location":"WorkOrderTask/creat_WorkOrderTask_api.html","text":"Create WorkOrderTask Api A work order consists of a set of tasks that must be executed by some assigned users on a set of assets. This object represents those tasks. Create a WorkOrderTask if WorkOrderTask does not already exist. URL : /api/workordertask Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intWorkOrderID Integer The ID of the work order the task is part of. For getting possible values, please refer to the WorkOrder section. intTaskType Integer An integer representing the type of the task. Possible values are : 0 for General, 1 for Text Result, 2 for Meter Reading, and 3 for Inspection Task. strResult String In case of a Text Result task, a text explaining the output of the task. intAssetID Integer The ID of the asset the task should be executed on. For getting possible values, please refer to the Asset section. intOrder Integer An integer used for ordering the tasks inside the work order. dtmStartDate timestamp The date and time when the task is scheduled to be worked on. dtmDateCompleted timestamp The date and time when the task was completed. intCompletedByUserID Integer The ID of the user who competed the task. For getting possible values, please refer to the User section. intAssignedToUserID Integer The ID of the user the task is assigned to. For getting possible values, please refer to the User section. dblTimeSpentHours Double The actual hours that were spent on the task. intMeterReadingUnitID Double In case of a Meter Reading task, the ID of the unit used for the meter reading. For getting all possible values, please refer to the MeterReadingUnit section. strDescription String A short description of the task itself. strTaskNotesCompletion String This field can be used to store some notes upon the completion of the task. intTaskGroupControlID Integer An integer representing the id of the task group. intParentWorkOrderTaskID Integer An integer representing the id of the parent work order task. Success Response Code : 200 success Resonse example { msg : Created successfully! , data : {id: 12 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed }","title":"Create WorkOrderTask Api"},{"location":"WorkOrderTask/creat_WorkOrderTask_api.html#create-workordertask-api","text":"A work order consists of a set of tasks that must be executed by some assigned users on a set of assets. This object represents those tasks. Create a WorkOrderTask if WorkOrderTask does not already exist. URL : /api/workordertask Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intWorkOrderID Integer The ID of the work order the task is part of. For getting possible values, please refer to the WorkOrder section. intTaskType Integer An integer representing the type of the task. Possible values are : 0 for General, 1 for Text Result, 2 for Meter Reading, and 3 for Inspection Task. strResult String In case of a Text Result task, a text explaining the output of the task. intAssetID Integer The ID of the asset the task should be executed on. For getting possible values, please refer to the Asset section. intOrder Integer An integer used for ordering the tasks inside the work order. dtmStartDate timestamp The date and time when the task is scheduled to be worked on. dtmDateCompleted timestamp The date and time when the task was completed. intCompletedByUserID Integer The ID of the user who competed the task. For getting possible values, please refer to the User section. intAssignedToUserID Integer The ID of the user the task is assigned to. For getting possible values, please refer to the User section. dblTimeSpentHours Double The actual hours that were spent on the task. intMeterReadingUnitID Double In case of a Meter Reading task, the ID of the unit used for the meter reading. For getting all possible values, please refer to the MeterReadingUnit section. strDescription String A short description of the task itself. strTaskNotesCompletion String This field can be used to store some notes upon the completion of the task. intTaskGroupControlID Integer An integer representing the id of the task group. intParentWorkOrderTaskID Integer An integer representing the id of the parent work order task.","title":"Create WorkOrderTask Api"},{"location":"WorkOrderTask/creat_WorkOrderTask_api.html#success-response","text":"Code : 200 success Resonse example { msg : Created successfully! , data : {id: 12 } }","title":"Success Response"},{"location":"WorkOrderTask/creat_WorkOrderTask_api.html#error-responses","text":"Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed }","title":"Error Responses"},{"location":"WorkOrderTask/delete_WorkOrderTask_api.html","text":"Delete WorkOrderTask Api Delete a WorkOrderTask by Id URL : /api/workordertask/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderTask. Success Response Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete WorkOrderTask Api"},{"location":"WorkOrderTask/delete_WorkOrderTask_api.html#delete-workordertask-api","text":"Delete a WorkOrderTask by Id URL : /api/workordertask/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderTask.","title":"Delete WorkOrderTask Api"},{"location":"WorkOrderTask/delete_WorkOrderTask_api.html#success-response","text":"Code : 200 success Resonse example { msg : Deleted successfully! , data: null }","title":"Success Response"},{"location":"WorkOrderTask/delete_WorkOrderTask_api.html#error-responses","text":"Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Error Responses"},{"location":"WorkOrderTask/get_WorkOrderTask_byId_Api.html","text":"Get Single WorkOrderTask By Id Api Get a single WorkOrderTask by id if current WorkOrderTask was registered on it. URL : /api/workordertask/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderTask. Success Response Code : 200 success Resonse example { msg : Found! , data : { _id : 11, intWorkOrderID : 1234, dtmDateCompleted : 2020-11-26T09:00:36.285+00:00, intCompletedByUserID : 9876, dblTimeSpentHours : 4, intMeterReadingUnitID : 9010, strTaskNotesCompletion : The meter reading is over 9000 , ... } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If workordertask does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Get Single WorkOrderTask By Id Api"},{"location":"WorkOrderTask/get_WorkOrderTask_byId_Api.html#get-single-workordertask-by-id-api","text":"Get a single WorkOrderTask by id if current WorkOrderTask was registered on it. URL : /api/workordertask/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderTask.","title":"Get Single WorkOrderTask By Id Api"},{"location":"WorkOrderTask/get_WorkOrderTask_byId_Api.html#success-response","text":"Code : 200 success Resonse example { msg : Found! , data : { _id : 11, intWorkOrderID : 1234, dtmDateCompleted : 2020-11-26T09:00:36.285+00:00, intCompletedByUserID : 9876, dblTimeSpentHours : 4, intMeterReadingUnitID : 9010, strTaskNotesCompletion : The meter reading is over 9000 , ... } }","title":"Success Response"},{"location":"WorkOrderTask/get_WorkOrderTask_byId_Api.html#error-responses","text":"Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null }","title":"Error Responses"},{"location":"WorkOrderTask/get_WorkOrderTask_byId_Api.html#or","text":"Condition : If workordertask does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Or"},{"location":"WorkOrderTask/read_all_WorkOrderTask_Api.html","text":"Read all WorkOrderTask list Api Get the all registered WorkOrderTask list. URL : /api/workordertask Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response Code : 200 success Resonse example { msg : Found! , data : [ { _id : 11 , intWorkOrderID : 1234, dtmDateCompleted : 2020-11-26T09:00:36.285+00:00, intCompletedByUserID : 9876, dblTimeSpentHours : 4, intMeterReadingUnitID : 9010, strTaskNotesCompletion : The meter reading is over 9000 , ... __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Read all WorkOrderTask list Api"},{"location":"WorkOrderTask/read_all_WorkOrderTask_Api.html#read-all-workordertask-list-api","text":"Get the all registered WorkOrderTask list. URL : /api/workordertask Method : GET Auth required : YES Header : Authorization:{jwt-token}","title":"Read all WorkOrderTask list Api"},{"location":"WorkOrderTask/read_all_WorkOrderTask_Api.html#success-response","text":"Code : 200 success Resonse example { msg : Found! , data : [ { _id : 11 , intWorkOrderID : 1234, dtmDateCompleted : 2020-11-26T09:00:36.285+00:00, intCompletedByUserID : 9876, dblTimeSpentHours : 4, intMeterReadingUnitID : 9010, strTaskNotesCompletion : The meter reading is over 9000 , ... __v : 0 }, ... ] }","title":"Success Response"},{"location":"WorkOrderTask/read_all_WorkOrderTask_Api.html#error-responses","text":"Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Error Responses"},{"location":"WorkOrderTask/update_WorkOrderTask_byId_Api.html","text":"Update WorkOrderTask Api Update the WorkOrderTask by Id URL : /api/workordertask/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderTask. Param Type Description intWorkOrderID Integer The ID of the work order the task is part of. For getting possible values, please refer to the WorkOrder section. intTaskType Integer An integer representing the type of the task. Possible values are : 0 for General, 1 for Text Result, 2 for Meter Reading, and 3 for Inspection Task. strResult String In case of a Text Result task, a text explaining the output of the task. intAssetID Integer The ID of the asset the task should be executed on. For getting possible values, please refer to the Asset section. intOrder Integer An integer used for ordering the tasks inside the work order. dtmStartDate timestamp The date and time when the task is scheduled to be worked on. dtmDateCompleted timestamp The date and time when the task was completed. intCompletedByUserID Integer The ID of the user who competed the task. For getting possible values, please refer to the User section. intAssignedToUserID Integer The ID of the user the task is assigned to. For getting possible values, please refer to the User section. dblTimeSpentHours Double The actual hours that were spent on the task. intMeterReadingUnitID Double In case of a Meter Reading task, the ID of the unit used for the meter reading. For getting all possible values, please refer to the MeterReadingUnit section. strDescription String A short description of the task itself. strTaskNotesCompletion String This field can be used to store some notes upon the completion of the task. intTaskGroupControlID Integer An integer representing the id of the task group. intParentWorkOrderTaskID Integer An integer representing the id of the parent work order task. Success Response Code : 200 success Resonse example { msg : Updated successfully! } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update WorkOrderTask Api"},{"location":"WorkOrderTask/update_WorkOrderTask_byId_Api.html#update-workordertask-api","text":"Update the WorkOrderTask by Id URL : /api/workordertask/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderTask. Param Type Description intWorkOrderID Integer The ID of the work order the task is part of. For getting possible values, please refer to the WorkOrder section. intTaskType Integer An integer representing the type of the task. Possible values are : 0 for General, 1 for Text Result, 2 for Meter Reading, and 3 for Inspection Task. strResult String In case of a Text Result task, a text explaining the output of the task. intAssetID Integer The ID of the asset the task should be executed on. For getting possible values, please refer to the Asset section. intOrder Integer An integer used for ordering the tasks inside the work order. dtmStartDate timestamp The date and time when the task is scheduled to be worked on. dtmDateCompleted timestamp The date and time when the task was completed. intCompletedByUserID Integer The ID of the user who competed the task. For getting possible values, please refer to the User section. intAssignedToUserID Integer The ID of the user the task is assigned to. For getting possible values, please refer to the User section. dblTimeSpentHours Double The actual hours that were spent on the task. intMeterReadingUnitID Double In case of a Meter Reading task, the ID of the unit used for the meter reading. For getting all possible values, please refer to the MeterReadingUnit section. strDescription String A short description of the task itself. strTaskNotesCompletion String This field can be used to store some notes upon the completion of the task. intTaskGroupControlID Integer An integer representing the id of the task group. intParentWorkOrderTaskID Integer An integer representing the id of the parent work order task.","title":"Update WorkOrderTask Api"},{"location":"WorkOrderTask/update_WorkOrderTask_byId_Api.html#success-response","text":"Code : 200 success Resonse example { msg : Updated successfully! }","title":"Success Response"},{"location":"WorkOrderTask/update_WorkOrderTask_byId_Api.html#error-responses","text":"Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Error Responses"},{"location":"WorkOrderUser/index.html","text":"Create WorkOrderUser This object is used to specify the users who should be notified upon progression of the work order. Create an WorkOrderUser if WorkOrderUser does not already exist. URL : /api/workorderuser Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intWorkOrderID Integer The ID of the work order. For getting possible values, please refer to the WorkOrder section. intUserID Integer The ID of the user. For getting possible values, please refer to the User section. bolNotifyOnAssignment Boolean If set to true, the user will be notified on assignment. bolNotifyOnCompletion Boolean If set to true, the user will be notified on completion. bolNotifyOnOnlineOffline Boolean If set to true, the user will be notified when the asset associated with the work order is set online/offline. bolNotifyOnStatusChange Boolean If set to true, the user will be notified when the status of the work order changes. bolNotifyOnTaskCompleted Boolean If set to true, the user will be notified on task completion. Data example { intWorkOrderID : 3, intUserID : 5, bolNotifyOnAssignment : false, bolNotifyOnCompletion : false, ... ... } Success Response: Code : 200 success Resonse example { msg : WorkOrderUser added successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed } Get all WorkOrderUser list Get the all registered WorkOrderUser list. URL : /api/workorderuser Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : WorkOrderUser list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intWorkOrderID : 3, intUserID : 5, bolNotifyOnAssignment : false, bolNotifyOnCompletion : false, bolNotifyOnOnlineOffline : false, bolNotifyOnStatusChange : false, bolNotifyOnTaskCompleted : false, __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update WorkOrderUser Update the WorkOrderUser by Id URL : /api/workorderuser/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorderuser. Param Type Description intWorkOrderID Integer The ID of the work order. For getting possible values, please refer to the WorkOrder section. intUserID Integer The ID of the user. For getting possible values, please refer to the User section. bolNotifyOnAssignment Boolean If set to true, the user will be notified on assignment. bolNotifyOnCompletion Boolean If set to true, the user will be notified on completion. bolNotifyOnOnlineOffline Boolean If set to true, the user will be notified when the asset associated with the work order is set online/offline. bolNotifyOnStatusChange Boolean If set to true, the user will be notified when the status of the work order changes. bolNotifyOnTaskCompleted Boolean If set to true, the user will be notified on task completion. Data example { intWorkOrderID : 3, intUserID : 5, bolNotifyOnAssignment : false, bolNotifyOnCompletion : false, ... ... } Success Response Code : 200 success Resonse example { msg : WorkOrderUser updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Get Single WorkOrderUser By Id Get a single WorkOrderUser by id if current workorderuser was registered on it. URL : /api/workorderuser/:workorderuserid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorderuser. Success Response: Code : 200 success Resonse example { msg : WorkOrderUser found! , data : { _id : 5f6896897b9884253cf6bdb6 , intWorkOrderID : 3, intUserID : 5, bolNotifyOnAssignment : false, bolNotifyOnCompletion : false, bolNotifyOnOnlineOffline : false, bolNotifyOnStatusChange : false, bolNotifyOnTaskCompleted : false, __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If workorderuser does not exist on server. Code : 404 Not Found Content example { msg : WorkOrderUser not found , data :null } Delete WorkOrderUser Delete the WorkOrderUser by Id URL : /api/workorderuser/:workorderuserid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorderuser. Success Response Code : 200 success Resonse example { msg : WorkOrderUser deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no workorderuser available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"WorkOrderUser"},{"location":"WorkOrderUser/index.html#create-workorderuser","text":"This object is used to specify the users who should be notified upon progression of the work order. Create an WorkOrderUser if WorkOrderUser does not already exist. URL : /api/workorderuser Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intWorkOrderID Integer The ID of the work order. For getting possible values, please refer to the WorkOrder section. intUserID Integer The ID of the user. For getting possible values, please refer to the User section. bolNotifyOnAssignment Boolean If set to true, the user will be notified on assignment. bolNotifyOnCompletion Boolean If set to true, the user will be notified on completion. bolNotifyOnOnlineOffline Boolean If set to true, the user will be notified when the asset associated with the work order is set online/offline. bolNotifyOnStatusChange Boolean If set to true, the user will be notified when the status of the work order changes. bolNotifyOnTaskCompleted Boolean If set to true, the user will be notified on task completion. Data example { intWorkOrderID : 3, intUserID : 5, bolNotifyOnAssignment : false, bolNotifyOnCompletion : false, ... ... } Success Response: Code : 200 success Resonse example { msg : WorkOrderUser added successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed }","title":"Create WorkOrderUser"},{"location":"WorkOrderUser/index.html#get-all-workorderuser-list","text":"Get the all registered WorkOrderUser list. URL : /api/workorderuser Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : WorkOrderUser list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , intWorkOrderID : 3, intUserID : 5, bolNotifyOnAssignment : false, bolNotifyOnCompletion : false, bolNotifyOnOnlineOffline : false, bolNotifyOnStatusChange : false, bolNotifyOnTaskCompleted : false, __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all WorkOrderUser list"},{"location":"WorkOrderUser/index.html#update-workorderuser","text":"Update the WorkOrderUser by Id URL : /api/workorderuser/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorderuser. Param Type Description intWorkOrderID Integer The ID of the work order. For getting possible values, please refer to the WorkOrder section. intUserID Integer The ID of the user. For getting possible values, please refer to the User section. bolNotifyOnAssignment Boolean If set to true, the user will be notified on assignment. bolNotifyOnCompletion Boolean If set to true, the user will be notified on completion. bolNotifyOnOnlineOffline Boolean If set to true, the user will be notified when the asset associated with the work order is set online/offline. bolNotifyOnStatusChange Boolean If set to true, the user will be notified when the status of the work order changes. bolNotifyOnTaskCompleted Boolean If set to true, the user will be notified on task completion. Data example { intWorkOrderID : 3, intUserID : 5, bolNotifyOnAssignment : false, bolNotifyOnCompletion : false, ... ... } Success Response Code : 200 success Resonse example { msg : WorkOrderUser updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update WorkOrderUser"},{"location":"WorkOrderUser/index.html#get-single-workorderuser-by-id","text":"Get a single WorkOrderUser by id if current workorderuser was registered on it. URL : /api/workorderuser/:workorderuserid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorderuser. Success Response: Code : 200 success Resonse example { msg : WorkOrderUser found! , data : { _id : 5f6896897b9884253cf6bdb6 , intWorkOrderID : 3, intUserID : 5, bolNotifyOnAssignment : false, bolNotifyOnCompletion : false, bolNotifyOnOnlineOffline : false, bolNotifyOnStatusChange : false, bolNotifyOnTaskCompleted : false, __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If workorderuser does not exist on server. Code : 404 Not Found Content example { msg : WorkOrderUser not found , data :null }","title":"Get Single WorkOrderUser By Id"},{"location":"WorkOrderUser/index.html#delete-workorderuser","text":"Delete the WorkOrderUser by Id URL : /api/workorderuser/:workorderuserid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorderuser. Success Response Code : 200 success Resonse example { msg : WorkOrderUser deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no workorderuser available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete  WorkOrderUser"}]}